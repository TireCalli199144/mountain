{"version":3,"sources":["../../../../usr/local/lib/node_modules/canvas-sketch-cli/node_modules/browser-pack/_prelude.js","app.js","fragment.glsl","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/object-assign/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/right-now/browser.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-promise/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-dom/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/util.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/repeat-string/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/keys.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/is_arguments.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/dateformat/lib/dateformat.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/pad-left/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/save.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/accessibility.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/paper-sizes.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/defined/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/convert-length/convert-length.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/distances.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/resizeCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/get-canvas-context/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/createCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/SketchManager.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/keyboardShortcuts.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/canvas-sketch.js","node_modules/three/build/three.js","node_modules/three/examples/js/controls/OrbitControls.js","vertex.glsl","canvas-sketch-cli/injected/storage-key.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_fragment","_interopRequireDefault","_vertex","global","THREE","canvasSketch","context","renderer","WebGLRenderer","canvas","setClearColor","camera","PerspectiveCamera","position","set","lookAt","Vector3","controls","OrbitControls","scene","Scene","geometry","BufferGeometry","Float32Array","count","j","Math","random","setAttribute","BufferAttribute","material","ShaderMaterial","extensions","derivatives","side","DoubleSide","uniforms","time","type","value","resolution","Vector4","uvRate1","Vector2","transparent","vertexShader","default","fragmentShader","depthWrite","depthTest","blending","AdditiveBlending","mesh","Points","add","[object Object]","pixelRatio","viewportWidth","viewportHeight","setPixelRatio","setSize","aspect","updateProjectionMatrix","update","render","dispose","animate","getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","objectAssign","assign","test1","String","getOwnPropertyNames","test2","fromCharCode","map","join","test3","split","forEach","letter","keys","err","shouldUseNative","target","source","from","symbols","to","val","TypeError","toObject","s","arguments","key","browser","commonjsGlobal","performance","now","Date","isPromise_1","obj","then","isDom","window","Node","nodeType","nodeName","getClientAPI","defined","arguments$1","isBrowser","document","cache","shim","push","supportsArgumentsClass","toString","supported","object","unsupported","pSlice","Array","slice","deepEqual","actual","expected","opts","getTime","strict","b","isUndefinedOrNull","is_arguments","isBuffer","ka","kb","sort","objEquiv","x","copy","token","timezone","timezoneClip","dateFormat","date","mask","utc","gmt","undefined","isArray","toLowerCase","test","isNaN","maskSlice","masks","_","d","D","m","y","H","M","L","getTimezoneOffset","W","targetThursday","getFullYear","getMonth","getDate","setDate","getDay","firstThursday","ds","setHours","getHours","floor","getWeek","N","dow","getDayOfWeek","flags","dd","pad","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","round","timeNames","tt","T","TT","Z","match","pop","replace","abs","S","len","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","expiresHeaderFormat","res","repeatString","str","num","max","substr","link","padLeft","ch","noop","defaultExts","extension","prefix","suffix","supportedEncodings","stream","isStart","Promise","resolve","reject","filename","resolveFilename","frame","func","client","output","ev","saveDataURL","dataURL","splitIndex","indexOf","base64","byteString","atob","mimeMatch","exec","mime","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","createBlobFromDataURL","blob","saveBlob","createElement","style","visibility","download","href","URL","createObjectURL","body","appendChild","onclick","setTimeout","revokeObjectURL","parentElement","removeChild","removeAttribute","click","opt","file","totalFrames","layerStr","isFinite","totalLayers","layer","filter","Boolean","name","timeStamp","hash","commonTypos","dimension","animated","animating","unit","P5","pixellated","looping","pixelPerInch","allKeys","checkSettings","settings","console","warn","includes","paperSizes","reduce","dict","preset","item","units","dimensions","defined$1","conversions","system","factor","cm","pt","pc","in","ft","anchors","metric","ratio","imperial","convertLength","fromUnit","toUnit","pixelsPerInch","precision","roundPixel","toFactor","fromFactor","isToPixel","fromUnitData","toUnitData","anchor","result","decimals","Number","convertDistance$1","unitsFrom","unitsTo","resizeCanvas","props","width","height","styleWidth","styleHeight","canvasWidth","canvasHeight","hasDimensions","checkIfHasDimensions","exporting","scaleToFit","scaleToView","exportPixelRatio","bleed","devicePixelRatio","basePixelRatio","maxPixelRatio","min","trimWidth","trimHeight","ref","element","parent","innerWidth","innerHeight","getBoundingClientRect","getParentSize","parentWidth","parentHeight","getDimensionsFromPreset","highest","lowest","orientation","landscape","realWidth","realHeight","windowAspect","scaleToFitPadding","maxWidth","maxHeight","getCanvasContext_1","gl","attribs","names","getContext","createCanvas","ownsCanvas","newCanvas","createCanvasElement","attributes","pixelated","imageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","SketchManager","_settings","_props","_sketch","_raf","_recordTimeout","_lastRedrawResult","_isP5Resizing","_keyboardShortcuts","handler","enabled","keyCode","altKey","metaKey","ctrlKey","togglePlay","preventDefault","commit","save","addEventListener","removeEventListener","keyboardShortcuts","this$1","hotkeys","shiftKey","recording","endRecord","run","record","exportFrame","playing","pause","play","_animateHandler","_resizeHandler","resize","sketch","get","this","_computePlayhead","currentTime","duration","_computeFrame","playhead","fps","_computeCurrentFrame","_getSizeProps","started","_signalBegin","tick","_cancelTimeouts","cancelAnimationFrame","_lastTime","requestAnimationFrame","error","stop","deltaTime","exportOpts","_createExportOptions","frameInterval","log","_signalEnd","beginRecord","_wrapContextScale","catch","response","begin","end","wasRecording","sequence","encoding","encodingQuality","dateformat","all","preExport","commitOpts","_doExportFrame","drawResult","concat","hasDataObject","data","toDataURL","exportCanvas","layerList","curOpt","saveParam","k","savePromise","parts","saveFile","saveResult","savedEvents","eventWithOutput","find","outputName","isClient","some","isStreaming","ofSeq","postExport","cb","_preRender","_postRender","p5","scale","scaleX","scaleY","scaleContext","restore","flush","redraw","submitDrawCall","notYetSupported","oldCanvas","oldContext","timeOpts","timeProps","getTimeProps","_setupGLKey","_appendCanvasIfNeeded","draw","oldSizes","newProps","pixelDensity","styleCanvas","newSizes","changed","deepEqual_1","_sizeChanged","frameIntervalMS","deltaTimeMS","hasDuration","isNewFrame","playbackRate","newTime","timeScale","isFinished","isLoopStart","loop","lastFrame","dispatch","mount","unmount","detach","ctx","clear","clearColor","bufferData","hasTotalFrames","totalFramesFromDuration","durationFromTotalFrames","Infinity","startTime","startFrame","hasStartTime","hasStartFrame","setup","loadAndRun","newSettings","load","unload","destroy","createSketch","preload","P5Constructor","p5Sketch","isGL","WEBGL","P2D","noLoop","setAttributes","_renderer","drawingContext","loader","attach","message","CACHE","runtimeCollisions","hotID","isHot","hot","id","isInjecting","previousData","cacheGet","next","oldManager","manager","PaperSizes","factory","EPSILON","pow","isInteger","sign","Function","defineProperty","index","nextKey","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","NoBlending","NormalBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","NormalAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","GLSL3","EventDispatcher","listener","_listeners","listeners","hasEventListener","listenerArray","splice","dispatchEvent","event","array","_lut","_seed","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","d1","d2","d3","toUpperCase","clamp","euclideanModulo","mapLinear","a1","a2","b1","b2","lerp","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","seededRandom","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","_defineProperties","descriptor","enumerable","configurable","writable","_createClass","Constructor","protoProps","staticProps","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_assertThisInitialized","self","ReferenceError","_canvas","_proto","setScalar","scalar","setX","setY","setComponent","getComponent","clone","v","w","addVectors","addScalar","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","elements","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","g","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","rotate","theta","translate","matrix","ImageUtils","getDataURL","image","src","HTMLCanvasElement","createElementNS","ImageData","putImageData","drawImage","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","DEFAULT_IMAGE","DEFAULT_MAPPING","uuid","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","serializeImage","HTMLImageElement","ImageBitmap","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","isDataTexture","transformUv","uv","z","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","zz","xy","xz","yz","getZ","getW","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","isWebGLRenderTarget","isWebGLMultisampleRenderTarget","Quaternion","_x","_y","_z","_w","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","_s","_s2","_s3","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","multiplyVectors","applyEuler","applyQuaternion","_quaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$1","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","boundingBox","computeBoundingBox","_box","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0","_v1","_v2","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","getBoundingSphere","intersect","_points","v0","extents","_testAxis","p0","p1","p2","_box$1","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","makeBasis","extractRotation","_v1$1","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","_ce","_cf","_de","_df","_ae","_af","_be","_bf","ac","ad","bc","bd","_ac","_ad","_bc","_bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","isVector3","t14","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","x2","y2","z2","wx","wy","wz","decompose","_m1","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","Euler","DefaultOrder","asin","setFromQuaternion","_matrix","setFromVector3","reorder","newOrder","_quaternion$1","toVector3","optionalResult","RotationOrders","Layers","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$2","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","defineProperties","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","remove","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","serialize","library","JSON","stringify","isInstancedMesh","instanceMatrix","isMesh","isLine","isPoints","parameters","isSkinnedMesh","bindMode","bindMatrix","skeleton","uuids","_i","_l","_i2","_i3","extractFromCache","_shapes","values","recursive","parse","_vector1","_vector2","_normalMatrix","Plane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","isColor","setHex","setStyle","hex","setHSL","handleAlpha","string","parseFloat","color","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","normalized","NAMES","Face3","materialIndex","vertexNormals","vertexColors","_il","materialId","Material","fog","flatShading","opacity","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","isMaterial","onBeforeCompile","customProgramCacheKey","newValue","currentValue","isRoot","_data","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","_vector$3","_vector2$1","itemSize","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float16BufferAttribute","Float32BufferAttribute","Float64BufferAttribute","Float64Array","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","isFloat16BufferAttribute","DirectGeometry","vertices","normals","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","_vertexUvs","morphTarget","_j","morphNormal","arrayMax","TYPED_ARRAYS","getTypedArray","buffer","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","deleteAttribute","hasAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","_attribute","_attribute2","_attribute3","lineDistancesNeedUpdate","_attribute4","lineDistance","fromDirectGeometry","morphAttributesPosition","isGLBufferAttribute","_il2","_morphAttribute","jl","computeFaceNormals","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","_il3","vA","vB","vC","_i4","_il4","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","indices","array2","geometry2","newAttribute","_name","morphArray","morphAttribute","_newAttribute","_i5","_key","attributeData","hasMorphAttributes","_key2","attributeArray","_attribute6","_attributeData","_name2","_i6","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","boneTransform","intersection","morphTargetDictionary","ml","intersects","groupMaterial","faceIndex","_a","_b","_c","_group","_groupMaterial","_jl","isMultiMaterial","fl","faceMaterial","fvA","fvB","fvC","uvs_f","BoxBufferGeometry","_BufferGeometry","depth","widthSegments","heightSegments","depthSegments","_this","scope","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","_iy","_ix","cloneUniforms","property","isMatrix3","isMatrix4","isVector2","isVector4","mergeUniforms","merged","UniformsUtils","default_vertex","default_fragment","defines","lights","clipping","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","Camera","fov","zoom","focus","view","filmGauge","filmOffset","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","CubeTexture","_needsFlipEnvMap","WebGLCubeRenderTarget","dummy","DataTexture","isCubeTexture","fromEquirectangularTexture","shader","tEquirect","currentMinFilter","stencil","_sphere$1","_vector$5","Frustum","p4","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmissionmap_fragment","transmissionmap_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","cubemaps","state","objects","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","isScene","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","stride","vertexAttribIPointer","reset","resetDefaultState","updateBuffers","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","saveCache","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","isInstancedBufferAttribute","_buffer","_type","instanceColor","_buffer2","_type2","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","info","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","useCache","materialProperties","nGlobal","lGlobal","clippingState","WebGLCubeMaps","mapTextureMapping","onTextureDispose","cubemap","has","currentRenderList","getRenderList","setRenderList","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","buffergeometry","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","MAX_SAFE_INTEGER","morphInfluencesSum","_influence","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","onInstancedMeshDispose","instancedMesh","DataTexture2DArray","wrapR","DataTexture3D","physical","transmission","transmissionMap","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","subscript","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","generateExtensions","customDefines","chunks","generateDefines","createProgram","versionString","isRawShaderMaterial","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","outputEncoding","depthPacking","cachedUniforms","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","deleteShader","getActiveAttrib","getAttribLocation","fetchAttributeLocations","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","isMeshStandardMaterial","environment","bones","nVertexMatrices","getMaxBones","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","finish","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","list","cameras","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","_uniforms","penumbra","_shadow","_shadowUniforms","isRectAreaLight","_uniforms2","isPointLight","_uniforms3","_shadow2","_shadowUniforms2","isHemisphereLight","_uniforms4","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","_uniforms5","_uniforms6","_uniforms7","_uniforms8","WebGLRenderState","lightsArray","shadowsArray","setupLights","setupLightsView","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderCallDepth","renderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_objects","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","kl","depthMaterial","_depthMaterial","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","_equationToGL","_factorToGL","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","texImage2D","emptyTextures","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","activeTexture","webglSlot","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","WebGLTextures","_gl","utils","_wrappingToGL","_filterToGL","_videoTextures","useOffscreenCanvas","OffscreenCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","_mipmap","mipmapImage","_j2","_mipmap2","uploadCubeTexture","wrappingToGL","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","_samples","_glInternalFormat","_samples2","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","createFramebuffer","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","Group","WebXRController","_targetRay","_grip","_hand","WebXRManager","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","onSessionEnd","disconnect","setFramebuffer","animation","isPresenting","onRequestReferenceSpace","updateInputSources","inputSources","removed","added","_inputSource","_controller","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","getContextAttributes","xrCompatible","makeXRCompatible","baseLayer","XRWebGLLayer","antialias","updateRenderState","requestReferenceSpace","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","transform","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","display","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderState","renderStateStack","domElement","sortObjects","toneMappingExposure","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","initGLContext","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","material2","initMaterial","renderObjects","isArrayCamera","camera2","isImmediateRenderObject","renderObjectImmediate","lightsStateVersion","programCacheKey","programChange","needsLights","materialNeedsLights","progUniforms","uniformsList","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","projectObject","isGroup","isLOD","_geometry","_material","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","WebGL1Renderer","joints","inputState","pinching","XRHand","LITTLE_PHALANX_TIP","joint","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","jointPose","getJointPose","jointRadius","indexTip","INDEX_PHALANX_TIP","thumbTip","THUMB_PHALANX_TIP","distanceToPinch","handedness","getPose","targetRaySpace","gripSpace","FogExp2","Fog","_Object3D","InterleavedBuffer","isInterleavedBuffer","arrayBuffers","_uuid","ib","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","_currentLevel","levels","addLevel","getCurrentLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$7","_matrix$1","SkinnedMesh","bindMatrixInverse","Bone","bind","calculateInverses","normalizeSkinWeights","skinWeight","skinIndex","weight","boneIndex","boneInverses","isBone","_offsetMatrix","_identityMatrix","Skeleton","inverse","bone","_bone","getBoneByName","fromJSON","json","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","_lineDistances","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","_l2","_distance","nbVertices","_distance2","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","requestVideoFrameCallback","updateVideo","CompressedTexture","CanvasTexture","DepthTexture","readyState","HAVE_CURRENT_DATA","isCanvasTexture","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","fromBufferGeometry","addFace","areaWeighted","vl","_f","_fl","_face","_v","_vl","_fl2","_face2","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","_f3","_fl3","faceNormal","_f4","_fl4","_face3","_vertexNormals","_f5","_fl5","_face4","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","_i7","faceVertexNormals","faceVertexColors","faceCopy","_i8","_il5","faceVertexUvs2","_jl2","uvsCopy","mergeMesh","mergeVertices","precisionPoints","verticesMap","unique","changes","faceIndicesToRemove","_i9","_il6","_i10","idx","diff","sortFacesByMaterialIndex","_id","newUvs1","newUvs2","uvs1","_i11","vertex","normalsHash","colorsHash","uvsHash","_i12","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","_i13","_il7","_i14","_il8","_i15","_il9","_i16","_il10","_j3","_jl3","_j4","_jl4","_i17","_il11","_j5","_jl5","srcVertexNormal","destVertexNormal","_j6","_jl6","_i18","_il12","_i19","_il13","_i20","_il14","BoxGeometry","_Geometry","CircleBufferGeometry","segments","thetaStart","thetaLength","segment","CircleGeometry","CylinderBufferGeometry","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateCap","centerIndexStart","centerIndexEnd","_x2","cosTheta","sinTheta","_x3","slope","indexRow","generateTorso","CylinderGeometry","ConeGeometry","_CylinderGeometry","ConeBufferGeometry","_CylinderBufferGeomet","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","DodecahedronBufferGeometry","_PolyhedronBufferGeom","DodecahedronGeometry","_v0$2","_v1$5","_normal$1","_triangle","EdgesGeometry","thresholdAngle","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","_edgeData$key","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","ExtrudeBufferGeometry","verticesArray","addShape","shape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","reverse","hl","ahole","_h","_hl","scalePt2","vec","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","_h2","_hl2","_ahole2","_k","_bs","vert","_h3","_hl3","_ahole3","_vert","bs","_vert2","binormals","_vert3","_t","_bs2","_vert4","_h4","_hl4","_ahole4","_vert5","sidewalls","layeroffset","_k2","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","_h5","_hl5","_ahole5","buildSideFaces","_toJSON","indexA","indexB","indexC","b_x","b_y","c_x","c_y","indexD","a_x","a_y","a_z","b_z","c_z","d_x","d_y","d_z","ExtrudeGeometry","_toJSON$1","IcosahedronBufferGeometry","IcosahedronGeometry","LatheBufferGeometry","phiStart","phiLength","inverseSegments","base","n1","n2","_base","LatheGeometry","OctahedronBufferGeometry","OctahedronGeometry","ParametricBufferGeometry","slices","stacks","pu","pv","sliceCount","ParametricGeometry","PlaneGeometry","PolyhedronGeometry","RingBufferGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","_segment","RingGeometry","ShapeBufferGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","_l3","_toJSON$2","ShapeGeometry","_toJSON$3","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","SphereGeometry","TetrahedronBufferGeometry","TetrahedronGeometry","TextBufferGeometry","_ExtrudeBufferGeometr","text","font","isFont","generateShapes","TextGeometry","TorusBufferGeometry","tube","tubularSegments","arc","TorusGeometry","TorusKnotBufferGeometry","P1","P2","B","calculatePositionOnCurve","cu","su","quOverP","cs","TorusKnotGeometry","heightScale","TubeBufferGeometry","closed","frames","tangents","P","generateSegment","getPointAt","generateIndices","generateBufferData","TubeGeometry","taper","bufferGeometry","WireframeGeometry","edge","edges","edge1","edge2","ol","_edge","_key3","_e","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","ior","TOON","MATCAP","Materials","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","endFrame","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","_loop","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","_startIndex","interpolant","_startIndex2","_endIndex2","evaluate","resultBuffer","numTimes","valueStart","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","parseKeyframeTrack","trackType","typeName","getTrackTypeForValueTypeName","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","_giveUpAt","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","_readOffset","_writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","_m","animationKey","boneName","Cache","files","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","removeHandler","getHandler","DefaultLoadingManager","Loader","crossOrigin","withCredentials","resourcePath","requestHeader","loadAsync","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","FileLoader","AnimationLoader","CompressedTextureLoader","ImageLoader","CubeTextureLoader","DataTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","request","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","responseType","parser","DOMParser","parseFromString","header","XMLHttpRequest","open","callbacks","_callback","overrideMimeType","send","setResponseType","setMimeType","loaded","loadTexture","texDatas","mipmapCount","isCubemap","onImageLoad","onImageError","urls","texData","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","_theta","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","SphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","LightProbe","MaterialLoader","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","typedArray","bufferAttribute","_typedArray","_bufferAttribute","drawcalls","offsets","ObjectLoader","_Loader","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","child","geometryShapes","bufferGeometryLoader","details","deserializeImage","loadImage","deserializedImage","_deserializedImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","objectAnimations","setTexturePath","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","familyName","FontLoader","isImageBitmapLoader","setOptions","fetchOptions","credentials","imageBitmap","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","_tmpPath","_tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","tmpPath","tmpShape","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","_sIdx","_sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","Clock","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","Audio","autoplay","detune","loopStart","loopEnd","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","_Audio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","accumulateAdditive","weightAdditive","saveOriginalState","originalValueOffset","getValue","restoreOriginalState","startIndex","endIndex","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","bindings","unbind","root","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","subTreeNode","searchNodeSubtree","childNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCachedIndex","firstActiveObject","uncache","lastObject","_lastIndex","_lastObject","_m2","_bindingsForPath","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationMixer","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","Uniform","InstancedInterleavedBuffer","GLBufferAttribute","Raycaster","PointCloud","ascSort","_intersectObject","setType","setItemSize","setCount","setFromCamera","coords","intersectObject","intersectObjects","Spherical","other","makeSafe","setFromCartesianCoords","Cylindrical","_vector$8","Box2","_startP","_startEnd","Line3","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","ImmediateRenderObject","_vector$9","SpotLightHelper","cone","coneLength","coneWidth","_vector$a","_boneMatrix","_matrixWorldInv","SkeletonHelper","_LineSegments","getBoneList","boneList","isSkeletonHelper","PointLightHelper","_Mesh","sphereSize","_vector$b","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","_color","_v1$6","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$c","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_lineGeometry","_coneGeometry","_ENCODINGS","_box$3","BoxHelper","Box3Helper","PlaneHelper","_Line","_axis","ArrowHelper","headLength","headWidth","setDirection","setColor","AxesHelper","_floatView","_int32View","DataUtils","toHalfFloat","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","MAX_SAMPLES","ENCODINGS","_flatCamera","_createPlanes2","_createPlanes","_lodPlanes","_sizeLods","_sigmas","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","weights","poleAxis","_pingPongRenderTarget","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","cubeCamera","upSign","forwardSign","maxComponent","fExp","log2","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","exp","outputSize","lod","sizeLod","texelSize","positionSize","uvSize","faceIndexSize","ClosedSplineCurve3","SplineCurve3","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","applyMatrix","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","maxInstancedCount","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","transparency","clearTarget","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","revision","AdditiveAnimationBlendMode","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CubeGeometry","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FaceColors","FlatShading","Float32Attribute","Float64Attribute","GLSL1","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","define","amd","globalThis","quat","quatInverse","lastPosition","lastQuaternion","twoPI","minDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","UP","BOTTOM","mouseButtons","touches","ONE","TWO","target0","position0","zoom0","getPolarAngle","spherical","getAzimuthalAngle","saveState","changeEvent","STATE","NONE","rotateLeft","sphericalDelta","panOffset","zoomChanged","EPS","onContextMenu","onPointerDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","ownerDocument","onPointerMove","onPointerUp","onKeyDown","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","panUp","pan","deltaX","deltaY","targetDistance","clientHeight","clientWidth","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","handleTouchMoveRotate","handleTouchMovePan","handleTouchMoveDolly","pointerType","mouseAction","button","handleMouseDownDolly","onMouseDown","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","onMouseUp","stopPropagation","handleMouseWheel","handleKeyDown","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","MapControls","CANVAS_SKETCH_DEFAULT_STORAGE_KEY","location"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","global.THREE = require(\"three\");\nrequire(\"three/examples/js/controls/OrbitControls\");\nimport fragment from \"./fragment.glsl\";\nimport vertex from \"./vertex.glsl\";\n\nconst canvasSketch = require(\"canvas-sketch\");\n\nconst settings = {\n  animate: true,\n  context: \"webgl\",\n};\n\nconst sketch = ({ context }) => {\n  const renderer = new THREE.WebGLRenderer({\n    canvas: context.canvas,\n  });\n\n  // WebGL background color\n  renderer.setClearColor(\"#000\", 1);\n\n  // Setup a camera\n  const camera = new THREE.PerspectiveCamera(50, 1, 0.01, 100);\n  camera.position.set(0, -3, -0.75);\n  camera.lookAt(new THREE.Vector3());\n\n  // Setup camera controller\n  const controls = new THREE.OrbitControls(camera, context.canvas);\n\n  // Setup your scene\n  const scene = new THREE.Scene();\n\n  const geometry = new THREE.BufferGeometry();\n\n  let count = 500;\n\n  let position = new Float32Array(count * count * 3);\n  for (let i = 0; i < count; i++) {\n    for (let j = 0; j < count; j++) {\n      let u = Math.random() * 2 * Math.PI;\n      let v = Math.random() * 2 * Math.PI;\n\n      position.set(\n        [(i / count - 0.5) * 15, (j / count - 0.5) * 15, 0],\n        3 * (count * i + j)\n      );\n    }\n  }\n\n  geometry.setAttribute(\"position\", new THREE.BufferAttribute(position, 3));\n\n  const material = new THREE.ShaderMaterial({\n    extensions: {\n      derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n    },\n    side: THREE.DoubleSide,\n    uniforms: {\n      time: { type: \"f\", value: 0 },\n      resolution: { type: \"v4\", value: new THREE.Vector4() },\n      uvRate1: {\n        value: new THREE.Vector2(1, 1),\n      },\n    },\n    transparent: true,\n    vertexShader: vertex,\n    fragmentShader: fragment,\n    depthWrite: false,\n    depthTest: false,\n    blending: THREE.AdditiveBlending,\n  });\n\n  const mesh = new THREE.Points(geometry, material);\n  scene.add(mesh);\n\n  // draw each frame\n  return {\n    // Handle resize events here\n    resize({ pixelRatio, viewportWidth, viewportHeight }) {\n      renderer.setPixelRatio(pixelRatio);\n      renderer.setSize(viewportWidth, viewportHeight, false);\n      camera.aspect = viewportWidth / viewportHeight;\n      camera.updateProjectionMatrix();\n    },\n    // Update & render your scene here\n    render({ time }) {\n      // time += 0.05;\n      material.uniforms.time.value = time;\n      controls.update();\n      renderer.render(scene, camera);\n    },\n    // Dispose of events & renderer for cleaner hot-reloading\n    unload() {\n      controls.dispose();\n      renderer.dispose();\n    },\n  };\n};\n\ncanvasSketch(sketch, settings);\n","module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D texture1;\\nuniform sampler2D texture2;\\nuniform vec4 resolution;\\n\\nvarying vec2 vUv;\\nvarying float vProgress;\\n\\nvoid main() {\\n    // vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\\n    float dist = length(gl_PointCoord - vec2(0.5));\\n    float alpha = 1. - smoothstep(0.45,0.5,dist);\\n    gl_FragColor = vec4(1.,1.,1.,alpha*0.6 + 0.7*vProgress);\\n}\\n\";","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","module.exports =\n  global.performance &&\n  global.performance.now ? function now() {\n    return performance.now()\n  } : Date.now || function now() {\n    return +new Date\n  }\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","module.exports = isNode\n\nfunction isNode (val) {\n  return (!val || typeof val !== 'object')\n    ? false\n    : (typeof window === 'object' && typeof window.Node === 'object')\n      ? (val instanceof window.Node)\n      : (typeof val.nodeType === 'number') &&\n        (typeof val.nodeName === 'string')\n}\n","// TODO: We can remove a huge chunk of bundle size by using a smaller\n// utility module for converting units.\nimport isDOM from 'is-dom';\n\nexport function getClientAPI () {\n  return typeof window !== 'undefined' && window['canvas-sketch-cli'];\n}\n\nexport function defined () {\n  for (let i = 0; i < arguments.length; i++) {\n    if (arguments[i] != null) {\n      return arguments[i];\n    }\n  }\n  return undefined;\n}\n\nexport function isBrowser () {\n  return typeof document !== 'undefined';\n}\n\nexport function isWebGLContext (ctx) {\n  return typeof ctx.clear === 'function' && typeof ctx.clearColor === 'function' && typeof ctx.bufferData === 'function';\n}\n\nexport function isCanvas (element) {\n  return isDOM(element) && /canvas/i.test(element.nodeName) && typeof element.getContext === 'function';\n}\n","/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\n(function(global) {\n  'use strict';\n\n  var dateFormat = (function() {\n      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZWN]|\"[^\"]*\"|'[^']*'/g;\n      var timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n      var timezoneClip = /[^-+\\dA-Z]/g;\n  \n      // Regexes and supporting functions are cached through closure\n      return function (date, mask, utc, gmt) {\n  \n        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)\n        if (arguments.length === 1 && kindOf(date) === 'string' && !/\\d/.test(date)) {\n          mask = date;\n          date = undefined;\n        }\n  \n        date = date || new Date;\n  \n        if(!(date instanceof Date)) {\n          date = new Date(date);\n        }\n  \n        if (isNaN(date)) {\n          throw TypeError('Invalid date');\n        }\n  \n        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);\n  \n        // Allow setting the utc/gmt argument via the mask\n        var maskSlice = mask.slice(0, 4);\n        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {\n          mask = mask.slice(4);\n          utc = true;\n          if (maskSlice === 'GMT:') {\n            gmt = true;\n          }\n        }\n  \n        var _ = utc ? 'getUTC' : 'get';\n        var d = date[_ + 'Date']();\n        var D = date[_ + 'Day']();\n        var m = date[_ + 'Month']();\n        var y = date[_ + 'FullYear']();\n        var H = date[_ + 'Hours']();\n        var M = date[_ + 'Minutes']();\n        var s = date[_ + 'Seconds']();\n        var L = date[_ + 'Milliseconds']();\n        var o = utc ? 0 : date.getTimezoneOffset();\n        var W = getWeek(date);\n        var N = getDayOfWeek(date);\n        var flags = {\n          d:    d,\n          dd:   pad(d),\n          ddd:  dateFormat.i18n.dayNames[D],\n          dddd: dateFormat.i18n.dayNames[D + 7],\n          m:    m + 1,\n          mm:   pad(m + 1),\n          mmm:  dateFormat.i18n.monthNames[m],\n          mmmm: dateFormat.i18n.monthNames[m + 12],\n          yy:   String(y).slice(2),\n          yyyy: y,\n          h:    H % 12 || 12,\n          hh:   pad(H % 12 || 12),\n          H:    H,\n          HH:   pad(H),\n          M:    M,\n          MM:   pad(M),\n          s:    s,\n          ss:   pad(s),\n          l:    pad(L, 3),\n          L:    pad(Math.round(L / 10)),\n          t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],\n          tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],\n          T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],\n          TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],\n          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],\n          W:    W,\n          N:    N\n        };\n  \n        return mask.replace(token, function (match) {\n          if (match in flags) {\n            return flags[match];\n          }\n          return match.slice(1, match.length - 1);\n        });\n      };\n    })();\n\n  dateFormat.masks = {\n    'default':               'ddd mmm dd yyyy HH:MM:ss',\n    'shortDate':             'm/d/yy',\n    'mediumDate':            'mmm d, yyyy',\n    'longDate':              'mmmm d, yyyy',\n    'fullDate':              'dddd, mmmm d, yyyy',\n    'shortTime':             'h:MM TT',\n    'mediumTime':            'h:MM:ss TT',\n    'longTime':              'h:MM:ss TT Z',\n    'isoDate':               'yyyy-mm-dd',\n    'isoTime':               'HH:MM:ss',\n    'isoDateTime':           'yyyy-mm-dd\\'T\\'HH:MM:sso',\n    'isoUtcDateTime':        'UTC:yyyy-mm-dd\\'T\\'HH:MM:ss\\'Z\\'',\n    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'\n  };\n\n  // Internationalization strings\n  dateFormat.i18n = {\n    dayNames: [\n      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ],\n    monthNames: [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n    ],\n    timeNames: [\n      'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'\n    ]\n  };\n\nfunction pad(val, len) {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) {\n    val = '0' + val;\n  }\n  return val;\n}\n\n/**\n * Get the ISO 8601 week number\n * Based on comments from\n * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html\n *\n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getWeek(date) {\n  // Remove time components of date\n  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n  // Change date to Thursday same week\n  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);\n\n  // Take January 4th as it is always in week 1 (see ISO 8601)\n  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);\n\n  // Change date to Thursday same week\n  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);\n\n  // Check if daylight-saving-time-switch occurred and correct for it\n  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n  targetThursday.setHours(targetThursday.getHours() - ds);\n\n  // Number of weeks between target Thursday and first Thursday\n  var weekDiff = (targetThursday - firstThursday) / (86400000*7);\n  return 1 + Math.floor(weekDiff);\n}\n\n/**\n * Get ISO-8601 numeric representation of the day of the week\n * 1 (for Monday) through 7 (for Sunday)\n * \n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getDayOfWeek(date) {\n  var dow = date.getDay();\n  if(dow === 0) {\n    dow = 7;\n  }\n  return dow;\n}\n\n/**\n * kind-of shortcut\n * @param  {*} val\n * @return {String}\n */\nfunction kindOf(val) {\n  if (val === null) {\n    return 'null';\n  }\n\n  if (val === undefined) {\n    return 'undefined';\n  }\n\n  if (typeof val !== 'object') {\n    return typeof val;\n  }\n\n  if (Array.isArray(val)) {\n    return 'array';\n  }\n\n  return {}.toString.call(val)\n    .slice(8, -1).toLowerCase();\n};\n\n\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dateFormat;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = dateFormat;\n  } else {\n    global.dateFormat = dateFormat;\n  }\n})(this);\n","/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar repeat = require('repeat-string');\n\nmodule.exports = function padLeft(str, num, ch) {\n  str = str.toString();\n\n  if (typeof num === 'undefined') {\n    return str;\n  }\n\n  if (ch === 0) {\n    ch = '0';\n  } else if (ch) {\n    ch = ch.toString();\n  } else {\n    ch = ' ';\n  }\n\n  return repeat(ch, num - str.length) + str;\n};\n","import dateformat from 'dateformat';\nimport assign from 'object-assign';\nimport padLeft from 'pad-left';\nimport { getClientAPI } from './util';\n\nconst noop = () => {};\nlet link;\nlet defaultExts = { extension: '', prefix: '', suffix: '' };\n\n// Alternative solution for saving files,\n// a bit slower and does not work in Safari\n// function fetchBlobFromDataURL (dataURL) {\n//   return window.fetch(dataURL).then(res => res.blob());\n// }\n\nconst supportedEncodings = [\n  'image/png',\n  'image/jpeg',\n  'image/webp'\n];\n\nfunction stream (isStart, opts = {}) {\n  return new Promise((resolve, reject) => {\n    opts = assign({}, defaultExts, opts);\n    const filename = resolveFilename(Object.assign({}, opts, {\n      extension: '',\n      frame: undefined\n    }));\n    const func = isStart ? 'streamStart' : 'streamEnd';\n    const client = getClientAPI();\n    if (client && client.output && typeof client[func] === 'function') {\n      return client[func](assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      return resolve({ filename, client: false });\n    }\n  });\n}\n\nexport function streamStart (opts = {}) {\n  return stream(true, opts);\n}\n\nexport function streamEnd (opts = {}) {\n  return stream(false, opts);\n}\n\nexport function exportCanvas (canvas, opt = {}) {\n  const encoding = opt.encoding || 'image/png';\n  if (!supportedEncodings.includes(encoding)) throw new Error(`Invalid canvas encoding ${encoding}`);\n  let extension = (encoding.split('/')[1] || '').replace(/jpeg/i, 'jpg');\n  if (extension) extension = `.${extension}`.toLowerCase();\n  return {\n    extension,\n    type: encoding,\n    dataURL: canvas.toDataURL(encoding, opt.encodingQuality)\n  };\n}\n\nfunction createBlobFromDataURL (dataURL) {\n  return new Promise((resolve) => {\n    const splitIndex = dataURL.indexOf(',');\n    if (splitIndex === -1) {\n      resolve(new window.Blob());\n      return;\n    }\n    const base64 = dataURL.slice(splitIndex + 1);\n    const byteString = window.atob(base64);\n    const type = dataURL.slice(0, splitIndex);\n    const mimeMatch = /data:([^;]+)/.exec(type);\n    const mime = (mimeMatch ? mimeMatch[1] : '') || undefined;\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    resolve(new window.Blob([ ab ], { type: mime }));\n  });\n}\n\nexport function saveDataURL (dataURL, opts = {}) {\n  return createBlobFromDataURL(dataURL)\n    .then(blob => saveBlob(blob, opts));\n}\n\nexport function saveBlob (blob, opts = {}) {\n  return new Promise(resolve => {\n    opts = assign({}, defaultExts, opts);\n    const filename = opts.filename;\n\n    const client = getClientAPI();\n    if (client && typeof client.saveBlob === 'function' && client.output) {\n      // native saving using a CLI tool\n      return client.saveBlob(blob, assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      // force download\n      if (!link) {\n        link = document.createElement('a');\n        link.style.visibility = 'hidden';\n        link.target = '_blank';\n      }\n      link.download = filename;\n      link.href = window.URL.createObjectURL(blob);\n      document.body.appendChild(link);\n      link.onclick = () => {\n        link.onclick = noop;\n        setTimeout(() => {\n          window.URL.revokeObjectURL(blob);\n          if (link.parentElement) link.parentElement.removeChild(link);\n          link.removeAttribute('href');\n          resolve({ filename, client: false });\n        });\n      };\n      link.click();\n    }\n  });\n}\n\nexport function saveFile (data, opts = {}) {\n  const parts = Array.isArray(data) ? data : [ data ];\n  const blob = new window.Blob(parts, { type: opts.type || '' });\n  return saveBlob(blob, opts);\n}\n\nexport function getTimeStamp () {\n  const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  return dateformat(new Date(), dateFormatStr);\n}\n\nexport function getDefaultFile (prefix = '', suffix = '', ext) {\n  // const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  const dateFormatStr = `yyyy-mm-dd 'at' h.MM.ss TT`;\n  return `${prefix}${dateformat(new Date(), dateFormatStr)}${suffix}${ext}`;\n}\n\nexport function resolveFilename (opt = {}) {\n  opt = assign({}, opt);\n\n  // Custom filename function\n  if (typeof opt.file === 'function') {\n    return opt.file(opt);\n  } else if (opt.file) {\n    return opt.file;\n  }\n\n  let frame = null;\n  let extension = '';\n  if (typeof opt.extension === 'string') extension = opt.extension;\n\n  if (typeof opt.frame === 'number') {\n    let totalFrames;\n    if (typeof opt.totalFrames === 'number') {\n      totalFrames = opt.totalFrames;\n    } else {\n      totalFrames = Math.max(10000, opt.frame);\n    }\n    frame = padLeft(String(opt.frame), String(totalFrames).length, '0');\n  }\n\n  const layerStr = isFinite(opt.totalLayers) && isFinite(opt.layer) && opt.totalLayers > 1 ? `${opt.layer}` : '';\n  if (frame != null) {\n    return [ layerStr, frame ].filter(Boolean).join('-') + extension;\n  } else {\n    const defaultFileName = opt.timeStamp;\n    return [ opt.prefix, opt.name || defaultFileName, layerStr, opt.hash, opt.suffix ].filter(Boolean).join('-') + extension;\n  }\n}\n","// Handle some common typos\nconst commonTypos = {\n  dimension: 'dimensions',\n  animated: 'animate',\n  animating: 'animate',\n  unit: 'units',\n  P5: 'p5',\n  pixellated: 'pixelated',\n  looping: 'loop',\n  pixelPerInch: 'pixels'\n};\n\n// Handle all other typos\nconst allKeys = [\n  'dimensions', 'units', 'pixelsPerInch', 'orientation',\n  'scaleToFit', 'scaleToView', 'bleed', 'pixelRatio',\n  'exportPixelRatio', 'maxPixelRatio', 'scaleContext',\n  'resizeCanvas', 'styleCanvas', 'canvas', 'context', 'attributes',\n  'parent', 'file', 'name', 'prefix', 'suffix', 'animate', 'playing',\n  'loop', 'duration', 'totalFrames', 'fps', 'playbackRate', 'timeScale',\n  'frame', 'time', 'flush', 'pixelated', 'hotkeys', 'p5', 'id',\n  'scaleToFitPadding', 'data', 'params', 'encoding', 'encodingQuality'\n];\n\n// This is fairly opinionated and forces users to use the 'data' parameter\n// if they want to pass along non-setting objects...\nexport const checkSettings = (settings) => {\n  const keys = Object.keys(settings);\n  keys.forEach(key => {\n    if (key in commonTypos) {\n      const actual = commonTypos[key];\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\", did you mean \"${actual}\"?`);\n    } else if (!allKeys.includes(key)) {\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\"`);\n    }\n  });\n};\n","const defaultUnits = 'mm';\n\nconst data = [\n  // Common Paper Sizes\n  // (Mostly North-American based)\n  [ 'postcard', 101.6, 152.4 ],\n  [ 'poster-small', 280, 430 ],\n  [ 'poster', 460, 610 ],\n  [ 'poster-large', 610, 910 ],\n  [ 'business-card', 50.8, 88.9 ],\n\n  // Photographic Print Paper Sizes\n  [ '2r', 64, 89 ],\n  [ '3r', 89, 127 ],\n  [ '4r', 102, 152 ],\n  [ '5r', 127, 178 ], // 5″x7″\n  [ '6r', 152, 203 ], // 6″x8″\n  [ '8r', 203, 254 ], // 8″x10″\n  [ '10r', 254, 305 ], // 10″x12″\n  [ '11r', 279, 356 ], // 11″x14″\n  [ '12r', 305, 381 ],\n\n  // Standard Paper Sizes\n  [ 'a0', 841, 1189 ],\n  [ 'a1', 594, 841 ],\n  [ 'a2', 420, 594 ],\n  [ 'a3', 297, 420 ],\n  [ 'a4', 210, 297 ],\n  [ 'a5', 148, 210 ],\n  [ 'a6', 105, 148 ],\n  [ 'a7', 74, 105 ],\n  [ 'a8', 52, 74 ],\n  [ 'a9', 37, 52 ],\n  [ 'a10', 26, 37 ],\n  [ '2a0', 1189, 1682 ],\n  [ '4a0', 1682, 2378 ],\n  [ 'b0', 1000, 1414 ],\n  [ 'b1', 707, 1000 ],\n  [ 'b1+', 720, 1020 ],\n  [ 'b2', 500, 707 ],\n  [ 'b2+', 520, 720 ],\n  [ 'b3', 353, 500 ],\n  [ 'b4', 250, 353 ],\n  [ 'b5', 176, 250 ],\n  [ 'b6', 125, 176 ],\n  [ 'b7', 88, 125 ],\n  [ 'b8', 62, 88 ],\n  [ 'b9', 44, 62 ],\n  [ 'b10', 31, 44 ],\n  [ 'b11', 22, 32 ],\n  [ 'b12', 16, 22 ],\n  [ 'c0', 917, 1297 ],\n  [ 'c1', 648, 917 ],\n  [ 'c2', 458, 648 ],\n  [ 'c3', 324, 458 ],\n  [ 'c4', 229, 324 ],\n  [ 'c5', 162, 229 ],\n  [ 'c6', 114, 162 ],\n  [ 'c7', 81, 114 ],\n  [ 'c8', 57, 81 ],\n  [ 'c9', 40, 57 ],\n  [ 'c10', 28, 40 ],\n  [ 'c11', 22, 32 ],\n  [ 'c12', 16, 22 ],\n\n  // Use inches for North American sizes,\n  // as it produces less float precision errors\n  [ 'half-letter', 5.5, 8.5, 'in' ],\n  [ 'letter', 8.5, 11, 'in' ],\n  [ 'legal', 8.5, 14, 'in' ],\n  [ 'junior-legal', 5, 8, 'in' ],\n  [ 'ledger', 11, 17, 'in' ],\n  [ 'tabloid', 11, 17, 'in' ],\n  [ 'ansi-a', 8.5, 11.0, 'in' ],\n  [ 'ansi-b', 11.0, 17.0, 'in' ],\n  [ 'ansi-c', 17.0, 22.0, 'in' ],\n  [ 'ansi-d', 22.0, 34.0, 'in' ],\n  [ 'ansi-e', 34.0, 44.0, 'in' ],\n  [ 'arch-a', 9, 12, 'in' ],\n  [ 'arch-b', 12, 18, 'in' ],\n  [ 'arch-c', 18, 24, 'in' ],\n  [ 'arch-d', 24, 36, 'in' ],\n  [ 'arch-e', 36, 48, 'in' ],\n  [ 'arch-e1', 30, 42, 'in' ],\n  [ 'arch-e2', 26, 38, 'in' ],\n  [ 'arch-e3', 27, 39, 'in' ]\n];\n\nexport default data.reduce((dict, preset) => {\n  const item = {\n    units: preset[3] || defaultUnits,\n    dimensions: [ preset[1], preset[2] ]\n  };\n  dict[preset[0]] = item;\n  dict[preset[0].replace(/-/g, ' ')] = item;\n  return dict;\n}, {});\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var defined = require('defined');\nvar units = [ 'mm', 'cm', 'm', 'pc', 'pt', 'in', 'ft', 'px' ];\n\nvar conversions = {\n  // metric\n  m: {\n    system: 'metric',\n    factor: 1\n  },\n  cm: {\n    system: 'metric',\n    factor: 1 / 100\n  },\n  mm: {\n    system: 'metric',\n    factor: 1 / 1000\n  },\n  // imperial\n  pt: {\n    system: 'imperial',\n    factor: 1 / 72\n  },\n  pc: {\n    system: 'imperial',\n    factor: 1 / 6\n  },\n  in: {\n    system: 'imperial',\n    factor: 1\n  },\n  ft: {\n    system: 'imperial',\n    factor: 12\n  }\n};\n\nconst anchors = {\n  metric: {\n    unit: 'm',\n    ratio: 1 / 0.0254\n  },\n  imperial: {\n    unit: 'in',\n    ratio: 0.0254\n  }\n};\n\nfunction round (value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n\nfunction convertDistance (value, fromUnit, toUnit, opts) {\n  if (typeof value !== 'number' || !isFinite(value)) throw new Error('Value must be a finite number');\n  if (!fromUnit || !toUnit) throw new Error('Must specify from and to units');\n\n  opts = opts || {};\n  var pixelsPerInch = defined(opts.pixelsPerInch, 96);\n  var precision = opts.precision;\n  var roundPixel = opts.roundPixel !== false;\n\n  fromUnit = fromUnit.toLowerCase();\n  toUnit = toUnit.toLowerCase();\n\n  if (units.indexOf(fromUnit) === -1) throw new Error('Invalid from unit \"' + fromUnit + '\", must be one of: ' + units.join(', '));\n  if (units.indexOf(toUnit) === -1) throw new Error('Invalid from unit \"' + toUnit + '\", must be one of: ' + units.join(', '));\n\n  if (fromUnit === toUnit) {\n    // We don't need to convert from A to B since they are the same already\n    return value;\n  }\n\n  var toFactor = 1;\n  var fromFactor = 1;\n  var isToPixel = false;\n\n  if (fromUnit === 'px') {\n    fromFactor = 1 / pixelsPerInch;\n    fromUnit = 'in';\n  }\n  if (toUnit === 'px') {\n    isToPixel = true;\n    toFactor = pixelsPerInch;\n    toUnit = 'in';\n  }\n\n  var fromUnitData = conversions[fromUnit];\n  var toUnitData = conversions[toUnit];\n\n  // source to anchor inside source's system\n  var anchor = value * fromUnitData.factor * fromFactor;\n\n  // if systems differ, convert one to another\n  if (fromUnitData.system !== toUnitData.system) {\n    // regular 'm' to 'in' and so forth\n    anchor *= anchors[fromUnitData.system].ratio;\n  }\n\n  var result = anchor / toUnitData.factor * toFactor;\n  if (isToPixel && roundPixel) {\n    result = Math.round(result);\n  } else if (typeof precision === 'number' && isFinite(precision)) {\n    result = round(result, precision);\n  }\n  return result;\n}\n\nmodule.exports = convertDistance;\nmodule.exports.units = units;\n","import paperSizes from './paper-sizes';\nimport convertLength from 'convert-length';\n\nexport function getDimensionsFromPreset (dimensions, unitsTo = 'px', pixelsPerInch = 72) {\n  if (typeof dimensions === 'string') {\n    const key = dimensions.toLowerCase();\n    if (!(key in paperSizes)) {\n      throw new Error(`The dimension preset \"${dimensions}\" is not supported or could not be found; try using a4, a3, postcard, letter, etc.`)\n    }\n    const preset = paperSizes[key];\n    return preset.dimensions.map(d => {\n      return convertDistance(d, preset.units, unitsTo, pixelsPerInch);\n    });\n  } else {\n    return dimensions;\n  }\n}\n\nexport function convertDistance (dimension, unitsFrom = 'px', unitsTo = 'px', pixelsPerInch = 72) {\n  return convertLength(dimension, unitsFrom, unitsTo, {\n    pixelsPerInch,\n    precision: 4,\n    roundPixel: true\n  });\n}\n","import { getDimensionsFromPreset, convertDistance } from '../distances';\nimport { isBrowser, defined } from '../util';\n\nfunction checkIfHasDimensions (settings) {\n  if (!settings.dimensions) return false;\n  if (typeof settings.dimensions === 'string') return true;\n  if (Array.isArray(settings.dimensions) && settings.dimensions.length >= 2) return true;\n  return false;\n}\n\nfunction getParentSize (props, settings) {\n  // When no { dimension } is passed in node, we default to HTML canvas size\n  if (!isBrowser()) {\n    return [ 300, 150 ];\n  }\n\n  let element = settings.parent || window;\n\n  if (element === window ||\n      element === document ||\n      element === document.body) {\n    return [ window.innerWidth, window.innerHeight ];\n  } else {\n    const { width, height } = element.getBoundingClientRect();\n    return [ width, height ];\n  }\n}\n\nexport default function resizeCanvas (props, settings) {\n  let width, height;\n  let styleWidth, styleHeight;\n  let canvasWidth, canvasHeight;\n\n  const browser = isBrowser();\n  const dimensions = settings.dimensions;\n  const hasDimensions = checkIfHasDimensions(settings);\n  const exporting = props.exporting;\n  let scaleToFit = hasDimensions ? settings.scaleToFit !== false : false;\n  let scaleToView = (!exporting && hasDimensions) ? settings.scaleToView : true;\n  // in node, cancel both of these options\n  if (!browser) scaleToFit = scaleToView = false;\n  const units = settings.units;\n  const pixelsPerInch = (typeof settings.pixelsPerInch === 'number' && isFinite(settings.pixelsPerInch)) ? settings.pixelsPerInch : 72;\n  const bleed = defined(settings.bleed, 0);\n\n  const devicePixelRatio = browser ? window.devicePixelRatio : 1;\n  const basePixelRatio = scaleToView ? devicePixelRatio : 1;\n\n  let pixelRatio, exportPixelRatio;\n\n  // If a pixel ratio is specified, we will use it.\n  // Otherwise:\n  //  -> If dimension is specified, use base ratio (i.e. size for export)\n  //  -> If no dimension is specified, use device ratio (i.e. size for screen)\n  if (typeof settings.pixelRatio === 'number' && isFinite(settings.pixelRatio)) {\n    // When { pixelRatio } is specified, it's also used as default exportPixelRatio.\n    pixelRatio = settings.pixelRatio;\n    exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n  } else {\n    if (hasDimensions) {\n      // When a dimension is specified, use the base ratio rather than screen ratio\n      pixelRatio = basePixelRatio;\n      // Default to a pixel ratio of 1 so that you end up with the same dimension\n      // you specified, i.e. [ 500, 500 ] is exported as 500x500 px\n      exportPixelRatio = defined(settings.exportPixelRatio, 1);\n    } else {\n      // No dimension is specified, assume full-screen retina sizing\n      pixelRatio = devicePixelRatio;\n      // Default to screen pixel ratio, so that it's like taking a device screenshot\n      exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n    }\n  }\n\n  // Clamp pixel ratio\n  if (typeof settings.maxPixelRatio === 'number' && isFinite(settings.maxPixelRatio)) {\n    pixelRatio = Math.min(settings.maxPixelRatio, pixelRatio);\n  }\n\n  // Handle export pixel ratio\n  if (exporting) {\n    pixelRatio = exportPixelRatio;\n  }\n\n  // parentWidth = typeof parentWidth === 'undefined' ? defaultNodeSize[0] : parentWidth;\n  // parentHeight = typeof parentHeight === 'undefined' ? defaultNodeSize[1] : parentHeight;\n\n  let [ parentWidth, parentHeight ] = getParentSize(props, settings);\n  let trimWidth, trimHeight;\n\n  // You can specify a dimensions in pixels or cm/m/in/etc\n  if (hasDimensions) {\n    const result = getDimensionsFromPreset(dimensions, units, pixelsPerInch);\n    const highest = Math.max(result[0], result[1]);\n    const lowest = Math.min(result[0], result[1]);\n    if (settings.orientation) {\n      const landscape = settings.orientation === 'landscape';\n      width = landscape ? highest : lowest;\n      height = landscape ? lowest : highest;\n    } else {\n      width = result[0];\n      height = result[1];\n    }\n\n    trimWidth = width;\n    trimHeight = height;\n\n    // Apply bleed which is assumed to be in the same units\n    width += bleed * 2;\n    height += bleed * 2;\n  } else {\n    width = parentWidth;\n    height = parentHeight;\n    trimWidth = width;\n    trimHeight = height;\n  }\n\n  // Real size in pixels after PPI is taken into account\n  let realWidth = width;\n  let realHeight = height;\n  if (hasDimensions && units) {\n    // Convert to digital/pixel units if necessary\n    realWidth = convertDistance(width, units, 'px', pixelsPerInch);\n    realHeight = convertDistance(height, units, 'px', pixelsPerInch);\n  }\n\n  // How big to set the 'view' of the canvas in the browser (i.e. style)\n  styleWidth = Math.round(realWidth);\n  styleHeight = Math.round(realHeight);\n\n  // If we wish to scale the view to the browser window\n  if (scaleToFit && !exporting && hasDimensions) {\n    const aspect = width / height;\n    const windowAspect = parentWidth / parentHeight;\n    const scaleToFitPadding = defined(settings.scaleToFitPadding, 40);\n    const maxWidth = Math.round(parentWidth - scaleToFitPadding * 2);\n    const maxHeight = Math.round(parentHeight - scaleToFitPadding * 2);\n    if (styleWidth > maxWidth || styleHeight > maxHeight) {\n      if (windowAspect > aspect) {\n        styleHeight = maxHeight;\n        styleWidth = Math.round(styleHeight * aspect);\n      } else {\n        styleWidth = maxWidth;\n        styleHeight = Math.round(styleWidth / aspect);\n      }\n    }\n  }\n\n  canvasWidth = scaleToView ? Math.round(pixelRatio * styleWidth) : Math.round(pixelRatio * realWidth);\n  canvasHeight = scaleToView ? Math.round(pixelRatio * styleHeight) : Math.round(pixelRatio * realHeight);\n\n  const viewportWidth = scaleToView ? Math.round(styleWidth) : Math.round(realWidth);\n  const viewportHeight = scaleToView ? Math.round(styleHeight) : Math.round(realHeight);\n\n  const scaleX = canvasWidth / width;\n  const scaleY = canvasHeight / height;\n\n  // Assign to current props\n  return {\n    bleed,\n    pixelRatio,\n    width,\n    height,\n    dimensions: [ width, height ],\n    units: units || 'px',\n    scaleX,\n    scaleY,\n    pixelsPerInch,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    trimWidth,\n    trimHeight,\n    styleWidth,\n    styleHeight\n  };\n}\n","module.exports = getCanvasContext\nfunction getCanvasContext (type, opts) {\n  if (typeof type !== 'string') {\n    throw new TypeError('must specify type string')\n  }\n\n  opts = opts || {}\n\n  if (typeof document === 'undefined' && !opts.canvas) {\n    return null // check for Node\n  }\n\n  var canvas = opts.canvas || document.createElement('canvas')\n  if (typeof opts.width === 'number') {\n    canvas.width = opts.width\n  }\n  if (typeof opts.height === 'number') {\n    canvas.height = opts.height\n  }\n\n  var attribs = opts\n  var gl\n  try {\n    var names = [ type ]\n    // prefix GL contexts\n    if (type.indexOf('webgl') === 0) {\n      names.push('experimental-' + type)\n    }\n\n    for (var i = 0; i < names.length; i++) {\n      gl = canvas.getContext(names[i], attribs)\n      if (gl) return gl\n    }\n  } catch (e) {\n    gl = null\n  }\n  return (gl || null) // ensure null on fail\n}\n","import assign from 'object-assign';\nimport getCanvasContext from 'get-canvas-context';\nimport { isBrowser } from '../util';\n\nfunction createCanvasElement () {\n  if (!isBrowser()) {\n    throw new Error('It appears you are runing from Node.js or a non-browser environment. Try passing in an existing { canvas } interface instead.');\n  }\n  return document.createElement('canvas');\n}\n\nexport default function createCanvas (settings = {}) {\n  let context, canvas;\n  let ownsCanvas = false;\n  if (settings.canvas !== false) {\n    // Determine the canvas and context to create\n    context = settings.context;\n    if (!context || typeof context === 'string') {\n      let newCanvas = settings.canvas;\n      if (!newCanvas) {\n        newCanvas = createCanvasElement();\n        ownsCanvas = true;\n      }\n      const type = context || '2d';\n      if (typeof newCanvas.getContext !== 'function') {\n        throw new Error(`The specified { canvas } element does not have a getContext() function, maybe it is not a <canvas> tag?`);\n      }\n      context = getCanvasContext(type, assign({}, settings.attributes, { canvas: newCanvas }));\n      if (!context) {\n        throw new Error(`Failed at canvas.getContext('${type}') - the browser may not support this context, or a different context may already be in use with this canvas.`);\n      }\n    }\n\n    canvas = context.canvas;\n    // Ensure context matches user's canvas expectations\n    if (settings.canvas && canvas !== settings.canvas) {\n      throw new Error('The { canvas } and { context } settings must point to the same underlying canvas element');\n    }\n\n    // Apply pixelation to canvas if necessary, this is mostly a convenience utility\n    if (settings.pixelated) {\n      context.imageSmoothingEnabled = false;\n      context.mozImageSmoothingEnabled = false;\n      context.oImageSmoothingEnabled = false;\n      context.webkitImageSmoothingEnabled = false;\n      context.msImageSmoothingEnabled = false;\n      canvas.style['image-rendering'] = 'pixelated';\n    }\n  }\n  return { canvas, context, ownsCanvas };\n}\n","import assign from 'object-assign';\nimport rightNow from 'right-now';\nimport isPromise from 'is-promise';\nimport { isBrowser, defined, isWebGLContext, isCanvas, getClientAPI } from '../util';\nimport deepEqual from 'deep-equal';\nimport {\n  resolveFilename,\n  saveFile,\n  saveDataURL,\n  getTimeStamp,\n  exportCanvas,\n  streamStart,\n  streamEnd\n} from '../save';\nimport { checkSettings } from '../accessibility';\n\nimport keyboardShortcuts from './keyboardShortcuts';\nimport resizeCanvas from './resizeCanvas';\nimport createCanvas from './createCanvas';\n\nclass SketchManager {\n  constructor () {\n    this._settings = {};\n    this._props = {};\n    this._sketch = undefined;\n    this._raf = null;\n    this._recordTimeout = null;\n\n    // Some hacky things required to get around p5.js structure\n    this._lastRedrawResult = undefined;\n    this._isP5Resizing = false;\n\n    this._keyboardShortcuts = keyboardShortcuts({\n      enabled: () => this.settings.hotkeys !== false,\n      save: (ev) => {\n        if (ev.shiftKey) {\n          if (this.props.recording) {\n            this.endRecord();\n            this.run();\n          } else this.record();\n        } else if (!this.props.recording) {\n          this.exportFrame();\n        }\n      },\n      togglePlay: () => {\n        if (this.props.playing) this.pause();\n        else this.play();\n      },\n      commit: (ev) => {\n        this.exportFrame({ commit: true });\n      }\n    });\n\n    this._animateHandler = () => this.animate();\n\n    this._resizeHandler = () => {\n      const changed = this.resize();\n      // Only re-render when size actually changes\n      if (changed) {\n        this.render();\n      }\n    };\n  }\n\n  get sketch () {\n    return this._sketch;\n  }\n\n  get settings () {\n    return this._settings;\n  }\n\n  get props () {\n    return this._props;\n  }\n\n  _computePlayhead (currentTime, duration) {\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    return hasDuration ? currentTime / duration : 0;\n  }\n\n  _computeFrame (playhead, time, totalFrames, fps) {\n    return (isFinite(totalFrames) && totalFrames > 1)\n      ? Math.floor(playhead * (totalFrames - 1))\n      : Math.floor(fps * time);\n  }\n\n  _computeCurrentFrame () {\n    return this._computeFrame(\n      this.props.playhead, this.props.time,\n      this.props.totalFrames, this.props.fps\n    );\n  }\n\n  _getSizeProps () {\n    const props = this.props;\n    return {\n      width: props.width,\n      height: props.height,\n      pixelRatio: props.pixelRatio,\n      canvasWidth: props.canvasWidth,\n      canvasHeight: props.canvasHeight,\n      viewportWidth: props.viewportWidth,\n      viewportHeight: props.viewportHeight\n    };\n  }\n\n  run () {\n    if (!this.sketch) throw new Error('should wait until sketch is loaded before trying to play()');\n\n    // Start an animation frame loop if necessary\n    if (this.settings.playing !== false) {\n      this.play();\n    }\n\n    // Let's let this warning hang around for a few versions...\n    if (typeof this.sketch.dispose === 'function') {\n      console.warn('In canvas-sketch@0.0.23 the dispose() event has been renamed to unload()');\n    }\n\n    // In case we aren't playing or animated, make sure we still trigger begin message...\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Render an initial frame\n    this.tick();\n    this.render();\n    return this;\n  }\n\n  _cancelTimeouts () {\n    if (this._raf != null && typeof window !== 'undefined' && typeof window.cancelAnimationFrame === 'function') {\n      window.cancelAnimationFrame(this._raf);\n      this._raf = null;\n    }\n    if (this._recordTimeout != null) {\n      clearTimeout(this._recordTimeout);\n      this._recordTimeout = null;\n    }\n  }\n\n  play () {\n    let animate = this.settings.animate;\n    if ('animation' in this.settings) {\n      animate = true;\n      console.warn('[canvas-sketch] { animation } has been renamed to { animate }');\n    }\n    if (!animate) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Using { animate } in Node.js is not yet supported');\n      return;\n    }\n    if (this.props.playing) return;\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // console.log('play', this.props.time)\n\n    // Start a render loop\n    this.props.playing = true;\n    this._cancelTimeouts();\n    this._lastTime = rightNow();\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n  }\n\n  pause () {\n    if (this.props.recording) this.endRecord();\n    this.props.playing = false;\n\n    this._cancelTimeouts();\n  }\n\n  togglePlay () {\n    if (this.props.playing) this.pause();\n    else this.play();\n  }\n\n  // Stop and reset to frame zero\n  stop () {\n    this.pause();\n    this.props.frame = 0;\n    this.props.playhead = 0;\n    this.props.time = 0;\n    this.props.deltaTime = 0;\n    this.props.started = false;\n    this.render();\n  }\n\n  record () {\n    if (this.props.recording) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Recording from Node.js is not yet supported');\n      return;\n    }\n\n    this.stop();\n    this.props.playing = true;\n    this.props.recording = true;\n\n    const exportOpts = this._createExportOptions({ sequence: true });\n\n    const frameInterval = 1 / this.props.fps;\n    // Render each frame in the sequence\n    this._cancelTimeouts();\n    const tick = () => {\n      if (!this.props.recording) return Promise.resolve();\n      this.props.deltaTime = frameInterval;\n      this.tick();\n      return this.exportFrame(exportOpts)\n        .then(() => {\n          if (!this.props.recording) return; // was cancelled before\n          this.props.deltaTime = 0;\n          this.props.frame++;\n          if (this.props.frame < this.props.totalFrames) {\n            this.props.time += frameInterval;\n            this.props.playhead = this._computePlayhead(this.props.time, this.props.duration);\n            this._recordTimeout = setTimeout(tick, 0);\n          } else {\n            console.log('Finished recording');\n            this._signalEnd();\n            this.endRecord();\n            this.stop();\n            this.run();\n          }\n        });\n    };\n\n    // Trigger a start event before we begin recording\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Trigger 'begin record' event\n    if (this.sketch && typeof this.sketch.beginRecord === 'function') {\n      this._wrapContextScale(props => this.sketch.beginRecord(props));\n    }\n\n    // Initiate a streaming start if necessary\n    streamStart(exportOpts)\n      .catch(err => {\n        console.error(err);\n      })\n      .then(response => {\n        this._raf = window.requestAnimationFrame(tick);\n      });\n  }\n\n  _signalBegin () {\n    if (this.sketch && typeof this.sketch.begin === 'function') {\n      this._wrapContextScale(props => this.sketch.begin(props));\n    }\n  }\n\n  _signalEnd () {\n    if (this.sketch && typeof this.sketch.end === 'function') {\n      this._wrapContextScale(props => this.sketch.end(props));\n    }\n  }\n\n  endRecord () {\n    const wasRecording = this.props.recording;\n\n    this._cancelTimeouts();\n    this.props.recording = false;\n    this.props.deltaTime = 0;\n    this.props.playing = false;\n\n    // tell CLI that stream has finished\n    return streamEnd()\n      .catch(err => {\n        console.error(err);\n      })\n      .then(() => {\n        // Trigger 'end record' event\n        if (wasRecording && this.sketch && typeof this.sketch.endRecord === 'function') {\n          this._wrapContextScale(props => this.sketch.endRecord(props));\n        }\n      });\n  }\n\n  _createExportOptions (opt = {}) {\n    return {\n      sequence: opt.sequence,\n      save: opt.save,\n      fps: this.props.fps,\n      frame: opt.sequence ? this.props.frame : undefined,\n      file: this.settings.file,\n      name: this.settings.name,\n      prefix: this.settings.prefix,\n      suffix: this.settings.suffix,\n      encoding: this.settings.encoding,\n      encodingQuality: this.settings.encodingQuality,\n      timeStamp: opt.timeStamp || getTimeStamp(),\n      totalFrames: isFinite(this.props.totalFrames) ? Math.max(0, this.props.totalFrames) : 1000\n    };\n  }\n\n  exportFrame (opt = {}) {\n    if (!this.sketch) return Promise.all([]);\n    if (typeof this.sketch.preExport === 'function') {\n      this.sketch.preExport();\n    }\n\n    // Options for export function\n    let exportOpts = this._createExportOptions(opt);\n\n    const client = getClientAPI();\n    let p = Promise.resolve();\n    if (client && opt.commit && typeof client.commit === 'function') {\n      const commitOpts = assign({}, exportOpts);\n      const hash = client.commit(commitOpts);\n      if (isPromise(hash)) p = hash;\n      else p = Promise.resolve(hash);\n    }\n\n    return p.then(hash => {\n      return this._doExportFrame(assign({}, exportOpts, { hash: hash || '' }));\n    }).then(result => {\n      // Most common usecase is to export a single layer,\n      // so let's optimize the user experience for that.\n      if (result.length === 1) return result[0];\n      else return result;\n    });\n  }\n\n  _doExportFrame (exportOpts = {}) {\n    this._props.exporting = true;\n\n    // Resize to output resolution\n    this.resize();\n\n    // Draw at this output resolution\n    let drawResult = this.render();\n\n    // The self owned canvas (may be undefined...!)\n    const canvas = this.props.canvas;\n\n    // Get list of results from render\n    if (typeof drawResult === 'undefined') {\n      drawResult = [ canvas ];\n    }\n    drawResult = [].concat(drawResult).filter(Boolean);\n\n    // Transform the canvas/file descriptors into a consistent format,\n    // and pull out any data URLs from canvas elements\n    drawResult = drawResult.map(result => {\n      const hasDataObject = typeof result === 'object' && result && ('data' in result || 'dataURL' in result);\n      const data = hasDataObject ? result.data : result;\n      const opts = hasDataObject ? assign({}, result, { data }) : { data };\n      if (isCanvas(data)) {\n        const encoding = opts.encoding || exportOpts.encoding;\n        const encodingQuality = defined(opts.encodingQuality, exportOpts.encodingQuality, 0.95);\n        const { dataURL, extension, type } = exportCanvas(data, { encoding, encodingQuality });\n        return Object.assign(opts, { dataURL, extension, type });\n      } else {\n        return opts;\n      }\n    });\n\n    // Now return to regular rendering mode\n    this._props.exporting = false;\n    this.resize();\n    this.render();\n\n    // And now we can save each result\n    return Promise.all(drawResult.map((result, i, layerList) => {\n      // By default, if rendering multiple layers we will give them indices\n      const curOpt = assign({\n        extension: '',\n        prefix: '',\n        suffix: ''\n      }, exportOpts, result, {\n        layer: i,\n        totalLayers: layerList.length\n      });\n\n      // If export is explicitly not saving, make sure nothing saves\n      // Otherwise default to the layer save option, or fallback to true\n      const saveParam = exportOpts.save === false ? false : result.save;\n      curOpt.save = saveParam !== false;\n\n      // Resolve a full filename from all the options\n      curOpt.filename = resolveFilename(curOpt);\n\n      // Clean up some parameters that may be ambiguous to the user\n      delete curOpt.encoding;\n      delete curOpt.encodingQuality;\n\n      // Clean it up further by just removing undefined values\n      for (let k in curOpt) {\n        if (typeof curOpt[k] === 'undefined') delete curOpt[k];\n      }\n\n      let savePromise = Promise.resolve({});\n      if (curOpt.save) {\n        // Whether to actually save (download) this fragment\n        const data = curOpt.data;\n        if (curOpt.dataURL) {\n          const dataURL = curOpt.dataURL;\n          savePromise = saveDataURL(dataURL, curOpt);\n        } else {\n          savePromise = saveFile(data, curOpt);\n        }\n      }\n      return savePromise.then(saveResult => {\n        return Object.assign({}, curOpt, saveResult);\n      });\n    })).then(ev => {\n      const savedEvents = ev.filter(e => e.save);\n      if (savedEvents.length > 0) {\n        // Log the saved exports\n        const eventWithOutput = savedEvents.find(e => e.outputName);\n        const isClient = savedEvents.some(e => e.client);\n        const isStreaming = savedEvents.some(e => e.stream);\n        let item;\n        // many files, just log how many were exported\n        if (savedEvents.length > 1) item = savedEvents.length;\n        // in CLI, we know exact path dirname\n        else if (eventWithOutput) item = `${eventWithOutput.outputName}/${savedEvents[0].filename}`;\n        // in browser, we can only know it went to \"browser download folder\"\n        else item = `${savedEvents[0].filename}`;\n        let ofSeq = '';\n        if (exportOpts.sequence) {\n          const hasTotalFrames = isFinite(this.props.totalFrames);\n          ofSeq = hasTotalFrames ? ` (frame ${exportOpts.frame + 1} / ${this.props.totalFrames})` : ` (frame ${exportOpts.frame})`;\n        } else if (savedEvents.length > 1) {\n          ofSeq = ` files`;\n        }\n        const client = isClient ? 'canvas-sketch-cli' : 'canvas-sketch';\n        const action = isStreaming ? 'Streaming into' : 'Exported';\n        console.log(`%c[${client}]%c ${action} %c${item}%c${ofSeq}`, 'color: #8e8e8e;', 'color: initial;', 'font-weight: bold;', 'font-weight: initial;');\n      }\n      if (typeof this.sketch.postExport === 'function') {\n        this.sketch.postExport();\n      }\n      return ev;\n    });\n  }\n\n  _wrapContextScale (cb) {\n    this._preRender();\n    cb(this.props);\n    this._postRender();\n  }\n\n  _preRender () {\n    const props = this.props;\n\n    // Scale context for unit sizing\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.save();\n      if (this.settings.scaleContext !== false) {\n        props.context.scale(props.scaleX, props.scaleY);\n      }\n    } else if (props.p5) {\n      props.p5.scale(props.scaleX / props.pixelRatio, props.scaleY / props.pixelRatio);\n    }\n  }\n\n  _postRender () {\n    const props = this.props;\n\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.restore();\n    }\n\n    // Flush by default, this may be revisited at a later point.\n    // We do this to ensure toDataURL can be called immediately after.\n    // Most likely browsers already handle this, so we may revisit this and\n    // remove it if it improves performance without any usability issues.\n    if (props.gl && this.settings.flush !== false && !props.p5) {\n      props.gl.flush();\n    }\n  }\n\n  tick () {\n    if (this.sketch && typeof this.sketch.tick === 'function') {\n      this._preRender();\n      this.sketch.tick(this.props);\n      this._postRender();\n    }\n  }\n\n  render () {\n    if (this.props.p5) {\n      this._lastRedrawResult = undefined;\n      this.props.p5.redraw();\n      return this._lastRedrawResult;\n    } else {\n      return this.submitDrawCall();\n    }\n  }\n\n  submitDrawCall () {\n    if (!this.sketch) return;\n\n    const props = this.props;\n    this._preRender();\n\n    let drawResult;\n\n    if (typeof this.sketch === 'function') {\n      drawResult = this.sketch(props);\n    } else if (typeof this.sketch.render === 'function') {\n      drawResult = this.sketch.render(props);\n    }\n\n    this._postRender();\n\n    return drawResult;\n  }\n\n  update (opt = {}) {\n    // Currently update() is only focused on resizing,\n    // but later we will support other options like switching\n    // frames and such.\n    const notYetSupported = [\n      'animate'\n    ];\n\n    Object.keys(opt).forEach(key => {\n      if (notYetSupported.indexOf(key) >= 0) {\n        throw new Error(`Sorry, the { ${key} } option is not yet supported with update().`);\n      }\n    });\n\n    const oldCanvas = this._settings.canvas;\n    const oldContext = this._settings.context;\n\n    // Merge new options into settings\n    for (let key in opt) {\n      const value = opt[key];\n      if (typeof value !== 'undefined') { // ignore undefined\n        this._settings[key] = value;\n      }\n    }\n\n    // Merge in time props\n    const timeOpts = Object.assign({}, this._settings, opt);\n    if ('time' in opt && 'frame' in opt) throw new Error('You should specify { time } or { frame } but not both');\n    else if ('time' in opt) delete timeOpts.frame;\n    else if ('frame' in opt) delete timeOpts.time;\n    if ('duration' in opt && 'totalFrames' in opt) throw new Error('You should specify { duration } or { totalFrames } but not both');\n    else if ('duration' in opt) delete timeOpts.totalFrames;\n    else if ('totalFrames' in opt) delete timeOpts.duration;\n\n    // Merge in user data without copying\n    if ('data' in opt) this._props.data = opt.data;\n\n    const timeProps = this.getTimeProps(timeOpts);\n    Object.assign(this._props, timeProps);\n\n    // If either canvas or context is changed, we should re-update\n    if (oldCanvas !== this._settings.canvas || oldContext !== this._settings.context) {\n      const { canvas, context } = createCanvas(this._settings);\n\n      this.props.canvas = canvas;\n      this.props.context = context;\n\n      // Delete or add a 'gl' prop for convenience\n      this._setupGLKey();\n\n      // Re-mount the new canvas if it has no parent\n      this._appendCanvasIfNeeded();\n    }\n\n    // Special case to support P5.js\n    if (opt.p5 && typeof opt.p5 !== 'function') {\n      this.props.p5 = opt.p5;\n      this.props.p5.draw = () => {\n        if (this._isP5Resizing) return;\n        this._lastRedrawResult = this.submitDrawCall();\n      };\n    }\n\n    // Update playing state if necessary\n    if ('playing' in opt) {\n      if (opt.playing) this.play();\n      else this.pause();\n    }\n\n    checkSettings(this._settings);\n\n    // Draw new frame\n    this.resize();\n    this.render();\n    return this.props;\n  }\n\n  resize () {\n    const oldSizes = this._getSizeProps();\n\n    const settings = this.settings;\n    const props = this.props;\n\n    // Recompute new properties based on current setup\n    const newProps = resizeCanvas(props, settings);\n\n    // Assign to current props\n    Object.assign(this._props, newProps);\n\n    // Now we actually update the canvas width/height and style props\n    const {\n      pixelRatio,\n      canvasWidth,\n      canvasHeight,\n      styleWidth,\n      styleHeight\n    } = this.props;\n\n    // Update canvas settings\n    const canvas = this.props.canvas;\n    if (canvas && settings.resizeCanvas !== false) {\n      if (props.p5) {\n        // P5.js specific edge case\n        if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n          this._isP5Resizing = true;\n          // This causes a re-draw :\\ so we ignore draws in the mean time... sorta hacky\n          props.p5.pixelDensity(pixelRatio);\n          props.p5.resizeCanvas(canvasWidth / pixelRatio, canvasHeight / pixelRatio, false);\n          this._isP5Resizing = false;\n        }\n      } else {\n        // Force canvas size\n        if (canvas.width !== canvasWidth) canvas.width = canvasWidth;\n        if (canvas.height !== canvasHeight) canvas.height = canvasHeight;\n      }\n      // Update canvas style\n      if (isBrowser() && settings.styleCanvas !== false) {\n        canvas.style.width = `${styleWidth}px`;\n        canvas.style.height = `${styleHeight}px`;\n      }\n    }\n\n    const newSizes = this._getSizeProps();\n    let changed = !deepEqual(oldSizes, newSizes);\n    if (changed) {\n      this._sizeChanged();\n    }\n    return changed;\n  }\n\n  _sizeChanged () {\n    // Send resize event to sketch\n    if (this.sketch && typeof this.sketch.resize === 'function') {\n      this.sketch.resize(this.props);\n    }\n  }\n\n  animate () {\n    if (!this.props.playing) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Animation in Node.js is not yet supported');\n      return;\n    }\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n\n    let now = rightNow();\n\n    const fps = this.props.fps;\n    const frameIntervalMS = 1000 / fps;\n    let deltaTimeMS = now - this._lastTime;\n\n    const duration = this.props.duration;\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n\n    let isNewFrame = true;\n    const playbackRate = this.settings.playbackRate;\n    if (playbackRate === 'fixed') {\n      deltaTimeMS = frameIntervalMS;\n    } else if (playbackRate === 'throttle') {\n      if (deltaTimeMS > frameIntervalMS) {\n        now = now - (deltaTimeMS % frameIntervalMS);\n        this._lastTime = now;\n      } else {\n        isNewFrame = false;\n      }\n    } else {\n      this._lastTime = now;\n    }\n\n    const deltaTime = deltaTimeMS / 1000;\n    let newTime = this.props.time + deltaTime * this.props.timeScale;\n\n    // Handle reverse time scale\n    if (newTime < 0 && hasDuration) {\n      newTime = duration + newTime;\n    }\n\n    // Re-start animation\n    let isFinished = false;\n    let isLoopStart = false;\n\n    const looping = this.settings.loop !== false;\n\n    if (hasDuration && newTime >= duration) {\n      // Re-start animation\n      if (looping) {\n        isNewFrame = true;\n        newTime = newTime % duration;\n        isLoopStart = true;\n      } else {\n        isNewFrame = false;\n        newTime = duration;\n        isFinished = true;\n      }\n\n      this._signalEnd();\n    }\n\n    if (isNewFrame) {\n      this.props.deltaTime = deltaTime;\n      this.props.time = newTime;\n      this.props.playhead = this._computePlayhead(newTime, duration);\n      const lastFrame = this.props.frame;\n      this.props.frame = this._computeCurrentFrame();\n      if (isLoopStart) this._signalBegin();\n      if (lastFrame !== this.props.frame) this.tick();\n      this.render();\n      this.props.deltaTime = 0;\n    }\n\n    if (isFinished) {\n      this.pause();\n    }\n  }\n\n  dispatch (cb) {\n    if (typeof cb !== 'function') throw new Error('must pass function into dispatch()');\n    cb(this.props);\n    this.render();\n  }\n\n  mount () {\n    this._appendCanvasIfNeeded();\n  }\n\n  unmount () {\n    if (isBrowser()) {\n      window.removeEventListener('resize', this._resizeHandler);\n      this._keyboardShortcuts.detach();\n    }\n    if (this.props.canvas.parentElement) {\n      this.props.canvas.parentElement.removeChild(this.props.canvas);\n    }\n  }\n\n  _appendCanvasIfNeeded () {\n    if (!isBrowser()) return;\n    if (this.settings.parent !== false && (this.props.canvas && !this.props.canvas.parentElement)) {\n      const defaultParent = this.settings.parent || document.body;\n      defaultParent.appendChild(this.props.canvas);\n    }\n  }\n\n  _setupGLKey () {\n    if (this.props.context) {\n      if (isWebGLContext(this.props.context)) {\n        this._props.gl = this.props.context;\n      } else {\n        delete this._props.gl;\n      }\n    }\n  }\n\n  getTimeProps (settings = {}) {\n    // Get timing data\n    let duration = settings.duration;\n    let totalFrames = settings.totalFrames;\n    const timeScale = defined(settings.timeScale, 1);\n    const fps = defined(settings.fps, 24);\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    const hasTotalFrames = typeof totalFrames === 'number' && isFinite(totalFrames);\n\n    const totalFramesFromDuration = hasDuration ? Math.floor(fps * duration) : undefined;\n    const durationFromTotalFrames = hasTotalFrames ? (totalFrames / fps) : undefined;\n    if (hasDuration && hasTotalFrames && totalFramesFromDuration !== totalFrames) {\n      throw new Error('You should specify either duration or totalFrames, but not both. Or, they must match exactly.');\n    }\n\n    if (typeof settings.dimensions === 'undefined' && typeof settings.units !== 'undefined') {\n      console.warn(`You've specified a { units } setting but no { dimension }, so the units will be ignored.`);\n    }\n\n    totalFrames = defined(totalFrames, totalFramesFromDuration, Infinity);\n    duration = defined(duration, durationFromTotalFrames, Infinity);\n\n    const startTime = settings.time;\n    const startFrame = settings.frame;\n    const hasStartTime = typeof startTime === 'number' && isFinite(startTime);\n    const hasStartFrame = typeof startFrame === 'number' && isFinite(startFrame);\n\n    // start at zero unless user specifies frame or time (but not both mismatched)\n    let time = 0;\n    let frame = 0;\n    let playhead = 0;\n    if (hasStartTime && hasStartFrame) {\n      throw new Error('You should specify either start frame or time, but not both.');\n    } else if (hasStartTime) {\n      // User specifies time, we infer frames from FPS\n      time = startTime;\n      playhead = this._computePlayhead(time, duration);\n      frame = this._computeFrame(\n        playhead, time,\n        totalFrames, fps\n      );\n    } else if (hasStartFrame) {\n      // User specifies frame number, we infer time from FPS\n      frame = startFrame;\n      time = frame / fps;\n      playhead = this._computePlayhead(time, duration);\n    }\n\n    return {\n      playhead,\n      time,\n      frame,\n      duration,\n      totalFrames,\n      fps,\n      timeScale\n    };\n  }\n\n  setup (settings = {}) {\n    if (this.sketch) throw new Error('Multiple setup() calls not yet supported.');\n\n    this._settings = Object.assign({}, settings, this._settings);\n\n    checkSettings(this._settings);\n\n    // Get initial canvas & context\n    const { context, canvas } = createCanvas(this._settings);\n\n    const timeProps = this.getTimeProps(this._settings);\n\n    // Initial render state features\n    this._props = {\n      ...timeProps,\n      canvas,\n      context,\n      deltaTime: 0,\n      started: false,\n      exporting: false,\n      playing: false,\n      recording: false,\n      settings: this.settings,\n      data: this.settings.data,\n\n      // Export some specific actions to the sketch\n      render: () => this.render(),\n      togglePlay: () => this.togglePlay(),\n      dispatch: (cb) => this.dispatch(cb),\n      tick: () => this.tick(),\n      resize: () => this.resize(),\n      update: (opt) => this.update(opt),\n      exportFrame: opt => this.exportFrame(opt),\n      record: () => this.record(),\n      play: () => this.play(),\n      pause: () => this.pause(),\n      stop: () => this.stop()\n    };\n\n    // For WebGL sketches, a gl variable reads a bit better\n    this._setupGLKey();\n\n    // Trigger initial resize now so that canvas is already sized\n    // by the time we load the sketch\n    this.resize();\n  }\n\n  loadAndRun (canvasSketch, newSettings) {\n    return this.load(canvasSketch, newSettings).then(() => {\n      this.run();\n      return this;\n    });\n  }\n\n  unload () {\n    this.pause();\n    if (!this.sketch) return;\n    if (typeof this.sketch.unload === 'function') {\n      this._wrapContextScale(props => this.sketch.unload(props));\n    }\n    this._sketch = null;\n  }\n\n  destroy () {\n    this.unload();\n    this.unmount();\n  }\n\n  load (createSketch, newSettings) {\n    // User didn't specify a function\n    if (typeof createSketch !== 'function') {\n      throw new Error('The function must take in a function as the first parameter. Example:\\n  canvasSketcher(() => { ... }, settings)');\n    }\n\n    if (this.sketch) {\n      this.unload();\n    }\n\n    if (typeof newSettings !== 'undefined') {\n      this.update(newSettings);\n    }\n\n    // This is a bit of a tricky case; we set up the auto-scaling here\n    // in case the user decides to render anything to the context *before* the\n    // render() function... However, users should instead use begin() function for that.\n    this._preRender();\n\n    let preload = Promise.resolve();\n\n    // Because of P5.js's unusual structure, we have to do a bit of\n    // library-specific changes to support it properly.\n    if (this.settings.p5) {\n      if (!isBrowser()) {\n        throw new Error('[canvas-sketch] ERROR: Using p5.js in Node.js is not supported');\n      }\n      preload = new Promise(resolve => {\n        let P5Constructor = this.settings.p5;\n        let preload;\n        if (P5Constructor.p5) {\n          preload = P5Constructor.preload;\n          P5Constructor = P5Constructor.p5;\n        }\n\n        // The sketch setup; disable loop, set sizing, etc.\n        const p5Sketch = p5 => {\n          // Hook in preload if necessary\n          if (preload) p5.preload = () => preload(p5);\n          p5.setup = () => {\n            const props = this.props;\n            const isGL = this.settings.context === 'webgl';\n            const renderer = isGL ? p5.WEBGL : p5.P2D;\n            p5.noLoop();\n            p5.pixelDensity(props.pixelRatio);\n            p5.createCanvas(props.viewportWidth, props.viewportHeight, renderer);\n            if (isGL && this.settings.attributes) {\n              p5.setAttributes(this.settings.attributes);\n            }\n\n            this.update({ p5, canvas: p5.canvas, context: p5._renderer.drawingContext });\n            resolve();\n          };\n        };\n\n        // Support global and instance P5.js modes\n        if (typeof P5Constructor === 'function') {\n          new P5Constructor(p5Sketch);\n        } else {\n          if (typeof window.createCanvas !== 'function') {\n            throw new Error(\"{ p5 } setting is passed but can't find p5.js in global (window) scope. Maybe you did not create it globally?\\nnew p5(); // <-- attaches to global scope\");\n          }\n          p5Sketch(window);\n        }\n      });\n    }\n\n    return preload.then(() => {\n      // Load the user's sketch\n      let loader = createSketch(this.props);\n      if (!isPromise(loader)) {\n        loader = Promise.resolve(loader);\n      }\n      return loader;\n    }).then(sketch => {\n      if (!sketch) sketch = {};\n      this._sketch = sketch;\n\n      // Once the sketch is loaded we can add the events\n      if (isBrowser()) {\n        this._keyboardShortcuts.attach();\n        window.addEventListener('resize', this._resizeHandler);\n      }\n\n      this._postRender();\n\n      // The initial resize() in the constructor will not have\n      // triggered a resize() event on the sketch, since it was before\n      // the sketch was loaded. So we send the signal here, allowing\n      // users to react to the initial size before first render.\n      this._sizeChanged();\n      return this;\n    }).catch(err => {\n      console.warn('Could not start sketch, the async loading function rejected with an error:\\n    Error: ' + err.message);\n      throw err;\n    });\n  }\n}\n\nexport default SketchManager;\n","import { getClientAPI } from '../util';\n\nexport default function (opt = {}) {\n  const handler = ev => {\n    if (!opt.enabled()) return;\n\n    const client = getClientAPI();\n    if (ev.keyCode === 83 && !ev.altKey && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + S\n      ev.preventDefault();\n      opt.save(ev);\n    } else if (ev.keyCode === 32) {\n      // Space\n      // TODO: what to do with this? keep it, or remove it?\n      opt.togglePlay(ev);\n    } else if (client && !ev.altKey && ev.keyCode === 75 && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + K, only when canvas-sketch-cli is used\n      ev.preventDefault();\n      opt.commit(ev);\n    }\n  };\n\n  const attach = () => {\n    window.addEventListener('keydown', handler);\n  };\n\n  const detach = () => {\n    window.removeEventListener('keydown', handler);\n  };\n\n  return {\n    attach,\n    detach\n  };\n}\n","import SketchManager from './core/SketchManager';\nimport PaperSizes from './paper-sizes';\nimport { getClientAPI, defined } from './util';\n\nconst CACHE = 'hot-id-cache';\nconst runtimeCollisions = [];\n\nfunction isHotReload () {\n  const client = getClientAPI();\n  return client && client.hot;\n}\n\nfunction cacheGet (id) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  return client[CACHE][id];\n}\n\nfunction cachePut (id, data) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  client[CACHE][id] = data;\n}\n\nfunction getTimeProp (oldManager, newSettings) {\n  // Static sketches ignore the time persistency\n  return newSettings.animate ? { time: oldManager.props.time } : undefined;\n}\n\nfunction canvasSketch (sketch, settings = {}) {\n  if (settings.p5) {\n    if (settings.canvas || (settings.context && typeof settings.context !== 'string')) {\n      throw new Error(`In { p5 } mode, you can't pass your own canvas or context, unless the context is a \"webgl\" or \"2d\" string`);\n    }\n\n    // Do not create a canvas on startup, since P5.js does that for us\n    const context = typeof settings.context === 'string' ? settings.context : false;\n    settings = Object.assign({}, settings, { canvas: false, context });\n  }\n\n  const isHot = isHotReload();\n  let hotID;\n  if (isHot) {\n    // Use a magic name by default, force user to define each sketch if they\n    // require more than one in an application. Open to other ideas on how to tackle\n    // this as well...\n    hotID = defined(settings.id, '$__DEFAULT_CANVAS_SKETCH_ID__$');\n  }\n  let isInjecting = isHot && typeof hotID === 'string';\n\n  if (isInjecting && runtimeCollisions.includes(hotID)) {\n    console.warn(`Warning: You have multiple calls to canvasSketch() in --hot mode. You must pass unique { id } strings in settings to enable hot reload across multiple sketches. `, hotID);\n    isInjecting = false;\n  }\n\n  let preload = Promise.resolve();\n\n  if (isInjecting) {\n    // Mark this as already spotted in this runtime instance\n    runtimeCollisions.push(hotID);\n\n    const previousData = cacheGet(hotID);\n    if (previousData) {\n      const next = () => {\n        // Grab new props from old sketch instance\n        const newProps = getTimeProp(previousData.manager, settings);\n        // Destroy the old instance\n        previousData.manager.destroy();\n        // Pass along new props\n        return newProps;\n      };\n\n      // Move along the next data...\n      preload = previousData.load.then(next).catch(next);\n    }\n  }\n\n  return preload.then(newProps => {\n    const manager = new SketchManager();\n    let result;\n    if (sketch) {\n      // Merge with incoming data\n      settings = Object.assign({}, settings, newProps);\n\n      // Apply settings and create a canvas\n      manager.setup(settings);\n\n      // Mount to DOM\n      manager.mount();\n\n      // load the sketch first\n      result = manager.loadAndRun(sketch);\n    } else {\n      result = Promise.resolve(manager);\n    }\n    if (isInjecting) {\n      cachePut(hotID, { load: result, manager });\n    }\n    return result;\n  });\n}\n\n// TODO: Figure out a nice way to export things.\ncanvasSketch.canvasSketch = canvasSketch;\ncanvasSketch.PaperSizes = PaperSizes;\n\nexport default canvasSketch;\n","// threejs.org/license\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\tif (Number.EPSILON === undefined) {\n\t\tNumber.EPSILON = Math.pow(2, -52);\n\t}\n\n\tif (Number.isInteger === undefined) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\t\tNumber.isInteger = function (value) {\n\t\t\treturn typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n\t\t};\n\t} //\n\n\n\tif (Math.sign === undefined) {\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\t\tMath.sign = function (x) {\n\t\t\treturn x < 0 ? -1 : x > 0 ? 1 : +x;\n\t\t};\n\t}\n\n\tif ('name' in Function.prototype === false) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\t\tObject.defineProperty(Function.prototype, 'name', {\n\t\t\tget: function get() {\n\t\t\t\treturn this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1];\n\t\t\t}\n\t\t});\n\t}\n\n\tif (Object.assign === undefined) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\tObject.assign = function (target) {\n\n\t\t\tif (target === undefined || target === null) {\n\t\t\t\tthrow new TypeError('Cannot convert undefined or null to object');\n\t\t\t}\n\n\t\t\tvar output = Object(target);\n\n\t\t\tfor (var index = 1; index < arguments.length; index++) {\n\t\t\t\tvar source = arguments[index];\n\n\t\t\t\tif (source !== undefined && source !== null) {\n\t\t\t\t\tfor (var nextKey in source) {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n\t\t\t\t\t\t\toutput[nextKey] = source[nextKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn output;\n\t\t};\n\t}\n\n\tvar REVISION = '124';\n\tvar MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tvar TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar CineonToneMapping = 3;\n\tvar ACESFilmicToneMapping = 4;\n\tvar CustomToneMapping = 5;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar NormalAnimationBlendMode = 2500;\n\tvar AdditiveAnimationBlendMode = 2501;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\tvar GLSL1 = '100';\n\tvar GLSL3 = '300 es';\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tfunction EventDispatcher() {}\n\n\tObject.assign(EventDispatcher.prototype, {\n\t\taddEventListener: function addEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t},\n\t\thasEventListener: function hasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tvar listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t},\n\t\tremoveEventListener: function removeEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tvar index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tvar array = listenerArray.slice(0);\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _lut = [];\n\n\tfor (var i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tvar _seed = 1234567;\n\tvar MathUtils = {\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\t\tgenerateUUID: function generateUUID() {\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\t\treturn uuid.toUpperCase();\n\t\t},\n\t\tclamp: function clamp(value, min, max) {\n\t\t\treturn Math.max(min, Math.min(max, value));\n\t\t},\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\teuclideanModulo: function euclideanModulo(n, m) {\n\t\t\treturn (n % m + m) % m;\n\t\t},\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\tmapLinear: function mapLinear(x, a1, a2, b1, b2) {\n\t\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t\t},\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\t\tlerp: function lerp(x, y, t) {\n\t\t\treturn (1 - t) * x + t * y;\n\t\t},\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\t\tsmoothstep: function smoothstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * (3 - 2 * x);\n\t\t},\n\t\tsmootherstep: function smootherstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t\t},\n\t\t// Random integer from <low, high> interval\n\t\trandInt: function randInt(low, high) {\n\t\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t\t},\n\t\t// Random float from <low, high> interval\n\t\trandFloat: function randFloat(low, high) {\n\t\t\treturn low + Math.random() * (high - low);\n\t\t},\n\t\t// Random float from <-range/2, range/2> interval\n\t\trandFloatSpread: function randFloatSpread(range) {\n\t\t\treturn range * (0.5 - Math.random());\n\t\t},\n\t\t// Deterministic pseudo-random float in the interval [ 0, 1 ]\n\t\tseededRandom: function seededRandom(s) {\n\t\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t\t_seed = _seed * 16807 % 2147483647;\n\t\t\treturn (_seed - 1) / 2147483646;\n\t\t},\n\t\tdegToRad: function degToRad(degrees) {\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\t\t},\n\t\tradToDeg: function radToDeg(radians) {\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\t\t},\n\t\tisPowerOfTwo: function isPowerOfTwo(value) {\n\t\t\treturn (value & value - 1) === 0 && value !== 0;\n\t\t},\n\t\tceilPowerOfTwo: function ceilPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t\t},\n\t\tfloorPowerOfTwo: function floorPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t\t},\n\t\tsetQuaternionFromProperEuler: function setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c2 = cos(b / 2);\n\t\t\tvar s2 = sin(b / 2);\n\t\t\tvar c13 = cos((a + c) / 2);\n\t\t\tvar s13 = sin((a + c) / 2);\n\t\t\tvar c1_3 = cos((a - c) / 2);\n\t\t\tvar s1_3 = sin((a - c) / 2);\n\t\t\tvar c3_1 = cos((c - a) / 2);\n\t\t\tvar s3_1 = sin((c - a) / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYX':\n\t\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZY':\n\t\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXZ':\n\t\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZX':\n\t\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXY':\n\t\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYZ':\n\t\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction _defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];\n\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\tdescriptor.configurable = true;\n\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}\n\n\tfunction _createClass(Constructor, protoProps, staticProps) {\n\t\tif (protoProps) _defineProperties(Constructor.prototype, protoProps);\n\t\tif (staticProps) _defineProperties(Constructor, staticProps);\n\t\treturn Constructor;\n\t}\n\n\tfunction _inheritsLoose(subClass, superClass) {\n\t\tsubClass.prototype = Object.create(superClass.prototype);\n\t\tsubClass.prototype.constructor = subClass;\n\t\tsubClass.__proto__ = superClass;\n\t}\n\n\tfunction _assertThisInitialized(self) {\n\t\tif (self === void 0) {\n\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t}\n\n\t\treturn self;\n\t}\n\n\tvar Vector2 = /*#__PURE__*/function () {\n\t\tfunction Vector2(x, y) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tvar _proto = Vector2.prototype;\n\n\t\t_proto.set = function set(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t};\n\n\t\t_proto.cross = function cross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.angle = function angle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tvar angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotateAround = function rotateAround(center, angle) {\n\t\t\tvar c = Math.cos(angle),\n\t\t\t\t\ts = Math.sin(angle);\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector2, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.x = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.y = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector2;\n\t}();\n\n\tvar Matrix3 = /*#__PURE__*/function () {\n\t\tfunction Matrix3() {\n\t\t\tObject.defineProperty(this, 'isMatrix3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix3.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrix4 = function setFromMatrix4(m) {\n\t\t\tvar me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\ta13 = ae[6];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\ta23 = ae[7];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\ta33 = ae[8];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[3],\n\t\t\t\t\tb13 = be[6];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[4],\n\t\t\t\t\tb23 = be[7];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[5],\n\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar a = te[0],\n\t\t\t\t\tb = te[1],\n\t\t\t\t\tc = te[2],\n\t\t\t\t\td = te[3],\n\t\t\t\t\te = te[4],\n\t\t\t\t\tf = te[5],\n\t\t\t\t\tg = te[6],\n\t\t\t\t\th = te[7],\n\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\tvar te = this.elements,\n\t\t\t\t\tn11 = te[0],\n\t\t\t\t\tn21 = te[1],\n\t\t\t\t\tn31 = te[2],\n\t\t\t\t\tn12 = te[3],\n\t\t\t\t\tn22 = te[4],\n\t\t\t\t\tn32 = te[5],\n\t\t\t\t\tn13 = te[6],\n\t\t\t\t\tn23 = te[7],\n\t\t\t\t\tn33 = te[8],\n\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar tmp;\n\t\t\tvar m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getNormalMatrix = function getNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).copy(this).invert().transpose();\n\t\t};\n\n\t\t_proto.transposeIntoArray = function transposeIntoArray(r) {\n\t\t\tvar m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setUvTransform = function setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tvar c = Math.cos(rotation);\n\t\t\tvar s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(sx, sy) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotate = function rotate(theta) {\n\t\t\tvar c = Math.cos(theta);\n\t\t\tvar s = Math.sin(theta);\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = te[0],\n\t\t\t\t\ta12 = te[3],\n\t\t\t\t\ta13 = te[6];\n\t\t\tvar a21 = te[1],\n\t\t\t\t\ta22 = te[4],\n\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(tx, ty) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t};\n\n\t\treturn Matrix3;\n\t}();\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\t\tgetDataURL: function getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tvar canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\t};\n\n\tvar textureId = 0;\n\n\tfunction Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\tif (image === void 0) {\n\t\t\timage = Texture.DEFAULT_IMAGE;\n\t\t}\n\n\t\tif (mapping === void 0) {\n\t\t\tmapping = Texture.DEFAULT_MAPPING;\n\t\t}\n\n\t\tif (wrapS === void 0) {\n\t\t\twrapS = ClampToEdgeWrapping;\n\t\t}\n\n\t\tif (wrapT === void 0) {\n\t\t\twrapT = ClampToEdgeWrapping;\n\t\t}\n\n\t\tif (magFilter === void 0) {\n\t\t\tmagFilter = LinearFilter;\n\t\t}\n\n\t\tif (minFilter === void 0) {\n\t\t\tminFilter = LinearMipmapLinearFilter;\n\t\t}\n\n\t\tif (format === void 0) {\n\t\t\tformat = RGBAFormat;\n\t\t}\n\n\t\tif (type === void 0) {\n\t\t\ttype = UnsignedByteType;\n\t\t}\n\n\t\tif (anisotropy === void 0) {\n\t\t\tanisotropy = 1;\n\t\t}\n\n\t\tif (encoding === void 0) {\n\t\t\tencoding = LinearEncoding;\n\t\t}\n\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: textureId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.image = image;\n\t\tthis.mipmaps = [];\n\t\tthis.mapping = mapping;\n\t\tthis.wrapS = wrapS;\n\t\tthis.wrapT = wrapT;\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\t\tthis.anisotropy = anisotropy;\n\t\tthis.format = format;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type;\n\t\tthis.offset = new Vector2(0, 0);\n\t\tthis.repeat = new Vector2(1, 1);\n\t\tthis.center = new Vector2(0, 0);\n\t\tthis.rotation = 0;\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\tthis.encoding = encoding;\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Texture,\n\t\tisTexture: true,\n\t\tupdateMatrix: function updateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (var i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t},\n\t\ttransformUv: function transformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t}\n\t});\n\tObject.defineProperty(Texture.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tvar Vector4 = /*#__PURE__*/function () {\n\t\tfunction Vector4(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector4', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tvar _proto = Vector4.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setW = function setW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z,\n\t\t\t\t\tw = this.w;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.setAxisAngleFromQuaternion = function setAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tvar s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setAxisAngleFromRotationMatrix = function setAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar angle, x, y, z; // variables for result\n\n\t\t\tvar epsilon = 0.01,\n\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tvar xx = (m11 + 1) / 2;\n\t\t\t\tvar yy = (m22 + 1) / 2;\n\t\t\t\tvar zz = (m33 + 1) / 2;\n\t\t\t\tvar xy = (m12 + m21) / 4;\n\t\t\t\tvar xz = (m13 + m31) / 4;\n\t\t\t\tvar yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tvar s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector4, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.z = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.w = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector4;\n\t}();\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tfunction WebGLRenderTarget(width, height, options) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.scissor = new Vector4(0, 0, width, height);\n\t\tthis.scissorTest = false;\n\t\tthis.viewport = new Vector4(0, 0, width, height);\n\t\toptions = options || {};\n\t\tthis.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: WebGLRenderTarget,\n\t\tisWebGLRenderTarget: true,\n\t\tsetSize: function setSize(width, height) {\n\t\t\tif (this.width !== width || this.height !== height) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\tfunction WebGLMultisampleRenderTarget(width, height, options) {\n\t\tWebGLRenderTarget.call(this, width, height, options);\n\t\tthis.samples = 4;\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign(Object.create(WebGLRenderTarget.prototype), {\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\t\tisWebGLMultisampleRenderTarget: true,\n\t\tcopy: function copy(source) {\n\t\t\tWebGLRenderTarget.prototype.copy.call(this, source);\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar Quaternion = /*#__PURE__*/function () {\n\t\tfunction Quaternion(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isQuaternion', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tQuaternion.slerp = function slerp(qa, qb, qm, t) {\n\t\t\treturn qm.copy(qa).slerp(qb, t);\n\t\t};\n\n\t\tQuaternion.slerpFlat = function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tvar x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1 + 0],\n\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tvar cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tvar sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tvar f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t};\n\n\t\tQuaternion.multiplyQuaternionsFlat = function multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tvar x0 = src0[srcOffset0];\n\t\t\tvar y0 = src0[srcOffset0 + 1];\n\t\t\tvar z0 = src0[srcOffset0 + 2];\n\t\t\tvar w0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1];\n\t\t\tvar y1 = src1[srcOffset1 + 1];\n\t\t\tvar z1 = src1[srcOffset1 + 2];\n\t\t\tvar w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t};\n\n\t\tvar _proto = Quaternion.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t};\n\n\t\t_proto.copy = function copy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromEuler = function setFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar x = euler._x,\n\t\t\t\t\ty = euler._y,\n\t\t\t\t\tz = euler._z,\n\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c1 = cos(x / 2);\n\t\t\tvar c2 = cos(y / 2);\n\t\t\tvar c3 = cos(z / 2);\n\t\t\tvar s1 = sin(x / 2);\n\t\t\tvar s2 = sin(y / 2);\n\t\t\tvar s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromAxisAngle = function setFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tvar halfAngle = angle / 2,\n\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar te = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10],\n\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tvar s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tvar _s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n\t\t\t\tthis._w = (m32 - m23) / _s;\n\t\t\t\tthis._x = 0.25 * _s;\n\t\t\t\tthis._y = (m12 + m21) / _s;\n\t\t\t\tthis._z = (m13 + m31) / _s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tvar _s2 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n\t\t\t\tthis._w = (m13 - m31) / _s2;\n\t\t\t\tthis._x = (m12 + m21) / _s2;\n\t\t\t\tthis._y = 0.25 * _s2;\n\t\t\t\tthis._z = (m23 + m32) / _s2;\n\t\t\t} else {\n\t\t\t\tvar _s3 = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n\t\t\t\tthis._w = (m21 - m12) / _s3;\n\t\t\t\tthis._x = (m13 + m31) / _s3;\n\t\t\t\tthis._y = (m23 + m32) / _s3;\n\t\t\t\tthis._z = 0.25 * _s3;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromUnitVectors = function setFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tvar EPS = 0.000001;\n\t\t\tvar r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < EPS) {\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n\t\t};\n\n\t\t_proto.rotateTowards = function rotateTowards(q, step) {\n\t\t\tvar angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tvar t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t};\n\n\t\t_proto.conjugate = function conjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\tvar l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t};\n\n\t\t_proto.multiplyQuaternions = function multiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tvar qax = a._x,\n\t\t\t\t\tqay = a._y,\n\t\t\t\t\tqaz = a._z,\n\t\t\t\t\tqaw = a._w;\n\t\t\tvar qbx = b._x,\n\t\t\t\t\tqby = b._y,\n\t\t\t\t\tqbz = b._z,\n\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.slerp = function slerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tvar x = this._x,\n\t\t\t\t\ty = this._y,\n\t\t\t\t\tz = this._z,\n\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tvar halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tvar ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Quaternion, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"w\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._w = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Quaternion;\n\t}();\n\n\tvar Vector3 = /*#__PURE__*/function () {\n\t\tfunction Vector3(x, y, z) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tvar _proto = Vector3.prototype;\n\n\t\t_proto.set = function set(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyVectors = function multiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyEuler = function applyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion.setFromEuler(euler));\n\t\t};\n\n\t\t_proto.applyAxisAngle = function applyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyNormalMatrix = function applyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tvar w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyQuaternion = function applyQuaternion(q) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar qx = q.x,\n\t\t\t\t\tqy = q.y,\n\t\t\t\t\tqz = q.z,\n\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.project = function project(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t};\n\n\t\t_proto.unproject = function unproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t};\n\n\t\t_proto.transformDirection = function transformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\t\t;\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.cross = function cross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t};\n\n\t\t_proto.crossVectors = function crossVectors(a, b) {\n\t\t\tvar ax = a.x,\n\t\t\t\t\tay = a.y,\n\t\t\t\t\taz = a.z;\n\t\t\tvar bx = b.x,\n\t\t\t\t\tby = b.y,\n\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.projectOnVector = function projectOnVector(v) {\n\t\t\tvar denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tvar scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t};\n\n\t\t_proto.projectOnPlane = function projectOnPlane(planeNormal) {\n\t\t\t_vector.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector);\n\t\t};\n\n\t\t_proto.reflect = function reflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(v) {\n\t\t\tvar denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tvar theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(MathUtils.clamp(theta, -1, 1));\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t};\n\n\t\t_proto.setFromSpherical = function setFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t};\n\n\t\t_proto.setFromSphericalCoords = function setFromSphericalCoords(radius, phi, theta) {\n\t\t\tvar sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCylindrical = function setFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t};\n\n\t\t_proto.setFromCylindricalCoords = function setFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixPosition = function setFromMatrixPosition(m) {\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixScale = function setFromMatrixScale(m) {\n\t\t\tvar sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tvar sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tvar sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixColumn = function setFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t};\n\n\t\t_proto.setFromMatrix3Column = function setFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Vector3;\n\t}();\n\n\tvar _vector = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion = /*@__PURE__*/new Quaternion();\n\n\tvar Box3 = /*#__PURE__*/function () {\n\t\tfunction Box3(min, max) {\n\t\t\tObject.defineProperty(this, 'isBox3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.min = min !== undefined ? min : new Vector3(+Infinity, +Infinity, +Infinity);\n\t\t\tthis.max = max !== undefined ? max : new Vector3(-Infinity, -Infinity, -Infinity);\n\t\t}\n\n\t\tvar _proto = Box3.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromArray = function setFromArray(array) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tvar x = array[i];\n\t\t\t\tvar y = array[i + 1];\n\t\t\t\tvar z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromBufferAttribute = function setFromBufferAttribute(attribute) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tvar x = attribute.getX(i);\n\t\t\t\tvar y = attribute.getY(i);\n\t\t\t\tvar z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$1.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getSize() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByObject = function expandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box.copy(geometry.boundingBox);\n\n\t\t\t\t_box.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box);\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$1); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$1.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tvar min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t};\n\n\t\t_proto.intersectsTriangle = function intersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0.subVectors(triangle.a, _center);\n\n\t\t\t_v1.subVectors(triangle.b, _center);\n\n\t\t\t_v2.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1, _v0);\n\n\t\t\t_f1.subVectors(_v2, _v1);\n\n\t\t\t_f2.subVectors(_v0, _v2); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tvar axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0, _v1, _v2, _extents);\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$1.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.getBoundingSphere = function getBoundingSphere(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n\t\t\t}\n\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$1).length() * 0.5;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box3;\n\t}();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (var i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tvar r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tvar p0 = v0.dot(_testAxis);\n\t\t\tvar p1 = v1.dot(_testAxis);\n\t\t\tvar p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tvar _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tvar _vector$1 = /*@__PURE__*/new Vector3();\n\n\tvar _box = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tvar _v0 = /*@__PURE__*/new Vector3();\n\n\tvar _v1 = /*@__PURE__*/new Vector3();\n\n\tvar _v2 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tvar _f0 = /*@__PURE__*/new Vector3();\n\n\tvar _f1 = /*@__PURE__*/new Vector3();\n\n\tvar _f2 = /*@__PURE__*/new Vector3();\n\n\tvar _center = /*@__PURE__*/new Vector3();\n\n\tvar _extents = /*@__PURE__*/new Vector3();\n\n\tvar _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tvar _testAxis = /*@__PURE__*/new Vector3();\n\n\tvar _box$1 = /*@__PURE__*/new Box3();\n\n\tvar Sphere = /*#__PURE__*/function () {\n\t\tfunction Sphere(center, radius) {\n\t\t\tthis.center = center !== undefined ? center : new Vector3();\n\t\t\tthis.radius = radius !== undefined ? radius : -1;\n\t\t}\n\n\t\tvar _proto = Sphere.prototype;\n\n\t\t_proto.set = function set(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points, optionalCenter) {\n\t\t\tvar center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$1.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared(point);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getBoundingBox = function getBoundingBox(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .getBoundingBox() target is now required');\n\t\t\t\ttarget = new Box3();\n\t\t\t}\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t};\n\n\t\treturn Sphere;\n\t}();\n\n\tvar _vector$2 = /*@__PURE__*/new Vector3();\n\n\tvar _segCenter = /*@__PURE__*/new Vector3();\n\n\tvar _segDir = /*@__PURE__*/new Vector3();\n\n\tvar _diff = /*@__PURE__*/new Vector3();\n\n\tvar _edge1 = /*@__PURE__*/new Vector3();\n\n\tvar _edge2 = /*@__PURE__*/new Vector3();\n\n\tvar _normal = /*@__PURE__*/new Vector3();\n\n\tvar Ray = /*#__PURE__*/function () {\n\t\tfunction Ray(origin, direction) {\n\t\t\tthis.origin = origin !== undefined ? origin : new Vector3();\n\t\t\tthis.direction = direction !== undefined ? direction : new Vector3(0, 0, -1);\n\t\t}\n\n\t\tvar _proto = Ray.prototype;\n\n\t\t_proto.set = function set(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.recast = function recast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$2));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tvar directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t};\n\n\t\t_proto.distanceSqToPoint = function distanceSqToPoint(point) {\n\t\t\tvar directionDistance = _vector$2.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$2.distanceToSquared(point);\n\t\t};\n\n\t\t_proto.distanceSqToSegment = function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tvar segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tvar a01 = -this.direction.dot(_segDir);\n\n\t\t\tvar b0 = _diff.dot(this.direction);\n\n\t\t\tvar b1 = -_diff.dot(_segDir);\n\n\t\t\tvar c = _diff.lengthSq();\n\n\t\t\tvar det = Math.abs(1 - a01 * a01);\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t};\n\n\t\t_proto.intersectSphere = function intersectSphere(sphere, target) {\n\t\t\t_vector$2.subVectors(sphere.center, this.origin);\n\n\t\t\tvar tca = _vector$2.dot(this.direction);\n\n\t\t\tvar d2 = _vector$2.dot(_vector$2) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tvar thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tvar t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tvar t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.distanceToPlane = function distanceToPlane(plane) {\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t};\n\n\t\t_proto.intersectPlane = function intersectPlane(plane, target) {\n\t\t\tvar t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tvar distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t};\n\n\t\t_proto.intersectBox = function intersectBox(box, target) {\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tvar origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$2) !== null;\n\t\t};\n\n\t\t_proto.intersectTriangle = function intersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tvar DdN = this.direction.dot(_normal);\n\t\t\tvar sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tvar DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tvar QdN = -sign * _diff.dot(_normal); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t};\n\n\t\treturn Ray;\n\t}();\n\n\tvar Matrix4 = /*#__PURE__*/function () {\n\t\tfunction Matrix4() {\n\t\t\tObject.defineProperty(this, 'isMatrix4', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix4.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyPosition = function copyPosition(m) {\n\t\t\tvar te = this.elements,\n\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeBasis = function makeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractRotation = function extractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1$1.setFromMatrixColumn(m, 0).length();\n\n\t\t\tvar scaleY = 1 / _v1$1.setFromMatrixColumn(m, 1).length();\n\n\t\t\tvar scaleZ = 1 / _v1$1.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromEuler = function makeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = euler.x,\n\t\t\t\t\ty = euler.y,\n\t\t\t\t\tz = euler.z;\n\t\t\tvar a = Math.cos(x),\n\t\t\t\t\tb = Math.sin(x);\n\t\t\tvar c = Math.cos(y),\n\t\t\t\t\td = Math.sin(y);\n\t\t\tvar e = Math.cos(z),\n\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tvar ae = a * e,\n\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tvar ce = c * e,\n\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tvar _ce = c * e,\n\t\t\t\t\t\t_cf = c * f,\n\t\t\t\t\t\t_de = d * e,\n\t\t\t\t\t\t_df = d * f;\n\n\t\t\t\tte[0] = _ce - _df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = _de + _cf * b;\n\t\t\t\tte[1] = _cf + _de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _df - _ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tvar _ae = a * e,\n\t\t\t\t\t\t_af = a * f,\n\t\t\t\t\t\t_be = b * e,\n\t\t\t\t\t\t_bf = b * f;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = _be * d - _af;\n\t\t\t\tte[8] = _ae * d + _bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = _bf * d + _ae;\n\t\t\t\tte[9] = _af * d - _be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tvar ac = a * c,\n\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tvar _ac = a * c,\n\t\t\t\t\t\t_ad = a * d,\n\t\t\t\t\t\t_bc = b * c,\n\t\t\t\t\t\t_bd = b * d;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = _ac * f + _bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _ad * f - _bc;\n\t\t\t\tte[2] = _bc * f - _ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = _bd * f + _ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromQuaternion = function makeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(eye, target, up) {\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\ta14 = ae[12];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\ta24 = ae[13];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\ta34 = ae[14];\n\t\t\tvar a41 = ae[3],\n\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\ta44 = ae[15];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[4],\n\t\t\t\t\tb13 = be[8],\n\t\t\t\t\tb14 = be[12];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[5],\n\t\t\t\t\tb23 = be[9],\n\t\t\t\t\tb24 = be[13];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[6],\n\t\t\t\t\tb33 = be[10],\n\t\t\t\t\tb34 = be[14];\n\t\t\tvar b41 = be[3],\n\t\t\t\t\tb42 = be[7],\n\t\t\t\t\tb43 = be[11],\n\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar n11 = te[0],\n\t\t\t\t\tn12 = te[4],\n\t\t\t\t\tn13 = te[8],\n\t\t\t\t\tn14 = te[12];\n\t\t\tvar n21 = te[1],\n\t\t\t\t\tn22 = te[5],\n\t\t\t\t\tn23 = te[9],\n\t\t\t\t\tn24 = te[13];\n\t\t\tvar n31 = te[2],\n\t\t\t\t\tn32 = te[6],\n\t\t\t\t\tn33 = te[10],\n\t\t\t\t\tn34 = te[14];\n\t\t\tvar n41 = te[3],\n\t\t\t\t\tn42 = te[7],\n\t\t\t\t\tn43 = te[11],\n\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setPosition = function setPosition(x, y, z) {\n\t\t\tvar te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\t\tn11 = te[0],\n\t\t\t\t\tn21 = te[1],\n\t\t\t\t\tn31 = te[2],\n\t\t\t\t\tn41 = te[3],\n\t\t\t\t\tn12 = te[4],\n\t\t\t\t\tn22 = te[5],\n\t\t\t\t\tn32 = te[6],\n\t\t\t\t\tn42 = te[7],\n\t\t\t\t\tn13 = te[8],\n\t\t\t\t\tn23 = te[9],\n\t\t\t\t\tn33 = te[10],\n\t\t\t\t\tn43 = te[11],\n\t\t\t\t\tn14 = te[12],\n\t\t\t\t\tn24 = te[13],\n\t\t\t\t\tn34 = te[14],\n\t\t\t\t\tn44 = te[15],\n\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(v) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x,\n\t\t\t\t\ty = v.y,\n\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxScaleOnAxis = function getMaxScaleOnAxis() {\n\t\t\tvar te = this.elements;\n\t\t\tvar scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tvar scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tvar scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t};\n\n\t\t_proto.makeTranslation = function makeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationX = function makeRotationX(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationY = function makeRotationY(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationZ = function makeRotationZ(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationAxis = function makeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tvar c = Math.cos(angle);\n\t\t\tvar s = Math.sin(angle);\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x,\n\t\t\t\t\ty = axis.y,\n\t\t\t\t\tz = axis.z;\n\t\t\tvar tx = t * x,\n\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeScale = function makeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeShear = function makeShear(x, y, z) {\n\t\t\tthis.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.compose = function compose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = quaternion._x,\n\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\tw = quaternion._w;\n\t\t\tvar x2 = x + x,\n\t\t\t\t\ty2 = y + y,\n\t\t\t\t\tz2 = z + z;\n\t\t\tvar xx = x * x2,\n\t\t\t\t\txy = x * y2,\n\t\t\t\t\txz = x * z2;\n\t\t\tvar yy = y * y2,\n\t\t\t\t\tyz = y * z2,\n\t\t\t\t\tzz = z * z2;\n\t\t\tvar wx = w * x2,\n\t\t\t\t\twy = w * y2,\n\t\t\t\t\twz = w * z2;\n\t\t\tvar sx = scale.x,\n\t\t\t\t\tsy = scale.y,\n\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.decompose = function decompose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1$1.set(te[0], te[1], te[2]).length();\n\n\t\t\tvar sy = _v1$1.set(te[4], te[5], te[6]).length();\n\n\t\t\tvar sz = _v1$1.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tvar det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1.copy(this);\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\t\t\t_m1.elements[0] *= invSX;\n\t\t\t_m1.elements[1] *= invSX;\n\t\t\t_m1.elements[2] *= invSX;\n\t\t\t_m1.elements[4] *= invSY;\n\t\t\t_m1.elements[5] *= invSY;\n\t\t\t_m1.elements[6] *= invSY;\n\t\t\t_m1.elements[8] *= invSZ;\n\t\t\t_m1.elements[9] *= invSZ;\n\t\t\t_m1.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makePerspective = function makePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / (right - left);\n\t\t\tvar y = 2 * near / (top - bottom);\n\t\t\tvar a = (right + left) / (right - left);\n\t\t\tvar b = (top + bottom) / (top - bottom);\n\t\t\tvar c = -(far + near) / (far - near);\n\t\t\tvar d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeOrthographic = function makeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / (right - left);\n\t\t\tvar h = 1.0 / (top - bottom);\n\t\t\tvar p = 1.0 / (far - near);\n\t\t\tvar x = (right + left) * w;\n\t\t\tvar y = (top + bottom) * h;\n\t\t\tvar z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t};\n\n\t\treturn Matrix4;\n\t}();\n\n\tvar _v1$1 = /*@__PURE__*/new Vector3();\n\n\tvar _m1 = /*@__PURE__*/new Matrix4();\n\n\tvar _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tvar _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tvar _x = /*@__PURE__*/new Vector3();\n\n\tvar _y = /*@__PURE__*/new Vector3();\n\n\tvar _z = /*@__PURE__*/new Vector3();\n\n\tvar Euler = /*#__PURE__*/function () {\n\t\tfunction Euler(x, y, z, order) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (order === void 0) {\n\t\t\t\torder = Euler.DefaultOrder;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isEuler', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tvar _proto = Euler.prototype;\n\n\t\t_proto.set = function set(x, y, z, order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t};\n\n\t\t_proto.copy = function copy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m, order, update) {\n\t\t\tvar clamp = MathUtils.clamp; // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8];\n\t\t\tvar m21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9];\n\t\t\tvar m31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\t\t\torder = order || this._order;\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromQuaternion = function setFromQuaternion(q, order, update) {\n\t\t\t_matrix.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix, order, update);\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v, order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order || this._order);\n\t\t};\n\n\t\t_proto.reorder = function reorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$1.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$1, newOrder);\n\t\t};\n\n\t\t_proto.equals = function equals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.toVector3 = function toVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Euler, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"order\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._order = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Euler;\n\t}();\n\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tvar _matrix = /*@__PURE__*/new Matrix4();\n\n\tvar _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tvar Layers = /*#__PURE__*/function () {\n\t\tfunction Layers() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tvar _proto = Layers.prototype;\n\n\t\t_proto.set = function set(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enable = function enable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enableAll = function enableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t};\n\n\t\t_proto.toggle = function toggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.disable = function disable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t};\n\n\t\t_proto.disableAll = function disableAll() {\n\t\t\tthis.mask = 0;\n\t\t};\n\n\t\t_proto.test = function test(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t};\n\n\t\treturn Layers;\n\t}();\n\n\tvar _object3DId = 0;\n\n\tvar _v1$2 = new Vector3();\n\n\tvar _q1 = new Quaternion();\n\n\tvar _m1$1 = new Matrix4();\n\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\n\tvar _scale = new Vector3();\n\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3(1, 0, 0);\n\n\tvar _yAxis = new Vector3(0, 1, 0);\n\n\tvar _zAxis = new Vector3(0, 0, 1);\n\n\tvar _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tvar _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tfunction Object3D() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _object3DId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t\tthis.up = Object3D.DefaultUp.clone();\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3(1, 1, 1);\n\n\t\tfunction onRotationChange() {\n\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t}\n\n\t\trotation._onChange(onRotationChange);\n\n\t\tquaternion._onChange(onQuaternionChange);\n\n\t\tObject.defineProperties(this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t});\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\t\tthis.animations = [];\n\t\tthis.userData = {};\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Object3D,\n\t\tisObject3D: true,\n\t\tonBeforeRender: function onBeforeRender() {},\n\t\tonAfterRender: function onAfterRender() {},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t},\n\t\tapplyQuaternion: function applyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t},\n\t\tsetRotationFromAxisAngle: function setRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t},\n\t\tsetRotationFromEuler: function setRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t},\n\t\tsetRotationFromMatrix: function setRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t},\n\t\tsetRotationFromQuaternion: function setRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t},\n\t\trotateOnAxis: function rotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateOnWorldAxis: function rotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t},\n\t\ttranslateOnAxis: function translateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$2.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$2.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t},\n\t\ttranslateX: function translateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t},\n\t\ttranslateY: function translateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t},\n\t\ttranslateZ: function translateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t},\n\t\tlocalToWorld: function localToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t},\n\t\tworldToLocal: function worldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t},\n\t\tlookAt: function lookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t},\n\t\tadd: function add(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tremove: function remove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclear: function clear() {\n\t\t\tfor (var i = 0; i < this.children.length; i++) {\n\t\t\t\tvar object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t},\n\t\tattach: function attach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t},\n\t\tgetObjectById: function getObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t},\n\t\tgetObjectByName: function getObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t},\n\t\tgetObjectByProperty: function getObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (var i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tvar child = this.children[i];\n\t\t\t\tvar object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\tgetWorldPosition: function getWorldPosition(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldPosition() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t},\n\t\tgetWorldQuaternion: function getWorldQuaternion(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n\t\t\t\ttarget = new Quaternion();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, target, _scale);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldScale: function getWorldScale(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldScale() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion$2, target);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t},\n\t\traycast: function raycast() {},\n\t\ttraverse: function traverse(callback) {\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseVisible: function traverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseAncestors: function traverseAncestors(callback) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t},\n\t\tupdateMatrix: function updateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tvar output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tvar object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tvar shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor (var _i = 0, _l = this.material.length; _i < _l; _i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[_i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (var _i2 = 0; _i2 < this.children.length; _i2++) {\n\t\t\t\t\tobject.children.push(this.children[_i2].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (var _i3 = 0; _i3 < this.animations.length; _i3++) {\n\t\t\t\t\tvar animation = this.animations[_i3];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tvar geometries = extractFromCache(meta.geometries);\n\t\t\t\tvar materials = extractFromCache(meta.materials);\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\n\t\t\t\tvar _shapes = extractFromCache(meta.shapes);\n\n\t\t\t\tvar skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tvar animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (_shapes.length > 0) output.shapes = _shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t},\n\t\tclone: function clone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t},\n\t\tcopy: function copy(source, recursive) {\n\t\t\tif (recursive === void 0) {\n\t\t\t\trecursive = true;\n\t\t\t}\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (var i = 0; i < source.children.length; i++) {\n\t\t\t\t\tvar child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar _vector1 = /*@__PURE__*/new Vector3();\n\n\tvar _vector2 = /*@__PURE__*/new Vector3();\n\n\tvar _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tvar Plane = /*#__PURE__*/function () {\n\t\tfunction Plane(normal, constant) {\n\t\t\tObject.defineProperty(this, 'isPlane', {\n\t\t\t\tvalue: true\n\t\t\t}); // normal is assumed to be normalized\n\n\t\t\tthis.normal = normal !== undefined ? normal : new Vector3(1, 0, 0);\n\t\t\tthis.constant = constant !== undefined ? constant : 0;\n\t\t}\n\n\t\tvar _proto = Plane.prototype;\n\n\t\t_proto.set = function set(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponents = function setComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromNormalAndCoplanarPoint = function setFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCoplanarPoints = function setFromCoplanarPoints(a, b, c) {\n\t\t\tvar normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t};\n\n\t\t_proto.distanceToSphere = function distanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t};\n\n\t\t_proto.projectPoint = function projectPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .projectPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t};\n\n\t\t_proto.intersectLine = function intersectLine(line, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .intersectLine() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar direction = line.delta(_vector1);\n\t\t\tvar denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tvar t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t};\n\n\t\t_proto.intersectsLine = function intersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tvar startSign = this.distanceToPoint(line.start);\n\t\t\tvar endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.coplanarPoint = function coplanarPoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .coplanarPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tvar referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tvar normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t};\n\n\t\treturn Plane;\n\t}();\n\n\tvar _v0$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v1$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v3 = /*@__PURE__*/new Vector3();\n\n\tvar _vab = /*@__PURE__*/new Vector3();\n\n\tvar _vac = /*@__PURE__*/new Vector3();\n\n\tvar _vbc = /*@__PURE__*/new Vector3();\n\n\tvar _vap = /*@__PURE__*/new Vector3();\n\n\tvar _vbp = /*@__PURE__*/new Vector3();\n\n\tvar _vcp = /*@__PURE__*/new Vector3();\n\n\tvar Triangle = /*#__PURE__*/function () {\n\t\tfunction Triangle(a, b, c) {\n\t\t\tthis.a = a !== undefined ? a : new Vector3();\n\t\t\tthis.b = b !== undefined ? b : new Vector3();\n\t\t\tthis.c = c !== undefined ? c : new Vector3();\n\t\t}\n\n\t\tTriangle.getNormal = function getNormal(a, b, c, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getNormal() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tvar targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\t;\n\n\t\tTriangle.getBarycoord = function getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$1.subVectors(point, a);\n\n\t\t\tvar dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tvar dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tvar dot02 = _v0$1.dot(_v2$1);\n\n\t\t\tvar dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tvar dot12 = _v1$3.dot(_v2$1);\n\n\t\t\tvar denom = dot00 * dot11 - dot01 * dot01;\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getBarycoord() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t} // collinear or singular triangle\n\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tvar v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t};\n\n\t\tTriangle.containsPoint = function containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3);\n\t\t\treturn _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;\n\t\t};\n\n\t\tTriangle.getUV = function getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3.x);\n\t\t\ttarget.addScaledVector(uv2, _v3.y);\n\t\t\ttarget.addScaledVector(uv3, _v3.z);\n\t\t\treturn target;\n\t\t};\n\n\t\tTriangle.isFrontFacing = function isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t};\n\n\t\tvar _proto = Triangle.prototype;\n\n\t\t_proto.set = function set(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPointsAndIndices = function setFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getArea = function getArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t};\n\n\t\t_proto.getMidpoint = function getMidpoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getMidpoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t};\n\n\t\t_proto.getNormal = function getNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getPlane = function getPlane(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getPlane() target is now required');\n\t\t\t\ttarget = new Plane();\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.getBarycoord = function getBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getUV = function getUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.isFrontFacing = function isFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(p, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar a = this.a,\n\t\t\t\t\tb = this.b,\n\t\t\t\t\tc = this.c;\n\t\t\tvar v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tvar d1 = _vab.dot(_vap);\n\n\t\t\tvar d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tvar d3 = _vab.dot(_vbp);\n\n\t\t\tvar d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tvar d5 = _vab.dot(_vcp);\n\n\t\t\tvar d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tvar denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t};\n\n\t\t_proto.equals = function equals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t};\n\n\t\treturn Triangle;\n\t}();\n\n\tvar _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tvar _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tvar _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tvar Color = /*#__PURE__*/function () {\n\t\tfunction Color(r, g, b) {\n\t\t\tObject.defineProperty(this, 'isColor', {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tvar _proto = Color.prototype;\n\n\t\t_proto.set = function set(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHex = function setHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setRGB = function setRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHSL = function setHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo(h, 1);\n\t\t\ts = MathUtils.clamp(s, 0, 1);\n\t\t\tl = MathUtils.clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tvar p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tvar q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setStyle = function setStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[1];\n\t\t\t\tvar components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tvar s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tvar l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tvar hex = m[1];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setColorName = function setColorName(style) {\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[style];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t};\n\n\t\t_proto.copy = function copy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyGammaToLinear = function copyGammaToLinear(color, gammaFactor) {\n\t\t\tif (gammaFactor === void 0) {\n\t\t\t\tgammaFactor = 2.0;\n\t\t\t}\n\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToGamma = function copyLinearToGamma(color, gammaFactor) {\n\t\t\tif (gammaFactor === void 0) {\n\t\t\t\tgammaFactor = 2.0;\n\t\t\t}\n\n\t\t\tvar safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertGammaToLinear = function convertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToGamma = function convertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copySRGBToLinear = function copySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToSRGB = function copyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertSRGBToLinear = function convertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToSRGB = function convertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getHex = function getHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t};\n\n\t\t_proto.getHexString = function getHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t};\n\n\t\t_proto.getHSL = function getHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Color: .getHSL() target is now required');\n\t\t\t\ttarget = {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar r = this.r,\n\t\t\t\t\tg = this.g,\n\t\t\t\t\tb = this.b;\n\t\t\tvar max = Math.max(r, g, b);\n\t\t\tvar min = Math.min(r, g, b);\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tvar delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getStyle = function getStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t};\n\n\t\t_proto.offsetHSL = function offsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addColors = function addColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpHSL = function lerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tvar h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tvar s = MathUtils.lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tvar l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\treturn this.getHex();\n\t\t};\n\n\t\treturn Color;\n\t}();\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\tvar Face3 = /*#__PURE__*/function () {\n\t\tfunction Face3(a, b, c, normal, color, materialIndex) {\n\t\t\tif (materialIndex === void 0) {\n\t\t\t\tmaterialIndex = 0;\n\t\t\t}\n\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t\tthis.normal = normal && normal.isVector3 ? normal : new Vector3();\n\t\t\tthis.vertexNormals = Array.isArray(normal) ? normal : [];\n\t\t\tthis.color = color && color.isColor ? color : new Color();\n\t\t\tthis.vertexColors = Array.isArray(color) ? color : [];\n\t\t\tthis.materialIndex = materialIndex;\n\t\t}\n\n\t\tvar _proto = Face3.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\t\t\tthis.normal.copy(source.normal);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor (var i = 0, il = source.vertexNormals.length; i < il; i++) {\n\t\t\t\tthis.vertexNormals[i] = source.vertexNormals[i].clone();\n\t\t\t}\n\n\t\t\tfor (var _i = 0, _il = source.vertexColors.length; _i < _il; _i++) {\n\t\t\t\tthis.vertexColors[_i] = source.vertexColors[_i].clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Face3;\n\t}();\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: materialId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\t\tthis.fog = true;\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = false;\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\t\tthis.shadowSide = null;\n\t\tthis.colorWrite = true;\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\t\tthis.dithering = false;\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\t\tthis.visible = true;\n\t\tthis.toneMapped = true;\n\t\tthis.userData = {};\n\t\tthis.version = 0;\n\t}\n\n\tMaterial.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Material,\n\t\tisMaterial: true,\n\t\tonBeforeCompile: function onBeforeCompile()\n\t\t/* shaderobject, renderer */\n\t\t{},\n\t\tcustomProgramCacheKey: function customProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t},\n\t\tsetValues: function setValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (var key in values) {\n\t\t\t\tvar newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\t\t\tif (this.lightMap && this.lightMap.isTexture) data.lightMap = this.lightMap.toJSON(meta).uuid;\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.morphTargets === true) data.morphTargets = true;\n\t\t\tif (this.morphNormals === true) data.morphNormals = true;\n\t\t\tif (this.skinning === true) data.skinning = true;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar _data = cache[key];\n\t\t\t\t\tdelete _data.metadata;\n\t\t\t\t\tvalues.push(_data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tvar srcPlanes = source.clippingPlanes;\n\t\t\tvar dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\tObject.defineProperty(Material.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshBasicMaterial';\n\t\tthis.color = new Color(0xffffff); // emissive\n\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create(Material.prototype);\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _vector$3 = new Vector3();\n\n\tvar _vector2$1 = new Vector2();\n\n\tfunction BufferAttribute(array, itemSize, normalized) {\n\t\tif (Array.isArray(array)) {\n\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t}\n\n\t\tthis.name = '';\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(BufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(BufferAttribute.prototype, {\n\t\tisBufferAttribute: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (var i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyArray: function copyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t},\n\t\tcopyColorsArray: function copyColorsArray(colors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tvar color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector2sArray: function copyVector2sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector3sArray: function copyVector3sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector4sArray: function copyVector4sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix3: function applyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2$1.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2$1.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2$1.x, _vector2$1.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (var _i = 0, _l = this.count; _i < _l; _i++) {\n\t\t\t\t\t_vector$3.fromBufferAttribute(this, _i);\n\n\t\t\t\t\t_vector$3.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(_i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyNormalMatrix: function applyNormalMatrix(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttransformDirection: function transformDirection(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t}\n\t}); //\n\n\tfunction Int8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int8Array(array), itemSize, normalized);\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\tfunction Uint8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\tfunction Uint8ClampedBufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\tfunction Int16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int16Array(array), itemSize, normalized);\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\tfunction Uint16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\tfunction Int32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int32Array(array), itemSize, normalized);\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\tfunction Uint32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\tfunction Float16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tFloat16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat16BufferAttribute.prototype.constructor = Float16BufferAttribute;\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tfunction Float32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float32Array(array), itemSize, normalized);\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\tfunction Float64BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float64Array(array), itemSize, normalized);\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute; //\n\n\tvar DirectGeometry = /*#__PURE__*/function () {\n\t\tfunction DirectGeometry() {\n\t\t\tthis.vertices = [];\n\t\t\tthis.normals = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.uvs = [];\n\t\t\tthis.uvs2 = [];\n\t\t\tthis.groups = [];\n\t\t\tthis.morphTargets = {};\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = []; // this.lineDistances = [];\n\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // update flags\n\n\t\t\tthis.verticesNeedUpdate = false;\n\t\t\tthis.normalsNeedUpdate = false;\n\t\t\tthis.colorsNeedUpdate = false;\n\t\t\tthis.uvsNeedUpdate = false;\n\t\t\tthis.groupsNeedUpdate = false;\n\t\t}\n\n\t\tvar _proto = DirectGeometry.prototype;\n\n\t\t_proto.computeGroups = function computeGroups(geometry) {\n\t\t\tvar groups = [];\n\t\t\tvar group, i;\n\t\t\tvar materialIndex = undefined;\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor (i = 0; i < faces.length; i++) {\n\t\t\t\tvar face = faces[i]; // materials\n\n\t\t\t\tif (face.materialIndex !== materialIndex) {\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif (group !== undefined) {\n\t\t\t\t\t\tgroup.count = i * 3 - group.start;\n\t\t\t\t\t\tgroups.push(group);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (group !== undefined) {\n\t\t\t\tgroup.count = i * 3 - group.start;\n\t\t\t\tgroups.push(group);\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\t\t};\n\n\t\t_proto.fromGeometry = function fromGeometry(geometry) {\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0; // morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif (morphTargetsLength > 0) {\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor (var i = 0; i < morphTargetsLength; i++) {\n\t\t\t\t\tmorphTargetsPosition[i] = {\n\t\t\t\t\t\tname: morphTargets[i].name,\n\t\t\t\t\t\tdata: []\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif (morphNormalsLength > 0) {\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor (var _i = 0; _i < morphNormalsLength; _i++) {\n\t\t\t\t\tmorphTargetsNormal[_i] = {\n\t\t\t\t\t\tname: morphNormals[_i].name,\n\t\t\t\t\t\tdata: []\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\t\t\t} // skins\n\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length; //\n\n\t\t\tif (vertices.length > 0 && faces.length === 0) {\n\t\t\t\tconsole.error('THREE.DirectGeometry: Faceless geometries are not supported.');\n\t\t\t}\n\n\t\t\tfor (var _i2 = 0; _i2 < faces.length; _i2++) {\n\t\t\t\tvar face = faces[_i2];\n\t\t\t\tthis.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif (vertexNormals.length === 3) {\n\t\t\t\t\tthis.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n\t\t\t\t} else {\n\t\t\t\t\tvar normal = face.normal;\n\t\t\t\t\tthis.normals.push(normal, normal, normal);\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif (vertexColors.length === 3) {\n\t\t\t\t\tthis.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n\t\t\t\t} else {\n\t\t\t\t\tvar color = face.color;\n\t\t\t\t\tthis.colors.push(color, color, color);\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceVertexUv === true) {\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[0][_i2];\n\n\t\t\t\t\tif (vertexUvs !== undefined) {\n\t\t\t\t\t\tthis.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', _i2);\n\t\t\t\t\t\tthis.uvs.push(new Vector2(), new Vector2(), new Vector2());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceVertexUv2 === true) {\n\t\t\t\t\tvar _vertexUvs = faceVertexUvs[1][_i2];\n\n\t\t\t\t\tif (_vertexUvs !== undefined) {\n\t\t\t\t\t\tthis.uvs2.push(_vertexUvs[0], _vertexUvs[1], _vertexUvs[2]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', _i2);\n\t\t\t\t\t\tthis.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n\t\t\t\t\t}\n\t\t\t\t} // morphs\n\n\n\t\t\t\tfor (var j = 0; j < morphTargetsLength; j++) {\n\t\t\t\t\tvar morphTarget = morphTargets[j].vertices;\n\t\t\t\t\tmorphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n\t\t\t\t}\n\n\t\t\t\tfor (var _j = 0; _j < morphNormalsLength; _j++) {\n\t\t\t\t\tvar morphNormal = morphNormals[_j].vertexNormals[_i2];\n\n\t\t\t\t\tmorphTargetsNormal[_j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);\n\t\t\t\t} // skins\n\n\n\t\t\t\tif (hasSkinIndices) {\n\t\t\t\t\tthis.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n\t\t\t\t}\n\n\t\t\t\tif (hasSkinWeights) {\n\t\t\t\t\tthis.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.computeGroups(geometry);\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tif (geometry.boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\t\t}\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn DirectGeometry;\n\t}();\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tvar max = array[0];\n\n\t\tfor (var i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\n\tvar _obj = new Object3D();\n\n\tvar _offset = new Vector3();\n\n\tvar _box$2 = new Box3();\n\n\tvar _boxMorphTargets = new Box3();\n\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _bufferGeometryId += 2\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\t\tthis.drawRange = {\n\t\t\tstart: 0,\n\t\t\tcount: Infinity\n\t\t};\n\t\tthis.userData = {};\n\t}\n\n\tBufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: BufferGeometry,\n\t\tisBufferGeometry: true,\n\t\tgetIndex: function getIndex() {\n\t\t\treturn this.index;\n\t\t},\n\t\tsetIndex: function setIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tgetAttribute: function getAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t},\n\t\tsetAttribute: function setAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t},\n\t\tdeleteAttribute: function deleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t},\n\t\thasAttribute: function hasAttribute(name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t},\n\t\taddGroup: function addGroup(start, count, materialIndex) {\n\t\t\tif (materialIndex === void 0) {\n\t\t\t\tmaterialIndex = 0;\n\t\t\t}\n\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t},\n\t\tclearGroups: function clearGroups() {\n\t\t\tthis.groups = [];\n\t\t},\n\t\tsetDrawRange: function setDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1$2.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1$2.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1$2.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\ttranslate: function translate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1$2.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tscale: function scale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1$2.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tlookAt: function lookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t},\n\t\tcenter: function center() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t},\n\t\tsetFromObject: function setFromObject(object) {\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif (object.isPoints || object.isLine) {\n\t\t\t\tvar positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);\n\t\t\t\tvar colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);\n\t\t\t\tthis.setAttribute('position', positions.copyVector3sArray(geometry.vertices));\n\t\t\t\tthis.setAttribute('color', colors.copyColorsArray(geometry.colors));\n\n\t\t\t\tif (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);\n\t\t\t\t\tthis.setAttribute('lineDistance', lineDistances.copyArray(geometry.lineDistances));\n\t\t\t\t}\n\n\t\t\t\tif (geometry.boundingSphere !== null) {\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\t\t\t}\n\n\t\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\t\t\t}\n\t\t\t} else if (object.isMesh) {\n\t\t\t\tif (geometry && geometry.isGeometry) {\n\t\t\t\t\tthis.fromGeometry(geometry);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tvar position = [];\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tvar point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t},\n\t\tupdateFromObject: function updateFromObject(object) {\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif (geometry.elementsNeedUpdate === true) {\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\t\t\t\t}\n\n\t\t\t\tif (direct === undefined) {\n\t\t\t\t\treturn this.fromGeometry(geometry);\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\t\t\t\tgeometry = direct;\n\t\t\t}\n\n\t\t\tif (geometry.verticesNeedUpdate === true) {\n\t\t\t\tvar attribute = this.attributes.position;\n\n\t\t\t\tif (attribute !== undefined) {\n\t\t\t\t\tattribute.copyVector3sArray(geometry.vertices);\n\t\t\t\t\tattribute.needsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (geometry.normalsNeedUpdate === true) {\n\t\t\t\tvar _attribute = this.attributes.normal;\n\n\t\t\t\tif (_attribute !== undefined) {\n\t\t\t\t\t_attribute.copyVector3sArray(geometry.normals);\n\n\t\t\t\t\t_attribute.needsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (geometry.colorsNeedUpdate === true) {\n\t\t\t\tvar _attribute2 = this.attributes.color;\n\n\t\t\t\tif (_attribute2 !== undefined) {\n\t\t\t\t\t_attribute2.copyColorsArray(geometry.colors);\n\n\t\t\t\t\t_attribute2.needsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (geometry.uvsNeedUpdate) {\n\t\t\t\tvar _attribute3 = this.attributes.uv;\n\n\t\t\t\tif (_attribute3 !== undefined) {\n\t\t\t\t\t_attribute3.copyVector2sArray(geometry.uvs);\n\n\t\t\t\t\t_attribute3.needsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (geometry.lineDistancesNeedUpdate) {\n\t\t\t\tvar _attribute4 = this.attributes.lineDistance;\n\n\t\t\t\tif (_attribute4 !== undefined) {\n\t\t\t\t\t_attribute4.copyArray(geometry.lineDistances);\n\n\t\t\t\t\t_attribute4.needsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (geometry.groupsNeedUpdate) {\n\t\t\t\tgeometry.computeGroups(object.geometry);\n\t\t\t\tthis.groups = geometry.groups;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tfromGeometry: function fromGeometry(geometry) {\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry(geometry);\n\t\t\treturn this.fromDirectGeometry(geometry.__directGeometry);\n\t\t},\n\t\tfromDirectGeometry: function fromDirectGeometry(geometry) {\n\t\t\tvar positions = new Float32Array(geometry.vertices.length * 3);\n\t\t\tthis.setAttribute('position', new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n\n\t\t\tif (geometry.normals.length > 0) {\n\t\t\t\tvar normals = new Float32Array(geometry.normals.length * 3);\n\t\t\t\tthis.setAttribute('normal', new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n\t\t\t}\n\n\t\t\tif (geometry.colors.length > 0) {\n\t\t\t\tvar colors = new Float32Array(geometry.colors.length * 3);\n\t\t\t\tthis.setAttribute('color', new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n\t\t\t}\n\n\t\t\tif (geometry.uvs.length > 0) {\n\t\t\t\tvar uvs = new Float32Array(geometry.uvs.length * 2);\n\t\t\t\tthis.setAttribute('uv', new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n\t\t\t}\n\n\t\t\tif (geometry.uvs2.length > 0) {\n\t\t\t\tvar uvs2 = new Float32Array(geometry.uvs2.length * 2);\n\t\t\t\tthis.setAttribute('uv2', new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n\t\t\t} // groups\n\n\n\t\t\tthis.groups = geometry.groups; // morphs\n\n\t\t\tfor (var name in geometry.morphTargets) {\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[name];\n\n\t\t\t\tfor (var i = 0, l = morphTargets.length; i < l; i++) {\n\t\t\t\t\tvar morphTarget = morphTargets[i];\n\t\t\t\t\tvar attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);\n\t\t\t\t\tattribute.name = morphTarget.name;\n\t\t\t\t\tarray.push(attribute.copyVector3sArray(morphTarget.data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[name] = array;\n\t\t\t} // skinning\n\n\n\t\t\tif (geometry.skinIndices.length > 0) {\n\t\t\t\tvar skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);\n\t\t\t\tthis.setAttribute('skinIndex', skinIndices.copyVector4sArray(geometry.skinIndices));\n\t\t\t}\n\n\t\t\tif (geometry.skinWeights.length > 0) {\n\t\t\t\tvar skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);\n\t\t\t\tthis.setAttribute('skinWeight', skinWeights.copyVector4sArray(geometry.skinWeights));\n\t\t\t} //\n\n\n\t\t\tif (geometry.boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\t\t}\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcomputeBoundingBox: function computeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$2.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.min, _box$2.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.max, _box$2.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t},\n\t\tcomputeBoundingSphere: function computeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor (var _i = 0, _il = position.count; _i < _il; _i++) {\n\t\t\t\t\t_vector$4.fromBufferAttribute(position, _i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = morphAttributesPosition.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tvar _morphAttribute = morphAttributesPosition[_i2];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (var j = 0, jl = _morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute(_morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$4.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeFaceNormals: function computeFaceNormals() {// backwards compatibility\n\t\t},\n\t\tcomputeVertexNormals: function computeVertexNormals() {\n\t\t\tvar index = this.index;\n\t\t\tvar positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tvar normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (var i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar pA = new Vector3(),\n\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tvar nA = new Vector3(),\n\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tvar cb = new Vector3(),\n\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (var _i3 = 0, _il3 = index.count; _i3 < _il3; _i3 += 3) {\n\t\t\t\t\t\tvar vA = index.getX(_i3 + 0);\n\t\t\t\t\t\tvar vB = index.getX(_i3 + 1);\n\t\t\t\t\t\tvar vC = index.getX(_i3 + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (var _i4 = 0, _il4 = positionAttribute.count; _i4 < _il4; _i4 += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, _i4 + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, _i4 + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, _i4 + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i4 + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i4 + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i4 + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t},\n\t\tmerge: function merge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tvar attribute1 = attributes[key];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\t\t\t\tvar attribute2 = geometry.attributes[key];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (var i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tnormalizeNormals: function normalizeNormals() {\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor (var i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$4.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$4.x, _vector$4.y, _vector$4.z);\n\t\t\t}\n\t\t},\n\t\ttoNonIndexed: function toNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\tvar normalized = attribute.normalized;\n\t\t\t\tvar array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tvar index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (var i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tindex = indices[i] * itemSize;\n\n\t\t\t\t\tfor (var j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes; // attributes\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tvar newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tvar _attribute5 = morphAttribute[i];\n\n\t\t\t\t\tvar _newAttribute = convertBufferAttribute(_attribute5, indices);\n\n\t\t\t\t\tmorphArray.push(_newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[_name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor (var _i5 = 0, l = groups.length; _i5 < l; _i5++) {\n\t\t\t\tvar group = groups[_i5];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor (var key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tvar index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var _key in attributes) {\n\t\t\t\tvar attribute = attributes[_key];\n\t\t\t\tvar attributeData = attribute.toJSON(data.data);\n\t\t\t\tif (attribute.name !== '') attributeData.name = attribute.name;\n\t\t\t\tdata.data.attributes[_key] = attributeData;\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor (var _key2 in this.morphAttributes) {\n\t\t\t\tvar attributeArray = this.morphAttributes[_key2];\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tvar _attribute6 = attributeArray[i];\n\n\t\t\t\t\tvar _attributeData = _attribute6.toJSON(data.data);\n\n\t\t\t\t\tif (_attribute6.name !== '') _attributeData.name = _attribute6.name;\n\t\t\t\t\tarray.push(_attributeData);\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[_key2] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tvar data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor (var _name2 in morphAttributes) {\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name2]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[_name2] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor (var _i6 = 0, _l = groups.length; _i6 < _l; _i6++) {\n\t\t\t\tvar group = groups[_i6];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\tvar _inverseMatrix = new Matrix4();\n\n\tvar _ray = new Ray();\n\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\n\tvar _vB = new Vector3();\n\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\n\tvar _tempB = new Vector3();\n\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\n\tvar _morphB = new Vector3();\n\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\n\tvar _uvB = new Vector2();\n\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new MeshBasicMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Mesh';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tMesh.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Mesh,\n\t\tisMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tvar start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tvar end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tvar a = index.getX(j);\n\t\t\t\t\t\t\t\tvar b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tvar c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i = _start, _il = _end; _i < _il; _i += 3) {\n\t\t\t\t\t\t\tvar _a = index.getX(_i);\n\n\t\t\t\t\t\t\tvar _b = index.getX(_i + 1);\n\n\t\t\t\t\t\t\tvar _c = index.getX(_i + 2);\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a, _b, _c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var _i2 = 0, _il2 = groups.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\t\tvar _group = groups[_i2];\n\t\t\t\t\t\t\tvar _groupMaterial = material[_group.materialIndex];\n\n\t\t\t\t\t\t\tvar _start2 = Math.max(_group.start, drawRange.start);\n\n\t\t\t\t\t\t\tvar _end2 = Math.min(_group.start + _group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var _j = _start2, _jl = _end2; _j < _jl; _j += 3) {\n\t\t\t\t\t\t\t\tvar _a2 = _j;\n\n\t\t\t\t\t\t\t\tvar _b2 = _j + 1;\n\n\t\t\t\t\t\t\t\tvar _c2 = _j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, _groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a2, _b2, _c2);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = _group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start3 = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end3 = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i3 = _start3, _il3 = _end3; _i3 < _il3; _i3 += 3) {\n\t\t\t\t\t\t\tvar _a3 = _i3;\n\n\t\t\t\t\t\t\tvar _b3 = _i3 + 1;\n\n\t\t\t\t\t\t\tvar _c3 = _i3 + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a3, _b3, _c3);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i3 / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tvar isMultiMaterial = Array.isArray(material);\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[0];\n\t\t\t\tif (faceVertexUvs.length > 0) uvs = faceVertexUvs;\n\n\t\t\t\tfor (var f = 0, fl = faces.length; f < fl; f++) {\n\t\t\t\t\tvar face = faces[f];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;\n\t\t\t\t\tif (faceMaterial === undefined) continue;\n\t\t\t\t\tvar fvA = vertices[face.a];\n\t\t\t\t\tvar fvB = vertices[face.b];\n\t\t\t\t\tvar fvC = vertices[face.c];\n\t\t\t\t\tintersection = checkIntersection(this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint);\n\n\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\tif (uvs && uvs[f]) {\n\t\t\t\t\t\t\tvar uvs_f = uvs[f];\n\n\t\t\t\t\t\t\t_uvA.copy(uvs_f[0]);\n\n\t\t\t\t\t\t\t_uvB.copy(uvs_f[1]);\n\n\t\t\t\t\t\t\t_uvC.copy(uvs_f[2]);\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tvar intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA.fromBufferAttribute(position, a);\n\n\t\t_vB.fromBufferAttribute(position, b);\n\n\t\t_vC.fromBufferAttribute(position, c);\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif (material.morphTargets && morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (var i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tvar influence = morphInfluences[i];\n\t\t\t\tvar morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA.add(_morphA);\n\n\t\t\t_vB.add(_morphB);\n\n\t\t\t_vC.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh) {\n\t\t\tobject.boneTransform(a, _vA);\n\t\t\tobject.boneTransform(b, _vB);\n\t\t\tobject.boneTransform(c, _vC);\n\t\t}\n\n\t\tvar intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tvar face = new Face3(a, b, c);\n\t\t\tTriangle.getNormal(_vA, _vB, _vC, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tvar BoxBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(BoxBufferGeometry, _BufferGeometry);\n\n\t\tfunction BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 1;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (depthSegments === void 0) {\n\t\t\t\tdepthSegments = 1;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'BoxBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this); // segments\n\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\t\tvar a = numberOfVertices + _ix + gridX1 * _iy;\n\t\t\t\t\t\tvar b = numberOfVertices + _ix + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar c = numberOfVertices + (_ix + 1) + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar d = numberOfVertices + (_ix + 1) + gridX1 * _iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn BoxBufferGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tvar dst = {};\n\n\t\tfor (var u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (var p in src[u]) {\n\t\t\t\tvar property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tvar merged = {};\n\n\t\tfor (var u = 0; u < uniforms.length; u++) {\n\t\t\tvar tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (var p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tvar UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'ShaderMaterial';\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\t\tthis.linewidth = 1;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false; // set to use scene fog\n\n\t\tthis.lights = false; // set to use scene lights\n\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\n\t\tthis.morphTargets = false; // set to use morph targets\n\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false,\n\t\t\t// set to use derivatives\n\t\t\tfragDepth: false,\n\t\t\t// set to use fragment depth values\n\t\t\tdrawBuffers: false,\n\t\t\t// set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [1, 1, 1],\n\t\t\t'uv': [0, 0],\n\t\t\t'uv2': [0, 0]\n\t\t};\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\t\tthis.glslVersion = null;\n\n\t\tif (parameters !== undefined) {\n\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\tthis.setValues(parameters);\n\t\t}\n\t}\n\n\tShaderMaterial.prototype = Object.create(Material.prototype);\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\tthis.defines = Object.assign({}, source.defines);\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\tthis.glslVersion = source.glslVersion;\n\t\treturn this;\n\t};\n\n\tShaderMaterial.prototype.toJSON = function (meta) {\n\t\tvar data = Material.prototype.toJSON.call(this, meta);\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor (var name in this.uniforms) {\n\t\t\tvar uniform = this.uniforms[name];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif (value && value.isTexture) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t};\n\t\t\t} else if (value && value.isColor) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector2) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\t\tvar extensions = {};\n\n\t\tfor (var key in this.extensions) {\n\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t}\n\n\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\treturn data;\n\t};\n\n\tfunction Camera() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Camera';\n\t\tthis.matrixWorldInverse = new Matrix4();\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\t}\n\n\tCamera.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Camera,\n\t\tisCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tObject3D.prototype.copy.call(this, source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Camera: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tObject3D.prototype.updateMatrixWorld.call(this, force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tObject3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\t});\n\n\tfunction PerspectiveCamera(fov, aspect, near, far) {\n\t\tif (fov === void 0) {\n\t\t\tfov = 50;\n\t\t}\n\n\t\tif (aspect === void 0) {\n\t\t\taspect = 1;\n\t\t}\n\n\t\tif (near === void 0) {\n\t\t\tnear = 0.1;\n\t\t}\n\n\t\tif (far === void 0) {\n\t\t\tfar = 2000;\n\t\t}\n\n\t\tCamera.call(this);\n\t\tthis.type = 'PerspectiveCamera';\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n\t\tconstructor: PerspectiveCamera,\n\t\tisPerspectiveCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tCamera.prototype.copy.call(this, source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function setFocalLength(focalLength) {\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function getFocalLength() {\n\t\t\tvar vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t},\n\t\tgetEffectiveFOV: function getEffectiveFOV() {\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t},\n\t\tgetFilmWidth: function getFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t},\n\t\tgetFilmHeight: function getFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tclearViewOffset: function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tupdateProjectionMatrix: function updateProjectionMatrix() {\n\t\t\tvar near = this.near;\n\t\t\tvar top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tvar height = 2 * top;\n\t\t\tvar width = this.aspect * height;\n\t\t\tvar left = -0.5 * width;\n\t\t\tvar view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar fov = 90,\n\t\t\taspect = 1;\n\n\tfunction CubeCamera(near, far, renderTarget) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'CubeCamera';\n\n\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.renderTarget = renderTarget;\n\t\tvar cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set(0, -1, 0);\n\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\t\tthis.add(cameraPX);\n\t\tvar cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set(0, -1, 0);\n\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\t\tthis.add(cameraNX);\n\t\tvar cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set(0, 0, 1);\n\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\t\tthis.add(cameraPY);\n\t\tvar cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set(0, 0, -1);\n\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\t\tthis.add(cameraNY);\n\t\tvar cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set(0, -1, 0);\n\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\t\tthis.add(cameraPZ);\n\t\tvar cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set(0, -1, 0);\n\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\t\tthis.add(cameraNZ);\n\n\t\tthis.update = function (renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t};\n\t}\n\n\tCubeCamera.prototype = Object.create(Object3D.prototype);\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\tfunction CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\t\tTexture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.flipY = false; // Why CubeTexture._needsFlipEnvMap is necessary:\n\t\t//\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)\n\t\t// when using WebGLCubeRenderTarget.texture as a cube texture.\n\n\t\tthis._needsFlipEnvMap = true;\n\t}\n\n\tCubeTexture.prototype = Object.create(Texture.prototype);\n\tCubeTexture.prototype.constructor = CubeTexture;\n\tCubeTexture.prototype.isCubeTexture = true;\n\tObject.defineProperty(CubeTexture.prototype, 'images', {\n\t\tget: function get() {\n\t\t\treturn this.image;\n\t\t},\n\t\tset: function set(value) {\n\t\t\tthis.image = value;\n\t\t}\n\t});\n\n\tfunction WebGLCubeRenderTarget(size, options, dummy) {\n\t\tif (Number.isInteger(options)) {\n\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\toptions = dummy;\n\t\t}\n\n\t\tWebGLRenderTarget.call(this, size, size, options);\n\t\toptions = options || {};\n\t\tthis.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\tthis.texture._needsFlipEnvMap = false;\n\t}\n\n\tWebGLCubeRenderTarget.prototype = Object.create(WebGLRenderTarget.prototype);\n\tWebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tWebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function (renderer, texture) {\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\tthis.texture.encoding = texture.encoding;\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\t\tvar shader = {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\t\\t\\t\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\n\\t\\t\\t\\t#include <begin_vertex>\\n\\t\\t\\t\\t#include <project_vertex>\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tuniform sampler2D tEquirect;\\n\\n\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 direction = normalize( vWorldDirection );\\n\\n\\t\\t\\t\\tvec2 sampleUV = equirectUv( direction );\\n\\n\\t\\t\\t\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n\\t\\t\\t}\\n\\t\\t\"\n\t\t};\n\t\tvar geometry = new BoxBufferGeometry(5, 5, 5);\n\t\tvar material = new ShaderMaterial({\n\t\t\tname: 'CubemapFromEquirect',\n\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\t\t});\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\tvar mesh = new Mesh(geometry, material);\n\t\tvar currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\tvar camera = new CubeCamera(1, 10, this);\n\t\tcamera.update(renderer, mesh);\n\t\ttexture.minFilter = currentMinFilter;\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\t\treturn this;\n\t};\n\n\tWebGLCubeRenderTarget.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor (var i = 0; i < 6; i++) {\n\t\t\trenderer.setRenderTarget(this, i);\n\t\t\trenderer.clear(color, depth, stencil);\n\t\t}\n\n\t\trenderer.setRenderTarget(currentRenderTarget);\n\t};\n\n\tfunction DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.image = {\n\t\t\tdata: data || null,\n\t\t\twidth: width || 1,\n\t\t\theight: height || 1\n\t\t};\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture.prototype = Object.create(Texture.prototype);\n\tDataTexture.prototype.constructor = DataTexture;\n\tDataTexture.prototype.isDataTexture = true;\n\n\tvar _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tvar _vector$5 = /*@__PURE__*/new Vector3();\n\n\tvar Frustum = /*#__PURE__*/function () {\n\t\tfunction Frustum(p0, p1, p2, p3, p4, p5) {\n\t\t\tthis.planes = [p0 !== undefined ? p0 : new Plane(), p1 !== undefined ? p1 : new Plane(), p2 !== undefined ? p2 : new Plane(), p3 !== undefined ? p3 : new Plane(), p4 !== undefined ? p4 : new Plane(), p5 !== undefined ? p5 : new Plane()];\n\t\t}\n\n\t\tvar _proto = Frustum.prototype;\n\n\t\t_proto.set = function set(p0, p1, p2, p3, p4, p5) {\n\t\t\tvar planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(frustum) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromProjectionMatrix = function setFromProjectionMatrix(m) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[0],\n\t\t\t\t\tme1 = me[1],\n\t\t\t\t\tme2 = me[2],\n\t\t\t\t\tme3 = me[3];\n\t\t\tvar me4 = me[4],\n\t\t\t\t\tme5 = me[5],\n\t\t\t\t\tme6 = me[6],\n\t\t\t\t\tme7 = me[7];\n\t\t\tvar me8 = me[8],\n\t\t\t\t\tme9 = me[9],\n\t\t\t\t\tme10 = me[10],\n\t\t\t\t\tme11 = me[11];\n\t\t\tvar me12 = me[12],\n\t\t\t\t\tme13 = me[13],\n\t\t\t\t\tme14 = me[14],\n\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.intersectsObject = function intersectsObject(object) {\n\t\t\tvar geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSprite = function intersectsSprite(sprite) {\n\t\t\t_sphere$1.center.set(0, 0, 0);\n\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\n\t\t\t_sphere$1.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = -sphere.radius;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$5) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\treturn Frustum;\n\t}();\n\n\tfunction WebGLAnimation() {\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\t\tvar requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function start() {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function stop() {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function setAnimationLoop(callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function setContext(value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\t\t\tvar buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tvar type = 5126;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = 5126;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = 5131;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = 5123;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = 5122;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = 5125;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = 5124;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = 5120;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = 5121;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tvar cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tvar PlaneBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PlaneBufferGeometry, _BufferGeometry);\n\n\t\tfunction PlaneBufferGeometry(width, height, widthSegments, heightSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 1;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PlaneBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tvar width_half = width / 2;\n\t\t\tvar height_half = height / 2;\n\t\t\tvar gridX = Math.floor(widthSegments);\n\t\t\tvar gridY = Math.floor(heightSegments);\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\t\t\tvar segment_width = width / gridX;\n\t\t\tvar segment_height = height / gridY; //\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tvar x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\tvar a = _ix + gridX1 * _iy;\n\t\t\t\t\tvar b = _ix + gridX1 * (_iy + 1);\n\t\t\t\t\tvar c = _ix + 1 + gridX1 * (_iy + 1);\n\t\t\t\t\tvar d = _ix + 1 + gridX1 * _iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PlaneBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor.xyz *= color.xyz;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmissionmap_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n#endif\";\n\n\tvar transmissionmap_pars_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\tuniform sampler2D transmissionMap;\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSMISSION\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSMISSION\\n\\tuniform float transmission;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <transmissionmap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <transmissionmap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSMISSION\\n\\t\\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmissionmap_fragment: transmissionmap_fragment,\n\t\ttransmissionmap_pars_fragment: transmissionmap_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tvar ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tvar clearColor = new Color(0x000000);\n\t\tvar clearAlpha = 0;\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render(renderList, scene, camera, forceClear) {\n\t\t\tvar background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tif (background.isWebGLCubeRenderTarget) {\n\t\t\t\t\t// TODO Deprecate\n\t\t\t\t\tbackground = background.texture;\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneBufferGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function getClearColor() {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function setClearColor(color, alpha) {\n\t\t\t\tif (alpha === void 0) {\n\t\t\t\t\talpha = 1;\n\t\t\t\t}\n\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function getClearAlpha() {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function setClearAlpha(alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tvar maxVertexAttributes = gl.getParameter(34921);\n\t\tvar extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tvar vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tvar bindingStates = {};\n\t\tvar defaultState = createBindingState(null);\n\t\tvar currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tvar state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tvar wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, 34963);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(34963, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tvar wireframe = material.wireframe === true;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tvar state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tvar newAttributes = [];\n\t\t\tvar enabledAttributes = [];\n\t\t\tvar attributeDivisors = [];\n\n\t\t\tfor (var i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tvar cachedAttributes = currentState.attributes;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tvar attributesNum = 0;\n\n\t\t\tfor (var key in geometryAttributes) {\n\t\t\t\tvar cachedAttribute = cachedAttributes[key];\n\t\t\t\tvar geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tvar cache = {};\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar attributesNum = 0;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\n\t\t\tfor (var i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\t\t\tvar attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tvar _extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\n\t\t\t\t_extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (var i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tvar programAttributes = program.getAttributes();\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (var name in programAttributes) {\n\t\t\t\tvar programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute >= 0) {\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\t\tvar attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (name === 'instanceMatrix') {\n\t\t\t\t\t\tvar _attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute === undefined) continue;\n\t\t\t\t\t\tvar _buffer = _attribute.buffer;\n\t\t\t\t\t\tvar _type = _attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 0, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 1, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 2, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 3, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 0, 4, _type, false, 64, 0);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 1, 4, _type, false, 64, 16);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 2, 4, _type, false, 64, 32);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 3, 4, _type, false, 64, 48);\n\t\t\t\t\t} else if (name === 'instanceColor') {\n\t\t\t\t\t\tvar _attribute2 = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute2 === undefined) continue;\n\t\t\t\t\t\tvar _buffer2 = _attribute2.buffer;\n\t\t\t\t\t\tvar _type2 = _attribute2.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer2);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute, 3, _type2, false, 12, 0);\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (var programId in programMap) {\n\t\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tfor (var programId in programMap) {\n\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tvar isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tvar maxTextures = gl.getParameter(34930);\n\t\tvar maxVertexTextures = gl.getParameter(35660);\n\t\tvar maxTextureSize = gl.getParameter(3379);\n\t\tvar maxCubemapSize = gl.getParameter(34076);\n\t\tvar maxAttributes = gl.getParameter(34921);\n\t\tvar maxVertexUniforms = gl.getParameter(36347);\n\t\tvar maxVaryings = gl.getParameter(36348);\n\t\tvar maxFragmentUniforms = gl.getParameter(36349);\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !!extensions.get('OES_texture_float');\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tvar scope = this;\n\t\tvar globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tvar plane = new Plane(),\n\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tvar enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tvar planes = material.clippingPlanes,\n\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tvar dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (var i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0;\n\t\t\tvar dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tvar cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture) {\n\t\t\t\tvar mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tvar cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tvar currentRenderList = renderer.getRenderList();\n\t\t\t\t\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tvar renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\trenderer.setRenderList(currentRenderList);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tvar texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tvar cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tvar extensions = {};\n\t\treturn {\n\t\t\thas: function has(name) {\n\t\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\t\treturn extensions[name] !== null;\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t\t}\n\n\t\t\t\textensions[name] = extension;\n\t\t\t\treturn extension !== null;\n\t\t\t},\n\t\t\tget: function get(name) {\n\t\t\t\tif (!this.has(name)) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get(geometry);\n\n\t\t\tif (buffergeometry.index !== null) {\n\t\t\t\tattributes.remove(buffergeometry.index);\n\t\t\t}\n\n\t\t\tfor (var name in buffergeometry.attributes) {\n\t\t\t\tattributes.remove(buffergeometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries.delete(geometry);\n\t\t\tvar attribute = wireframeAttributes.get(buffergeometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(buffergeometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(buffergeometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tvar buffergeometry = geometries.get(geometry);\n\t\t\tif (buffergeometry) return buffergeometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tbuffergeometry = geometry;\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tif (geometry._bufferGeometry === undefined) {\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject(object);\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\t\t\t}\n\n\t\t\tgeometries.set(geometry, buffergeometry);\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tvar geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (var name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], 34962);\n\t\t\t} // morph targets\n\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar array = morphAttributes[_name];\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], 34962);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tvar indices = [];\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tvar a = array[i + 0];\n\t\t\t\t\tvar b = array[i + 1];\n\t\t\t\t\tvar c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar _array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (var _i = 0, _l = _array.length / 3 - 1; _i < _l; _i += 3) {\n\t\t\t\t\tvar _a = _i + 0;\n\n\t\t\t\t\tvar _b = _i + 1;\n\n\t\t\t\t\tvar _c = _i + 2;\n\n\t\t\t\t\tindices.push(_a, _b, _b, _c, _c, _a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tvar currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array(8);\n\t\tvar workInfluences = [];\n\n\t\tfor (var i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tvar objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tvar influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (var _i = 0; _i < length; _i++) {\n\t\t\t\t\tinfluences[_i] = [_i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (var _i2 = 0; _i2 < length; _i2++) {\n\t\t\t\tvar influence = influences[_i2];\n\t\t\t\tinfluence[0] = _i2;\n\t\t\t\tinfluence[1] = objectInfluences[_i2];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (var _i3 = 0; _i3 < 8; _i3++) {\n\t\t\t\tif (_i3 < length && influences[_i3][1]) {\n\t\t\t\t\tworkInfluences[_i3][0] = influences[_i3][0];\n\t\t\t\t\tworkInfluences[_i3][1] = influences[_i3][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[_i3][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[_i3][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor (var _i4 = 0; _i4 < 8; _i4++) {\n\t\t\t\tvar _influence = workInfluences[_i4];\n\t\t\t\tvar index = _influence[0];\n\t\t\t\tvar value = _influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + _i4) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + _i4, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + _i4) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + _i4, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + _i4) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + _i4) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tvar frame = info.render.frame;\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tif (geometry.isGeometry) {\n\t\t\t\t\tbuffergeometry.updateFromObject(object);\n\t\t\t\t}\n\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, 34962);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, 34962);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tvar instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction DataTexture2DArray(data, width, height, depth) {\n\t\tif (data === void 0) {\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (width === void 0) {\n\t\t\twidth = 1;\n\t\t}\n\n\t\tif (height === void 0) {\n\t\t\theight = 1;\n\t\t}\n\n\t\tif (depth === void 0) {\n\t\t\tdepth = 1;\n\t\t}\n\n\t\tTexture.call(this, null);\n\t\tthis.image = {\n\t\t\tdata: data,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth\n\t\t};\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture2DArray.prototype = Object.create(Texture.prototype);\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tfunction DataTexture3D(data, width, height, depth) {\n\t\tif (data === void 0) {\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (width === void 0) {\n\t\t\twidth = 1;\n\t\t}\n\n\t\tif (height === void 0) {\n\t\t\theight = 1;\n\t\t}\n\n\t\tif (depth === void 0) {\n\t\t\tdepth = 1;\n\t\t}\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\t\tTexture.call(this, null);\n\t\tthis.image = {\n\t\t\tdata: data,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth\n\t\t};\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture3D.prototype = Object.create(Texture.prototype);\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array(16);\n\tvar mat3array = new Float32Array(9);\n\tvar mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tvar firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize;\n\t\tvar r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (var i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (var i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (var i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tvar r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t}\n\n\tfunction setValueV2i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // uint\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t}\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of vectors (flat or from THREE classes)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (flat or from THREE clases)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tvar cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tvar seq = this.seq;\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tvar RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tvar path = activeInfo.name,\n\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tvar match = RePathPart.exec(path),\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tvar id = match[1];\n\t\t\tvar idIsIndex = match[2] === ']',\n\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tvar map = container.map;\n\t\t\t\tvar next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tvar n = gl.getProgramParameter(program, 35718);\n\n\t\tfor (var i = 0; i < n; ++i) {\n\t\t\tvar info = gl.getActiveUniform(program, i),\n\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tvar u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tvar v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i],\n\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tvar r = [];\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tvar shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tvar lines = string.split('\\n');\n\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tvar status = gl.getShaderParameter(shader, 35713);\n\t\tvar log = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && log === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource(shader);\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tvar toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tvar chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tvar chunks = [];\n\n\t\tfor (var name in defines) {\n\t\t\tvar value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tvar attributes = {};\n\t\tvar n = gl.getProgramParameter(program, 35721);\n\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\tvar info = gl.getActiveAttrib(program, i);\n\t\t\tvar name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = gl.getAttribLocation(program, name);\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tvar string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tvar string = '';\n\n\t\tfor (var i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tvar precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\tvar gl = renderer.getContext();\n\t\tvar defines = parameters.defines;\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tvar envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tvar gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tvar customDefines = generateDefines(defines);\n\t\tvar program = gl.createProgram();\n\t\tvar prefixVertex, prefixFragment;\n\t\tvar versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#ifdef USE_COLOR', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tvar vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader(gl, 35633, vertexGlsl);\n\t\tvar glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tvar programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, 35714) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tvar vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tvar fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter(program, 35715), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n\t\tvar programs = [];\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tvar parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'combine', 'vertexColors', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'maxMorphTargets', 'maxMorphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'alphaTest', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'sheen', 'transmissionMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tvar maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tvar encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\tvar parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: !!material.sheen,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: material.normalMap && material.vertexTangents,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tvar array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (var name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (var i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tvar shaderID = shaderIDs[material.type];\n\t\t\tvar uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tvar program; // Check if code has been already compiled\n\n\t\t\tfor (var p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tvar preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tvar map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\t\tvar defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = renderItems[renderItemsIndex];\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).push(renderItem);\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).unshift(renderItem);\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (var i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tvar renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tvar lists = new WeakMap();\n\n\t\tfunction get(scene, camera) {\n\t\t\tvar cameras = lists.get(scene);\n\t\t\tvar list;\n\n\t\t\tif (cameras === undefined) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, new WeakMap());\n\t\t\t\tlists.get(scene).set(camera, list);\n\t\t\t} else {\n\t\t\t\tlist = cameras.get(camera);\n\n\t\t\t\tif (list === undefined) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tcameras.set(camera, list);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tvar cache = new UniformsCache();\n\t\tvar shadowCache = ShadowUniformsCache();\n\t\tvar state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (var i = 0; i < 9; i++) {\n\t\t\tstate.probe.push(new Vector3());\n\t\t}\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup(lights) {\n\t\t\tvar r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (var _i = 0; _i < 9; _i++) {\n\t\t\t\tstate.probe[_i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst);\n\n\t\t\tfor (var _i2 = 0, l = lights.length; _i2 < l; _i2++) {\n\t\t\t\tvar light = lights[_i2];\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\t\t\t\tvar shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (var j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tvar uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar shadow = light.shadow;\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tvar _uniforms = cache.get(light);\n\n\t\t\t\t\t_uniforms.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms.distance = distance;\n\t\t\t\t\t_uniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\t_uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\t_uniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms.shadowBias = _shadow.bias;\n\t\t\t\t\t\t_shadowUniforms.shadowNormalBias = _shadow.normalBias;\n\t\t\t\t\t\t_shadowUniforms.shadowRadius = _shadow.radius;\n\t\t\t\t\t\t_shadowUniforms.shadowMapSize = _shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = _shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = _uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tvar _uniforms2 = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\n\t\t\t\t\t_uniforms2.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms2.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\n\t\t\t\t\t_uniforms2.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n\t\t\t\t\tstate.rectArea[rectAreaLength] = _uniforms2;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tvar _uniforms3 = cache.get(light);\n\n\t\t\t\t\t_uniforms3.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\t_uniforms3.distance = light.distance;\n\t\t\t\t\t_uniforms3.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow2 = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms2 = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms2.shadowBias = _shadow2.bias;\n\t\t\t\t\t\t_shadowUniforms2.shadowNormalBias = _shadow2.normalBias;\n\t\t\t\t\t\t_shadowUniforms2.shadowRadius = _shadow2.radius;\n\t\t\t\t\t\t_shadowUniforms2.shadowMapSize = _shadow2.mapSize;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraNear = _shadow2.camera.near;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraFar = _shadow2.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = _shadowUniforms2;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = _uniforms3;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tvar _uniforms4 = cache.get(light);\n\n\t\t\t\t\t_uniforms4.skyColor.copy(light.color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms4.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n\n\t\t\t\t\tstate.hemi[hemiLength] = _uniforms4;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tvar hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (var _i3 = 0, l = lights.length; _i3 < l; _i3++) {\n\t\t\t\tvar light = lights[_i3];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tvar uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tvar _uniforms5 = state.spot[spotLength];\n\n\t\t\t\t\t_uniforms5.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms5.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\t_uniforms5.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\t\t\t_uniforms5.direction.sub(vector3);\n\n\t\t\t\t\t_uniforms5.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tvar _uniforms6 = state.rectArea[rectAreaLength];\n\n\t\t\t\t\t_uniforms6.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms6.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\n\t\t\t\t\t_uniforms6.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\n\t\t\t\t\t_uniforms6.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n\t\t\t\t\t_uniforms6.halfWidth.applyMatrix4(matrix42);\n\n\t\t\t\t\t_uniforms6.halfHeight.applyMatrix4(matrix42);\n\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tvar _uniforms7 = state.point[pointLength];\n\n\t\t\t\t\t_uniforms7.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms7.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tvar _uniforms8 = state.hemi[hemiLength];\n\n\t\t\t\t\t_uniforms8.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms8.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\t_uniforms8.direction.normalize();\n\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tvar lights = new WebGLLights(extensions, capabilities);\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights() {\n\t\t\tlights.setup(lightsArray);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tif (renderCallDepth === void 0) {\n\t\t\t\trenderCallDepth = 0;\n\t\t\t}\n\n\t\t\tvar renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, []);\n\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshDepthMaterial';\n\t\tthis.depthPacking = BasicDepthPacking;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create(Material.prototype);\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.depthPacking = source.depthPacking;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshDistanceMaterial';\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.fog = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create(Material.prototype);\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.referencePosition.copy(source.referencePosition);\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\treturn this;\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, maxTextureSize) {\n\t\tvar _frustum = new Frustum();\n\n\t\tvar _shadowMapSize = new Vector2(),\n\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t_depthMaterials = [],\n\t\t\t\t_distanceMaterials = [],\n\t\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tvar shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tvar shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tvar fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tvar scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (var i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tvar light = lights[i];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tvar pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tvar _pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, _pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (var vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tvar viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tvar geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _depthMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDepthMaterial({\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_depthMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _distanceMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDistanceMaterial({\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_distanceMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tvar result = null;\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif (light.isPointLight === true) {\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\t\t}\n\n\t\t\tif (customMaterial === undefined) {\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif (material.morphTargets === true) {\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif (object.isSkinnedMesh === true) {\n\t\t\t\t\tif (material.skinning === true) {\n\t\t\t\t\t\tuseSkinning = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\t\t\t\tresult = getMaterialVariant(useMorphing, useSkinning, useInstancing);\n\t\t\t} else {\n\t\t\t\tresult = customMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tvar keyA = result.uuid,\n\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tvar materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tvar geometry = _objects.update(object);\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor (var k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tvar group = groups[k];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tvar _depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, _depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tvar _equationToGL, _factorToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function setMask(colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(2929);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(2929);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(512);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(519);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(513);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(514);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(518);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(516);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(517);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(2960);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(2960);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function setOp(stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\t\tvar enabledCapabilities = {};\n\t\tvar currentProgram = null;\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\t\tvar currentLineWidth = null;\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\t\tvar maxTextures = gl.getParameter(35661);\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter(7938);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tvar data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tvar texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, 10241, 9728);\n\t\t\tgl.texParameteri(type, 10240, 9728);\n\n\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[3553] = createTexture(3553, 3553, 1);\n\t\temptyTextures[34067] = createTexture(34067, 34069, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(2929);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(2884);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tvar equationToGL = (_equationToGL = {}, _equationToGL[AddEquation] = 32774, _equationToGL[SubtractEquation] = 32778, _equationToGL[ReverseSubtractEquation] = 32779, _equationToGL);\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = 32775;\n\t\t\tequationToGL[MaxEquation] = 32776;\n\t\t} else {\n\t\t\tvar extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tvar factorToGL = (_factorToGL = {}, _factorToGL[ZeroFactor] = 0, _factorToGL[OneFactor] = 1, _factorToGL[SrcColorFactor] = 768, _factorToGL[SrcAlphaFactor] = 770, _factorToGL[SrcAlphaSaturateFactor] = 776, _factorToGL[DstColorFactor] = 774, _factorToGL[DstAlphaFactor] = 772, _factorToGL[OneMinusSrcColorFactor] = 769, _factorToGL[OneMinusSrcAlphaFactor] = 771, _factorToGL[OneMinusDstColorFactor] = 775, _factorToGL[OneMinusDstAlphaFactor] = 773, _factorToGL);\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled) {\n\t\t\t\t\tdisable(3042);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!currentBlendingEnabled) {\n\t\t\t\tenable(3042);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(32774);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(1, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(1, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 0, 769, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 768, 0, 770);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(770, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(770, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 769);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 768);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(2884) : enable(2884);\n\t\t\tvar flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(2304);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(2305);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(2884);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(1029);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(1028);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(1032);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(2884);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(32823);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(32823);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(3089);\n\t\t\t} else {\n\t\t\t\tdisable(3089);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = null;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tvar _wrappingToGL, _filterToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\n\t\tvar _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tvar scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\t\t\t\t\tvar width = floor(scale * image.width);\n\t\t\t\t\tvar height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tvar context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo(image) {\n\t\t\treturn MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tvar textureProperties = properties.get(texture); // Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\n\t\t\ttextureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif (glFormat === 6403) {\n\t\t\t\tif (glType === 5126) internalFormat = 33326;\n\t\t\t\tif (glType === 5131) internalFormat = 33325;\n\t\t\t\tif (glType === 5121) internalFormat = 33321;\n\t\t\t}\n\n\t\t\tif (glFormat === 6407) {\n\t\t\t\tif (glType === 5126) internalFormat = 34837;\n\t\t\t\tif (glType === 5131) internalFormat = 34843;\n\t\t\t\tif (glType === 5121) internalFormat = 32849;\n\t\t\t}\n\n\t\t\tif (glFormat === 6408) {\n\t\t\t\tif (glType === 5126) internalFormat = 34836;\n\t\t\t\tif (glType === 5131) internalFormat = 34842;\n\t\t\t\tif (glType === 5121) internalFormat = 32856;\n\t\t\t}\n\n\t\t\tif (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn 9728;\n\t\t\t}\n\n\t\t\treturn 9729;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tvar texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tvar renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t\tinfo.memory.textures--;\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tproperties.remove(renderTarget.texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(3553, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(35866, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(32879, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t}\n\n\t\tvar wrappingToGL = (_wrappingToGL = {}, _wrappingToGL[RepeatWrapping] = 10497, _wrappingToGL[ClampToEdgeWrapping] = 33071, _wrappingToGL[MirroredRepeatWrapping] = 33648, _wrappingToGL);\n\t\tvar filterToGL = (_filterToGL = {}, _filterToGL[NearestFilter] = 9728, _filterToGL[NearestMipmapNearestFilter] = 9984, _filterToGL[NearestMipmapLinearFilter] = 9986, _filterToGL[LinearFilter] = 9729, _filterToGL[LinearMipmapNearestFilter] = 9985, _filterToGL[LinearMipmapLinearFilter] = 9987, _filterToGL);\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, 10242, 33071);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, 33071);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, 33071);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\n\t\t\tif (extension) {\n\t\t\t\tif (texture.type === FloatType && extensions.get('OES_texture_float_linear') === null) return;\n\t\t\t\tif (texture.type === HalfFloatType && (isWebGL2 || extensions.get('OES_texture_half_float_linear')) === null) return;\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tvar textureType = 3553;\n\t\t\tif (texture.isDataTexture2DArray) textureType = 35866;\n\t\t\tif (texture.isDataTexture3D) textureType = 32879;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, texture.unpackAlignment);\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n\t\t\tvar image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tvar supportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tvar glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tvar mipmap;\n\t\t\tvar mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = 35056;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (var _i = 0, _il = mipmaps.length; _i < _il; _i++) {\n\t\t\t\t\tmipmap = mipmaps[_i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = mipmaps.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tmipmap = mipmaps[_i2];\n\t\t\t\t\t\tstate.texImage2D(3553, _i2, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\tvar isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tvar isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tvar cubeImage = [];\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar image = cubeImage[0],\n\t\t\t\t\tsupportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(34067, texture, supportsMips);\n\t\t\tvar mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (var _i3 = 0; _i3 < 6; _i3++) {\n\t\t\t\t\tmipmaps = cubeImage[_i3].mipmaps;\n\n\t\t\t\t\tfor (var j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tvar mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (var _i4 = 0; _i4 < 6; _i4++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, cubeImage[_i4].width, cubeImage[_i4].height, 0, glFormat, glType, cubeImage[_i4].data);\n\n\t\t\t\t\t\tfor (var _j = 0; _j < mipmaps.length; _j++) {\n\t\t\t\t\t\t\tvar _mipmap = mipmaps[_j];\n\t\t\t\t\t\t\tvar mipmapImage = _mipmap.image[_i4].image;\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, glFormat, glType, cubeImage[_i4]);\n\n\t\t\t\t\t\tfor (var _j2 = 0; _j2 < mipmaps.length; _j2++) {\n\t\t\t\t\t\t\tvar _mipmap2 = mipmaps[_j2];\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j2 + 1, glInternalFormat, glFormat, glType, _mipmap2.image[_i4]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(34067, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\t\t\tvar glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(36161, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples, 35056, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);\n\t\t\t} else {\n\t\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\n\t\t\t\tvar _glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples2 = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples2, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(36161, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tvar isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tvar webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\tinfo.memory.textures++;\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tvar isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && renderTarget.texture.format === RGBFormat && (renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType)) {\n\t\t\t\trenderTarget.texture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\t\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(34067, renderTarget.texture, supportsMips);\n\n\t\t\t\tfor (var _i5 = 0; _i5 < 6; _i5++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[_i5], renderTarget, 36064, 34069 + _i5);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(34067, renderTarget.texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(34067, null);\n\t\t\t} else {\n\t\t\t\tstate.bindTexture(3553, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(3553, renderTarget.texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(3553, renderTarget.texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(3553, null);\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\n\t\t\t\tvar webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\tstate.bindTexture(target, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\n\t\t\t\t\t_gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t_gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= 256;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= 1024;\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);\n\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer); // see #18905\n\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tvar frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tvar extension;\n\t\t\tif (p === UnsignedByteType) return 5121;\n\t\t\tif (p === UnsignedShort4444Type) return 32819;\n\t\t\tif (p === UnsignedShort5551Type) return 32820;\n\t\t\tif (p === UnsignedShort565Type) return 33635;\n\t\t\tif (p === ByteType) return 5120;\n\t\t\tif (p === ShortType) return 5122;\n\t\t\tif (p === UnsignedShortType) return 5123;\n\t\t\tif (p === IntType) return 5124;\n\t\t\tif (p === UnsignedIntType) return 5125;\n\t\t\tif (p === FloatType) return 5126;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return 5131;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return 6406;\n\t\t\tif (p === RGBFormat) return 6407;\n\t\t\tif (p === RGBAFormat) return 6408;\n\t\t\tif (p === LuminanceFormat) return 6409;\n\t\t\tif (p === LuminanceAlphaFormat) return 6410;\n\t\t\tif (p === DepthFormat) return 6402;\n\t\t\tif (p === DepthStencilFormat) return 34041;\n\t\t\tif (p === RedFormat) return 6403; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return 36244;\n\t\t\tif (p === RGFormat) return 33319;\n\t\t\tif (p === RGIntegerFormat) return 33320;\n\t\t\tif (p === RGBIntegerFormat) return 36248;\n\t\t\tif (p === RGBAIntegerFormat) return 36249;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return 34042;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tfunction ArrayCamera(array) {\n\t\tif (array === void 0) {\n\t\t\tarray = [];\n\t\t}\n\n\t\tPerspectiveCamera.call(this);\n\t\tthis.cameras = array;\n\t}\n\n\tArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {\n\t\tconstructor: ArrayCamera,\n\t\tisArrayCamera: true\n\t});\n\n\tfunction Group() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Group';\n\t}\n\n\tGroup.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Group,\n\t\tisGroup: true\n\t});\n\n\tfunction WebXRController() {\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\t}\n\n\tObject.assign(WebXRController.prototype, {\n\t\tconstructor: WebXRController,\n\t\tgetHandSpace: function getHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = [];\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\n\t\t\t\tif (window.XRHand) {\n\t\t\t\t\tfor (var i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {\n\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\tvar joint = new Group();\n\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\tjoint.visible = false;\n\n\t\t\t\t\t\tthis._hand.joints.push(joint); // ??\n\n\n\t\t\t\t\t\tthis._hand.add(joint);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t},\n\t\tgetTargetRaySpace: function getTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t},\n\t\tgetGripSpace: function getGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tdisconnect: function disconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tupdate: function update(inputSource, frame, referenceSpace) {\n\t\t\tvar inputPose = null;\n\t\t\tvar gripPose = null;\n\t\t\tvar handPose = null;\n\t\t\tvar targetRay = this._targetRay;\n\t\t\tvar grip = this._grip;\n\t\t\tvar hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (var i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {\n\t\t\t\t\t\tif (inputSource.hand[i]) {\n\t\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\t\tvar jointPose = frame.getJointPose(inputSource.hand[i], referenceSpace);\n\t\t\t\t\t\t\tvar joint = hand.joints[i];\n\n\t\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tjoint.visible = jointPose !== null; // Custom events\n\t\t\t\t\t\t\t// Check pinch\n\n\t\t\t\t\t\t\tvar indexTip = hand.joints[window.XRHand.INDEX_PHALANX_TIP];\n\t\t\t\t\t\t\tvar thumbTip = hand.joints[window.XRHand.THUMB_PHALANX_TIP];\n\t\t\t\t\t\t\tvar distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\t\t\tvar distanceToPinch = 0.02;\n\t\t\t\t\t\t\tvar threshold = 0.005;\n\n\t\t\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction WebXRManager(renderer, gl) {\n\t\tvar scope = this;\n\t\tvar session = null;\n\t\tvar framebufferScaleFactor = 1.0;\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\t\tvar pose = null;\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map(); //\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable(1);\n\t\tcameraL.viewport = new Vector4();\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable(2);\n\t\tcameraR.viewport = new Vector4();\n\t\tvar cameras = [cameraL, cameraR];\n\t\tvar cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable(1);\n\t\tcameraVR.layers.enable(2);\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null; //\n\n\t\tthis.enabled = false;\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\t\t};\n\n\t\tthis.getControllerGrip = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\t\t};\n\n\t\tthis.getHand = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\t\t}; //\n\n\n\t\tfunction onSessionEvent(event) {\n\t\t\tvar controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\tif (controller) {\n\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\ttype: event.type,\n\t\t\t\t\tdata: event.inputSource\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t});\n\t\t\tinputSourcesMap.clear(); //\n\n\t\t\trenderer.setFramebuffer(null);\n\t\t\trenderer.setRenderTarget(renderer.getRenderTarget()); // Hack #15830\n\n\t\t\tanimation.stop();\n\t\t\tscope.isPresenting = false;\n\t\t\tscope.dispatchEvent({\n\t\t\t\ttype: 'sessionend'\n\t\t\t});\n\t\t}\n\n\t\tfunction onRequestReferenceSpace(value) {\n\t\t\treferenceSpace = value;\n\t\t\tanimation.setContext(session);\n\t\t\tanimation.start();\n\t\t\tscope.isPresenting = true;\n\t\t\tscope.dispatchEvent({\n\t\t\t\ttype: 'sessionstart'\n\t\t\t});\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\t\t\treturn referenceSpace;\n\t\t};\n\n\t\tthis.getSession = function () {\n\t\t\treturn session;\n\t\t};\n\n\t\tthis.setSession = function (value) {\n\t\t\tsession = value;\n\n\t\t\tif (session !== null) {\n\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\t\tif (attributes.xrCompatible !== true) {\n\t\t\t\t\tgl.makeXRCompatible();\n\t\t\t\t}\n\n\t\t\t\tvar layerInit = {\n\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t}; // eslint-disable-next-line no-undef\n\n\t\t\t\tvar baseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\tsession.updateRenderState({\n\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t});\n\t\t\t\tsession.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace); //\n\n\t\t\t\tsession.addEventListener('inputsourceschange', updateInputSources);\n\t\t\t}\n\t\t};\n\n\t\tfunction updateInputSources(event) {\n\t\t\tvar inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\tfor (var i = 0; i < controllers.length; i++) {\n\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t} // Notify disconnected\n\n\n\t\t\tfor (var _i = 0; _i < event.removed.length; _i++) {\n\t\t\t\tvar inputSource = event.removed[_i];\n\t\t\t\tvar controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t});\n\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t}\n\t\t\t} // Notify connected\n\n\n\t\t\tfor (var _i2 = 0; _i2 < event.added.length; _i2++) {\n\t\t\t\tvar _inputSource = event.added[_i2];\n\n\t\t\t\tvar _controller = inputSourcesMap.get(_inputSource);\n\n\t\t\t\tif (_controller) {\n\t\t\t\t\t_controller.dispatchEvent({\n\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\tdata: _inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} //\n\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\n\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\tvar ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\n\t\t\tvar near = projL[14] / (projL[10] - 1);\n\t\t\tvar far = projL[14] / (projL[10] + 1);\n\t\t\tvar topFov = (projL[9] + 1) / projL[5];\n\t\t\tvar bottomFov = (projL[9] - 1) / projL[5];\n\t\t\tvar leftFov = (projL[8] - 1) / projL[0];\n\t\t\tvar rightFov = (projR[8] + 1) / projR[0];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\tvar zOffset = ipd / (-leftFov + rightFov);\n\t\t\tvar xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.translateX(xOffset);\n\t\t\tcamera.translateZ(zOffset);\n\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + (ipd - xOffset);\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t}\n\n\t\tfunction updateCamera(camera, parent) {\n\t\t\tif (parent === null) {\n\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t} else {\n\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t}\n\n\t\tthis.getCamera = function (camera) {\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\tsession.updateRenderState({\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t});\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\tfor (var i = 0; i < cameras.length; i++) {\n\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t} // update camera and its children\n\n\n\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\tvar children = camera.children;\n\n\t\t\tfor (var _i3 = 0, l = children.length; _i3 < l; _i3++) {\n\t\t\t\tchildren[_i3].updateMatrixWorld(true);\n\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\tif (cameras.length === 2) {\n\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t} else {\n\t\t\t\t// assume single camera setup (AR)\n\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tpose = frame.getViewerPose(referenceSpace);\n\n\t\t\tif (pose !== null) {\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\t\t\t\trenderer.setFramebuffer(baseLayer.framebuffer);\n\t\t\t\tvar cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0; i < views.length; i++) {\n\t\t\t\t\tvar view = views[i];\n\t\t\t\t\tvar viewport = baseLayer.getViewport(view);\n\t\t\t\t\tvar camera = cameras[i];\n\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor (var _i4 = 0; _i4 < controllers.length; _i4++) {\n\t\t\t\tvar controller = controllers[_i4];\n\t\t\t\tvar inputSource = inputSources[_i4];\n\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t}\n\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t};\n\n\t\tthis.dispose = function () {};\n\t}\n\n\tObject.assign(WebXRManager.prototype, EventDispatcher.prototype);\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tvar maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n\t\t\tif (material.clearcoatMap) {\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif (material.transmissionMap) {\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tvar canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters) {\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its state isolated from the parent render call.\n\n\t\tvar renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4; // internal properties\n\n\t\tvar _this = this;\n\n\t\tvar _isContextLost = false; // internal state cache\n\n\t\tvar _framebuffer = null;\n\t\tvar _currentActiveCubeFace = 0;\n\t\tvar _currentActiveMipmapLevel = 0;\n\t\tvar _currentRenderTarget = null;\n\t\tvar _currentFramebuffer = null;\n\n\t\tvar _currentMaterialId = -1;\n\n\t\tvar _currentCamera = null;\n\n\t\tvar _currentViewport = new Vector4();\n\n\t\tvar _currentScissor = new Vector4();\n\n\t\tvar _currentScissorTest = null; //\n\n\t\tvar _width = _canvas.width;\n\t\tvar _height = _canvas.height;\n\t\tvar _pixelRatio = 1;\n\t\tvar _opaqueSort = null;\n\t\tvar _transparentSort = null;\n\n\t\tvar _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissorTest = false; // frustum\n\n\t\tvar _frustum = new Frustum(); // clipping\n\n\n\t\tvar _clippingEnabled = false;\n\t\tvar _localClippingEnabled = false; // camera matrices cache\n\n\t\tvar _projScreenMatrix = new Matrix4();\n\n\t\tvar _vector3 = new Vector3();\n\n\t\tvar _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tvar _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (var i = 0; i < contextNames.length; i++) {\n\t\t\t\tvar contextName = contextNames[i];\n\n\t\t\t\tvar context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tvar contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, cubemaps, attributes, geometries, objects;\n\t\tvar programCache, materials, renderLists, renderStates, clipping;\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tvar utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\n\t\t\tif (capabilities.isWebGL2 === false) {\n\t\t\t\textensions.get('WEBGL_depth_texture');\n\t\t\t\textensions.get('OES_texture_float');\n\t\t\t\textensions.get('OES_texture_half_float');\n\t\t\t\textensions.get('OES_texture_half_float_linear');\n\t\t\t\textensions.get('OES_standard_derivatives');\n\t\t\t\textensions.get('OES_element_index_uint');\n\t\t\t\textensions.get('OES_vertex_array_object');\n\t\t\t\textensions.get('ANGLE_instanced_arrays');\n\t\t\t}\n\n\t\t\textensions.get('OES_texture_float_linear');\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tvar xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);\n\t\tthis.shadowMap = shadowMap; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n\t\t\t\ttarget = new Vector4();\n\t\t\t}\n\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');\n\t\t\t\ttarget = new Color();\n\t\t\t}\n\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tvar bits = 0;\n\t\t\tif (color === undefined || color) bits |= 16384;\n\t\t\tif (depth === undefined || depth) bits |= 256;\n\t\t\tif (stencil === undefined || stencil) bits |= 1024;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore()\n\t\t/* event */\n\t\t{\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tinitGLContext();\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tvar material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReference(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReference(material) {\n\t\t\tvar programInfo = properties.get(material).program;\n\n\t\t\tif (programInfo !== undefined) {\n\t\t\t\tprogramCache.releaseProgram(programInfo);\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tvar buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.position);\n\n\t\t\t\t_gl.bufferData(34962, object.positionArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.normal);\n\n\t\t\t\t_gl.bufferData(34962, object.normalArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.uv);\n\n\t\t\t\t_gl.bufferData(34962, object.uvArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv, 2, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.color);\n\n\t\t\t\t_gl.bufferData(34962, object.colorArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(4, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (material.morphTargets || material.morphNormals) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tvar dataCount = index !== null ? index.count : position.count;\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tvar drawStart = Math.max(rangeStart, groupStart);\n\t\t\tvar drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tvar drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(4);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tvar lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(2);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(3);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(0);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(4);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tvar instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tvar compiled = new WeakMap();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tvar material2 = material[i];\n\n\t\t\t\t\t\t\tif (compiled.has(material2) === false) {\n\t\t\t\t\t\t\t\tinitMaterial(material2, scene, object);\n\t\t\t\t\t\t\t\tcompiled.set(material2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (compiled.has(material) === false) {\n\t\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t\t\tcompiled.set(material);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (xr.isPresenting) return;\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t}; // Rendering\n\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif (arguments[2] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n\t\t\t\trenderTarget = arguments[2];\n\t\t\t}\n\n\t\t\tif (arguments[3] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');\n\t\t\t\tforceClear = arguments[3];\n\t\t\t}\n\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // reset caching for this frame\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tcamera = xr.getCamera(camera);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, camera);\n\t\t\tcurrentRenderList.init();\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset();\n\n\t\t\tif (renderTarget !== undefined) {\n\t\t\t\tthis.setRenderTarget(renderTarget);\n\t\t\t} //\n\n\n\t\t\tbackground.render(currentRenderList, scene, camera, forceClear); // render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); //\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget);\n\t\t\t} // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\tcurrentRenderList = null;\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update(object);\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar _geometry = objects.update(object);\n\n\t\t\t\t\t\tvar _material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(_material)) {\n\t\t\t\t\t\t\tvar groups = _geometry.groups;\n\n\t\t\t\t\t\t\tfor (var i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\t\tvar groupMaterial = _material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (_material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, _material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var _i = 0, _l = children.length; _i < _l; _i++) {\n\t\t\t\tprojectObject(children[_i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tvar overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (var i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tvar renderItem = renderList[i];\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif (camera.isArrayCamera) {\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor (var j = 0, jl = cameras.length; j < jl; j++) {\n\t\t\t\t\t\tvar camera2 = cameras[j];\n\n\t\t\t\t\t\tif (object.layers.test(camera2.layers)) {\n\t\t\t\t\t\t\tstate.viewport(_currentViewport.copy(camera2.viewport));\n\t\t\t\t\t\t\tcurrentRenderState.setupLightsView(camera2);\n\t\t\t\t\t\t\trenderObject(object, scene, camera2, geometry, material, group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction initMaterial(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tvar lightsStateVersion = lights.state.version;\n\t\t\tvar parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif (program === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t} else if (program.cacheKey !== programCacheKey) {\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference(material);\n\t\t\t} else if (materialProperties.lightsStateVersion !== lightsStateVersion) {\n\t\t\t\tprogramChange = false;\n\t\t\t} else if (parameters.shaderID !== undefined) {\n\t\t\t\t// same glsl and uniform list, envMap still needs the update here to avoid a frame-late effect\n\t\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || environment);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\t\t\t}\n\n\t\t\tif (programChange) {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tmaterialProperties.numClippingPlanes = clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t}\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment); // store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms();\n\t\t\tvar uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tvar useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.environment !== environment) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\t\t\tvar program = materialProperties.program,\n\t\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (material.skinning) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) {\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t\t\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\t\t\t\t\tvar size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo(size);\n\t\t\t\t\t\t\tsize = Math.max(size, 4);\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\t\t\t\t\tboneMatrices.set(skeleton.boneMatrices); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t} //\n\n\n\t\tthis.setFramebuffer = function (value) {\n\t\t\tif (_framebuffer !== value && _currentRenderTarget === null) _gl.bindFramebuffer(36160, value);\n\t\t\t_framebuffer = value;\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderList = function () {\n\t\t\treturn currentRenderList;\n\t\t};\n\n\t\tthis.setRenderList = function (renderList) {\n\t\t\tcurrentRenderList = renderList;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace, activeMipmapLevel) {\n\t\t\tif (activeCubeFace === void 0) {\n\t\t\t\tactiveCubeFace = 0;\n\t\t\t}\n\n\t\t\tif (activeMipmapLevel === void 0) {\n\t\t\t\tactiveMipmapLevel = 0;\n\t\t\t}\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tvar __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tif (_currentFramebuffer !== framebuffer) {\n\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t_currentFramebuffer = framebuffer;\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t}\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif (framebuffer !== _currentFramebuffer) {\n\t\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t\trestore = true;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.get('OES_texture_float') || extensions.get('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!(textureType === HalfFloatType && (capabilities.isWebGL2 ? extensions.get('EXT_color_buffer_float') : extensions.get('EXT_color_buffer_half_float')))) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(36160) === 36053) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (restore) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, _currentFramebuffer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tvar levelScale = Math.pow(2, -level);\n\t\t\tvar width = Math.floor(texture.image.width * levelScale);\n\t\t\tvar height = Math.floor(texture.image.height * levelScale);\n\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert(dstTexture.format);\n\t\t\tvar glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(37440, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(3553);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tfunction WebGL1Renderer(parameters) {\n\t\tWebGLRenderer.call(this, parameters);\n\t}\n\n\tWebGL1Renderer.prototype = Object.assign(Object.create(WebGLRenderer.prototype), {\n\t\tconstructor: WebGL1Renderer,\n\t\tisWebGL1Renderer: true\n\t});\n\n\tvar FogExp2 = /*#__PURE__*/function () {\n\t\tfunction FogExp2(color, density) {\n\t\t\tObject.defineProperty(this, 'isFogExp2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density !== undefined ? density : 0.00025;\n\t\t}\n\n\t\tvar _proto = FogExp2.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t};\n\n\t\treturn FogExp2;\n\t}();\n\n\tvar Fog = /*#__PURE__*/function () {\n\t\tfunction Fog(color, near, far) {\n\t\t\tObject.defineProperty(this, 'isFog', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near !== undefined ? near : 1;\n\t\t\tthis.far = far !== undefined ? far : 1000;\n\t\t}\n\n\t\tvar _proto = Fog.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t};\n\n\t\treturn Fog;\n\t}();\n\n\tvar Scene = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Scene, _Object3D);\n\n\t\tfunction Scene() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'isScene', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\t_this.type = 'Scene';\n\t\t\t_this.background = null;\n\t\t\t_this.environment = null;\n\t\t\t_this.fog = null;\n\t\t\t_this.overrideMaterial = null;\n\t\t\t_this.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: _assertThisInitialized(_this)\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Scene.prototype;\n\n\t\t_proto.copy = function copy(source, recursive) {\n\t\t\t_Object3D.prototype.copy.call(this, source, recursive);\n\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Object3D.prototype.toJSON.call(this, meta);\n\n\t\t\tif (this.background !== null) data.object.background = this.background.toJSON(meta);\n\t\t\tif (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn Scene;\n\t}(Object3D);\n\n\tfunction InterleavedBuffer(array, stride) {\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t\tthis.uuid = MathUtils.generateUUID();\n\t}\n\n\tObject.defineProperty(InterleavedBuffer.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(InterleavedBuffer.prototype, {\n\t\tisInterleavedBuffer: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (var i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tvar array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tvar ib = new InterleavedBuffer(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\t});\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {\n\t\tthis.name = '';\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\t\tthis.normalized = normalized === true;\n\t}\n\n\tObject.defineProperties(InterleavedBufferAttribute.prototype, {\n\t\tcount: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.count;\n\t\t\t}\n\t\t},\n\t\tarray: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.array;\n\t\t\t}\n\t\t},\n\t\tneedsUpdate: {\n\t\t\tset: function set(value) {\n\t\t\t\tthis.data.needsUpdate = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(InterleavedBufferAttribute.prototype, {\n\t\tisInterleavedBufferAttribute: true,\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'SpriteMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.rotation = 0;\n\t\tthis.sizeAttenuation = true;\n\t\tthis.transparent = true;\n\t\tthis.setValues(parameters);\n\t}\n\n\tSpriteMaterial.prototype = Object.create(Material.prototype);\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.rotation = source.rotation;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\treturn this;\n\t};\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\n\tvar _worldScale = new Vector3();\n\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\n\tvar _rotatedPosition = new Vector2();\n\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\n\tvar _vB$1 = new Vector3();\n\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\n\tvar _uvB$1 = new Vector2();\n\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite(material) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Sprite';\n\n\t\tif (_geometry === undefined) {\n\t\t\t_geometry = new BufferGeometry();\n\t\t\tvar float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\tvar interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = material !== undefined ? material : new SpriteMaterial();\n\t\tthis.center = new Vector2(0.5, 0.5);\n\t}\n\n\tSprite.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Sprite,\n\t\tisSprite: true,\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\t\t\ttransformVertex(_vA$1.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB$1.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC$1.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA$1.set(0, 0);\n\n\t\t\t_uvB$1.set(1, 0);\n\n\t\t\t_uvC$1.set(1, 1); // check first triangle\n\n\n\t\t\tvar intersect = raycaster.ray.intersectTriangle(_vA$1, _vB$1, _vC$1, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB$1.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB$1.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA$1, _vC$1, _vB$1, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tvar _v1$4 = new Vector3();\n\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\t\tObject3D.call(this);\n\t\tthis._currentLevel = 0;\n\t\tthis.type = 'LOD';\n\t\tObject.defineProperties(this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t});\n\t\tthis.autoUpdate = true;\n\t}\n\n\tLOD.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: LOD,\n\t\tisLOD: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source, false);\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t},\n\t\taddLevel: function addLevel(object, distance) {\n\t\t\tif (distance === void 0) {\n\t\t\t\tdistance = 0;\n\t\t\t}\n\n\t\t\tdistance = Math.abs(distance);\n\t\t\tvar levels = this.levels;\n\t\t\tvar l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t},\n\t\tgetCurrentLevel: function getCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t},\n\t\tgetObjectForDistance: function getObjectForDistance(distance) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$4.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(_v1$4);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t},\n\t\tupdate: function update(camera) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$4.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = _v1$4.distanceTo(_v2$2) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar _basePosition = new Vector3();\n\n\tvar _skinIndex = new Vector4();\n\n\tvar _skinWeight = new Vector4();\n\n\tvar _vector$7 = new Vector3();\n\n\tvar _matrix$1 = new Matrix4();\n\n\tfunction SkinnedMesh(geometry, material) {\n\t\tif (geometry && geometry.isGeometry) {\n\t\t\tconsole.error('THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t}\n\n\t\tMesh.call(this, geometry, material);\n\t\tthis.type = 'SkinnedMesh';\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\t}\n\n\tSkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: SkinnedMesh,\n\t\tisSkinnedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t},\n\t\tbind: function bind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t},\n\t\tpose: function pose() {\n\t\t\tthis.skeleton.pose();\n\t\t},\n\t\tnormalizeSkinWeights: function normalizeSkinWeights() {\n\t\t\tvar vector = new Vector4();\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (var i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tMesh.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t},\n\t\tboneTransform: function boneTransform(index, target) {\n\t\t\tvar skeleton = this.skeleton;\n\t\t\tvar geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\tvar weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tvar boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix$1.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$7.copy(_basePosition).applyMatrix4(_matrix$1), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\t});\n\n\tfunction Bone() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Bone';\n\t}\n\n\tBone.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Bone,\n\t\tisBone: true\n\t});\n\n\tvar _offsetMatrix = new Matrix4();\n\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton(bones, boneInverses) {\n\t\tif (bones === void 0) {\n\t\t\tbones = [];\n\t\t}\n\n\t\tif (boneInverses === void 0) {\n\t\t\tboneInverses = [];\n\t\t}\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.bones = bones.slice(0);\n\t\tthis.boneInverses = boneInverses;\n\t\tthis.boneMatrices = null;\n\t\tthis.boneTexture = null;\n\t\tthis.boneTextureSize = 0;\n\t\tthis.frame = -1;\n\t\tthis.init();\n\t}\n\n\tObject.assign(Skeleton.prototype, {\n\t\tinit: function init() {\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcalculateInverses: function calculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t},\n\t\tpose: function pose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (var _i = 0, _il = this.bones.length; _i < _il; _i++) {\n\t\t\t\tvar _bone = this.bones[_i];\n\n\t\t\t\tif (_bone) {\n\t\t\t\t\tif (_bone.parent && _bone.parent.isBone) {\n\t\t\t\t\t\t_bone.matrix.copy(_bone.parent.matrixWorld).invert();\n\n\t\t\t\t\t\t_bone.matrix.multiply(_bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_bone.matrix.copy(_bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\t_bone.matrix.decompose(_bone.position, _bone.quaternion, _bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdate: function update() {\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (var i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tvar matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t},\n\t\tgetBoneByName: function getBoneByName(name) {\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t},\n\t\tfromJSON: function fromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (var i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tvar uuid = json.bones[i];\n\t\t\t\tvar bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\n\t\t\tfor (var i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tvar bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tvar boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh(geometry, material, count) {\n\t\tMesh.call(this, geometry, material);\n\t\tthis.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\n\t\tthis.instanceColor = null;\n\t\tthis.count = count;\n\t\tthis.frustumCulled = false;\n\t}\n\n\tInstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: InstancedMesh,\n\t\tisInstancedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t},\n\t\tgetColorAt: function getColorAt(index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tgetMatrixAt: function getMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (var instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (var i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tvar intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t},\n\t\tsetColorAt: function setColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tsetMatrixAt: function setMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'LineBasicMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tLineBasicMaterial.prototype = Object.create(Material.prototype);\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _start = new Vector3();\n\n\tvar _end = new Vector3();\n\n\tvar _inverseMatrix$1 = new Matrix4();\n\n\tvar _ray$1 = new Ray();\n\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new LineBasicMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Line';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tLine.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Line,\n\t\tisLine: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [0];\n\n\t\t\t\t\tfor (var i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar _lineDistances = geometry.lineDistances;\n\t\t\t\t_lineDistances[0] = 0;\n\n\t\t\t\tfor (var _i = 1, _l = vertices.length; _i < _l; _i++) {\n\t\t\t\t\t_lineDistances[_i] = _lineDistances[_i - 1];\n\t\t\t\t\t_lineDistances[_i] += vertices[_i - 1].distanceTo(vertices[_i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$2.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$2.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$2) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, l = indices.length - 1; i < l; i += step) {\n\t\t\t\t\t\tvar a = indices[i];\n\t\t\t\t\t\tvar b = indices[i + 1];\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i2 = 0, _l2 = positionAttribute.count - 1; _i2 < _l2; _i2 += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, _i2);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, _i2 + 1);\n\n\t\t\t\t\t\tvar _distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (_distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar _distance = raycaster.ray.origin.distanceTo(interRay);\n\n\t\t\t\t\t\tif (_distance < raycaster.near || _distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: _distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: _i2,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor (var _i3 = 0; _i3 < nbVertices - 1; _i3 += step) {\n\t\t\t\t\tvar _distSq2 = _ray$1.distanceSqToSegment(vertices[_i3], vertices[_i3 + 1], interRay, interSegment);\n\n\t\t\t\t\tif (_distSq2 > localThresholdSq) continue;\n\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar _distance2 = raycaster.ray.origin.distanceTo(interRay);\n\n\t\t\t\t\tif (_distance2 < raycaster.near || _distance2 > raycaster.far) continue;\n\t\t\t\t\tintersects.push({\n\t\t\t\t\t\tdistance: _distance2,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\tindex: _i3,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _start$1 = new Vector3();\n\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments(geometry, material) {\n\t\tLine.call(this, geometry, material);\n\t\tthis.type = 'LineSegments';\n\t}\n\n\tLineSegments.prototype = Object.assign(Object.create(Line.prototype), {\n\t\tconstructor: LineSegments,\n\t\tisLineSegments: true,\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor (var i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar _lineDistances = geometry.lineDistances;\n\n\t\t\t\tfor (var _i = 0, _l = vertices.length; _i < _l; _i += 2) {\n\t\t\t\t\t_start$1.copy(vertices[_i]);\n\n\t\t\t\t\t_end$1.copy(vertices[_i + 1]);\n\n\t\t\t\t\t_lineDistances[_i] = _i === 0 ? 0 : _lineDistances[_i - 1];\n\t\t\t\t\t_lineDistances[_i + 1] = _lineDistances[_i] + _start$1.distanceTo(_end$1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction LineLoop(geometry, material) {\n\t\tLine.call(this, geometry, material);\n\t\tthis.type = 'LineLoop';\n\t}\n\n\tLineLoop.prototype = Object.assign(Object.create(Line.prototype), {\n\t\tconstructor: LineLoop,\n\t\tisLineLoop: true\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'PointsMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tPointsMaterial.prototype = Object.create(Material.prototype);\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\n\tvar _ray$2 = new Ray();\n\n\tvar _sphere$3 = new Sphere();\n\n\tvar _position$1 = new Vector3();\n\n\tfunction Points(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new PointsMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Points';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tPoints.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Points,\n\t\tisPoints: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$3.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, il = indices.length; i < il; i++) {\n\t\t\t\t\t\tvar a = indices[i];\n\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i = 0, l = positionAttribute.count; _i < l; _i++) {\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, _i);\n\n\t\t\t\t\t\ttestPoint(_position$1, _i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor (var _i2 = 0, _l = vertices.length; _i2 < _l; _i2++) {\n\t\t\t\t\ttestPoint(vertices[_i2], _i2, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\tTexture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.generateMipmaps = false;\n\t\tvar scope = this;\n\n\t\tfunction updateVideo() {\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t}\n\n\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t}\n\t}\n\n\tVideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {\n\t\tconstructor: VideoTexture,\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t},\n\t\tisVideoTexture: true,\n\t\tupdate: function update() {\n\t\t\tvar video = this.image;\n\t\t\tvar hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.image = {\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t\tthis.mipmaps = mipmaps; // no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false; // can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\t}\n\n\tCompressedTexture.prototype = Object.create(Texture.prototype);\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tfunction CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\tTexture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.needsUpdate = true;\n\t}\n\n\tCanvasTexture.prototype = Object.create(Texture.prototype);\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tfunction DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t}\n\n\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.image = {\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps = false;\n\t}\n\n\tDepthTexture.prototype = Object.create(Texture.prototype);\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\n\tvar _m1$3 = new Matrix4();\n\n\tvar _obj$1 = new Object3D();\n\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _geometryId += 2\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\t\tthis.lineDistances = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null; // update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\t}\n\n\tGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Geometry,\n\t\tisGeometry: true,\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\n\t\t\tfor (var i = 0, il = this.vertices.length; i < il; i++) {\n\t\t\t\tvar vertex = this.vertices[i];\n\t\t\t\tvertex.applyMatrix4(matrix);\n\t\t\t}\n\n\t\t\tfor (var _i = 0, _il = this.faces.length; _i < _il; _i++) {\n\t\t\t\tvar face = this.faces[_i];\n\t\t\t\tface.normal.applyMatrix3(normalMatrix).normalize();\n\n\t\t\t\tfor (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n\t\t\t\t\tface.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1$3.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1$3);\n\t\t\treturn this;\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1$3.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1$3);\n\t\t\treturn this;\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1$3.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1$3);\n\t\t\treturn this;\n\t\t},\n\t\ttranslate: function translate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1$3.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$3);\n\t\t\treturn this;\n\t\t},\n\t\tscale: function scale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1$3.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$3);\n\t\t\treturn this;\n\t\t},\n\t\tlookAt: function lookAt(vector) {\n\t\t\t_obj$1.lookAt(vector);\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj$1.matrix);\n\t\t\treturn this;\n\t\t},\n\t\tfromBufferGeometry: function fromBufferGeometry(geometry) {\n\t\t\tvar scope = this;\n\t\t\tvar index = geometry.index !== null ? geometry.index : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif (attributes.position === undefined) {\n\t\t\t\tconsole.error('THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar position = attributes.position;\n\t\t\tvar normal = attributes.normal;\n\t\t\tvar color = attributes.color;\n\t\t\tvar uv = attributes.uv;\n\t\t\tvar uv2 = attributes.uv2;\n\t\t\tif (uv2 !== undefined) this.faceVertexUvs[1] = [];\n\n\t\t\tfor (var i = 0; i < position.count; i++) {\n\t\t\t\tscope.vertices.push(new Vector3().fromBufferAttribute(position, i));\n\n\t\t\t\tif (color !== undefined) {\n\t\t\t\t\tscope.colors.push(new Color().fromBufferAttribute(color, i));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction addFace(a, b, c, materialIndex) {\n\t\t\t\tvar vertexColors = color === undefined ? [] : [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()];\n\t\t\t\tvar vertexNormals = normal === undefined ? [] : [new Vector3().fromBufferAttribute(normal, a), new Vector3().fromBufferAttribute(normal, b), new Vector3().fromBufferAttribute(normal, c)];\n\t\t\t\tvar face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n\t\t\t\tscope.faces.push(face);\n\n\t\t\t\tif (uv !== undefined) {\n\t\t\t\t\tscope.faceVertexUvs[0].push([new Vector2().fromBufferAttribute(uv, a), new Vector2().fromBufferAttribute(uv, b), new Vector2().fromBufferAttribute(uv, c)]);\n\t\t\t\t}\n\n\t\t\t\tif (uv2 !== undefined) {\n\t\t\t\t\tscope.faceVertexUvs[1].push([new Vector2().fromBufferAttribute(uv2, a), new Vector2().fromBufferAttribute(uv2, b), new Vector2().fromBufferAttribute(uv2, c)]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tfor (var _i2 = 0; _i2 < groups.length; _i2++) {\n\t\t\t\t\tvar group = groups[_i2];\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor (var j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\t\tif (index !== undefined) {\n\t\t\t\t\t\t\taddFace(index.getX(j), index.getX(j + 1), index.getX(j + 2), group.materialIndex);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\taddFace(j, j + 1, j + 2, group.materialIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tfor (var _i3 = 0; _i3 < index.count; _i3 += 3) {\n\t\t\t\t\t\taddFace(index.getX(_i3), index.getX(_i3 + 1), index.getX(_i3 + 2));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i4 = 0; _i4 < position.count; _i4 += 3) {\n\t\t\t\t\t\taddFace(_i4, _i4 + 1, _i4 + 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\t\t}\n\n\t\t\tif (geometry.boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcenter: function center() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset$1).negate();\n\t\t\tthis.translate(_offset$1.x, _offset$1.y, _offset$1.z);\n\t\t\treturn this;\n\t\t},\n\t\tnormalize: function normalize() {\n\t\t\tthis.computeBoundingSphere();\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n\t\t\tthis.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t},\n\t\tcomputeFaceNormals: function computeFaceNormals() {\n\t\t\tvar cb = new Vector3(),\n\t\t\t\t\tab = new Vector3();\n\n\t\t\tfor (var f = 0, fl = this.faces.length; f < fl; f++) {\n\t\t\t\tvar face = this.faces[f];\n\t\t\t\tvar vA = this.vertices[face.a];\n\t\t\t\tvar vB = this.vertices[face.b];\n\t\t\t\tvar vC = this.vertices[face.c];\n\t\t\t\tcb.subVectors(vC, vB);\n\t\t\t\tab.subVectors(vA, vB);\n\t\t\t\tcb.cross(ab);\n\t\t\t\tcb.normalize();\n\t\t\t\tface.normal.copy(cb);\n\t\t\t}\n\t\t},\n\t\tcomputeVertexNormals: function computeVertexNormals(areaWeighted) {\n\t\t\tif (areaWeighted === void 0) {\n\t\t\t\tareaWeighted = true;\n\t\t\t}\n\n\t\t\tvar vertices = new Array(this.vertices.length);\n\n\t\t\tfor (var v = 0, vl = this.vertices.length; v < vl; v++) {\n\t\t\t\tvertices[v] = new Vector3();\n\t\t\t}\n\n\t\t\tif (areaWeighted) {\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\t\t\t\tvar cb = new Vector3(),\n\t\t\t\t\t\tab = new Vector3();\n\n\t\t\t\tfor (var f = 0, fl = this.faces.length; f < fl; f++) {\n\t\t\t\t\tvar face = this.faces[f];\n\t\t\t\t\tvar vA = this.vertices[face.a];\n\t\t\t\t\tvar vB = this.vertices[face.b];\n\t\t\t\t\tvar vC = this.vertices[face.c];\n\t\t\t\t\tcb.subVectors(vC, vB);\n\t\t\t\t\tab.subVectors(vA, vB);\n\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\tvertices[face.a].add(cb);\n\t\t\t\t\tvertices[face.b].add(cb);\n\t\t\t\t\tvertices[face.c].add(cb);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor (var _f = 0, _fl = this.faces.length; _f < _fl; _f++) {\n\t\t\t\t\tvar _face = this.faces[_f];\n\n\t\t\t\t\tvertices[_face.a].add(_face.normal);\n\n\t\t\t\t\tvertices[_face.b].add(_face.normal);\n\n\t\t\t\t\tvertices[_face.c].add(_face.normal);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _v = 0, _vl = this.vertices.length; _v < _vl; _v++) {\n\t\t\t\tvertices[_v].normalize();\n\t\t\t}\n\n\t\t\tfor (var _f2 = 0, _fl2 = this.faces.length; _f2 < _fl2; _f2++) {\n\t\t\t\tvar _face2 = this.faces[_f2];\n\t\t\t\tvar vertexNormals = _face2.vertexNormals;\n\n\t\t\t\tif (vertexNormals.length === 3) {\n\t\t\t\t\tvertexNormals[0].copy(vertices[_face2.a]);\n\t\t\t\t\tvertexNormals[1].copy(vertices[_face2.b]);\n\t\t\t\t\tvertexNormals[2].copy(vertices[_face2.c]);\n\t\t\t\t} else {\n\t\t\t\t\tvertexNormals[0] = vertices[_face2.a].clone();\n\t\t\t\t\tvertexNormals[1] = vertices[_face2.b].clone();\n\t\t\t\t\tvertexNormals[2] = vertices[_face2.c].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.faces.length > 0) {\n\t\t\t\tthis.normalsNeedUpdate = true;\n\t\t\t}\n\t\t},\n\t\tcomputeFlatVertexNormals: function computeFlatVertexNormals() {\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor (var f = 0, fl = this.faces.length; f < fl; f++) {\n\t\t\t\tvar face = this.faces[f];\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif (vertexNormals.length === 3) {\n\t\t\t\t\tvertexNormals[0].copy(face.normal);\n\t\t\t\t\tvertexNormals[1].copy(face.normal);\n\t\t\t\t\tvertexNormals[2].copy(face.normal);\n\t\t\t\t} else {\n\t\t\t\t\tvertexNormals[0] = face.normal.clone();\n\t\t\t\t\tvertexNormals[1] = face.normal.clone();\n\t\t\t\t\tvertexNormals[2] = face.normal.clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.faces.length > 0) {\n\t\t\t\tthis.normalsNeedUpdate = true;\n\t\t\t}\n\t\t},\n\t\tcomputeMorphNormals: function computeMorphNormals() {\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//\t otherwise just copy (for faster repeated calls)\n\t\t\tfor (var f = 0, fl = this.faces.length; f < fl; f++) {\n\t\t\t\tvar face = this.faces[f];\n\n\t\t\t\tif (!face.__originalFaceNormal) {\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\t\t\t\t} else {\n\t\t\t\t\tface.__originalFaceNormal.copy(face.normal);\n\t\t\t\t}\n\n\t\t\t\tif (!face.__originalVertexNormals) face.__originalVertexNormals = [];\n\n\t\t\t\tfor (var i = 0, il = face.vertexNormals.length; i < il; i++) {\n\t\t\t\t\tif (!face.__originalVertexNormals[i]) {\n\t\t\t\t\t\tface.__originalVertexNormals[i] = face.vertexNormals[i].clone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tface.__originalVertexNormals[i].copy(face.vertexNormals[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // use temp geometry to compute face and vertex normals for each morph\n\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor (var _i5 = 0, _il2 = this.morphTargets.length; _i5 < _il2; _i5++) {\n\t\t\t\t// create on first access\n\t\t\t\tif (!this.morphNormals[_i5]) {\n\t\t\t\t\tthis.morphNormals[_i5] = {};\n\t\t\t\t\tthis.morphNormals[_i5].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[_i5].vertexNormals = [];\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[_i5].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[_i5].vertexNormals;\n\n\t\t\t\t\tfor (var _f3 = 0, _fl3 = this.faces.length; _f3 < _fl3; _f3++) {\n\t\t\t\t\t\tvar faceNormal = new Vector3();\n\t\t\t\t\t\tvar vertexNormals = {\n\t\t\t\t\t\t\ta: new Vector3(),\n\t\t\t\t\t\t\tb: new Vector3(),\n\t\t\t\t\t\t\tc: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tdstNormalsFace.push(faceNormal);\n\t\t\t\t\t\tdstNormalsVertex.push(vertexNormals);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[_i5]; // set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[_i5].vertices; // compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals(); // store morph normals\n\n\t\t\t\tfor (var _f4 = 0, _fl4 = this.faces.length; _f4 < _fl4; _f4++) {\n\t\t\t\t\tvar _face3 = this.faces[_f4];\n\t\t\t\t\tvar _faceNormal = morphNormals.faceNormals[_f4];\n\t\t\t\t\tvar _vertexNormals = morphNormals.vertexNormals[_f4];\n\n\t\t\t\t\t_faceNormal.copy(_face3.normal);\n\n\t\t\t\t\t_vertexNormals.a.copy(_face3.vertexNormals[0]);\n\n\t\t\t\t\t_vertexNormals.b.copy(_face3.vertexNormals[1]);\n\n\t\t\t\t\t_vertexNormals.c.copy(_face3.vertexNormals[2]);\n\t\t\t\t}\n\t\t\t} // restore original normals\n\n\n\t\t\tfor (var _f5 = 0, _fl5 = this.faces.length; _f5 < _fl5; _f5++) {\n\t\t\t\tvar _face4 = this.faces[_f5];\n\t\t\t\t_face4.normal = _face4.__originalFaceNormal;\n\t\t\t\t_face4.vertexNormals = _face4.__originalVertexNormals;\n\t\t\t}\n\t\t},\n\t\tcomputeBoundingBox: function computeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints(this.vertices);\n\t\t},\n\t\tcomputeBoundingSphere: function computeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints(this.vertices);\n\t\t},\n\t\tmerge: function merge(geometry, matrix, materialIndexOffset) {\n\t\t\tif (materialIndexOffset === void 0) {\n\t\t\t\tmaterialIndexOffset = 0;\n\t\t\t}\n\n\t\t\tif (!(geometry && geometry.isGeometry)) {\n\t\t\t\tconsole.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar normalMatrix;\n\t\t\tvar vertexOffset = this.vertices.length,\n\t\t\t\t\tvertices1 = this.vertices,\n\t\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\t\tfaces1 = this.faces,\n\t\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\t\tcolors1 = this.colors,\n\t\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif (matrix !== undefined) {\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t} // vertices\n\n\n\t\t\tfor (var i = 0, il = vertices2.length; i < il; i++) {\n\t\t\t\tvar vertex = vertices2[i];\n\t\t\t\tvar vertexCopy = vertex.clone();\n\t\t\t\tif (matrix !== undefined) vertexCopy.applyMatrix4(matrix);\n\t\t\t\tvertices1.push(vertexCopy);\n\t\t\t} // colors\n\n\n\t\t\tfor (var _i6 = 0, _il3 = colors2.length; _i6 < _il3; _i6++) {\n\t\t\t\tcolors1.push(colors2[_i6].clone());\n\t\t\t} // faces\n\n\n\t\t\tfor (var _i7 = 0, _il4 = faces2.length; _i7 < _il4; _i7++) {\n\t\t\t\tvar face = faces2[_i7];\n\t\t\t\tvar normal = void 0,\n\t\t\t\t\t\tcolor = void 0;\n\t\t\t\tvar faceVertexNormals = face.vertexNormals,\n\t\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\t\t\t\tvar faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);\n\t\t\t\tfaceCopy.normal.copy(face.normal);\n\n\t\t\t\tif (normalMatrix !== undefined) {\n\t\t\t\t\tfaceCopy.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\t\t}\n\n\t\t\t\tfor (var j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n\t\t\t\t\tnormal = faceVertexNormals[j].clone();\n\n\t\t\t\t\tif (normalMatrix !== undefined) {\n\t\t\t\t\t\tnormal.applyMatrix3(normalMatrix).normalize();\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push(normal);\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy(face.color);\n\n\t\t\t\tfor (var _j = 0, _jl = faceVertexColors.length; _j < _jl; _j++) {\n\t\t\t\t\tcolor = faceVertexColors[_j];\n\t\t\t\t\tfaceCopy.vertexColors.push(color.clone());\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\t\t\t\tfaces1.push(faceCopy);\n\t\t\t} // uvs\n\n\n\t\t\tfor (var _i8 = 0, _il5 = geometry.faceVertexUvs.length; _i8 < _il5; _i8++) {\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[_i8];\n\t\t\t\tif (this.faceVertexUvs[_i8] === undefined) this.faceVertexUvs[_i8] = [];\n\n\t\t\t\tfor (var _j2 = 0, _jl2 = faceVertexUvs2.length; _j2 < _jl2; _j2++) {\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[_j2],\n\t\t\t\t\t\t\tuvsCopy = [];\n\n\t\t\t\t\tfor (var k = 0, kl = uvs2.length; k < kl; k++) {\n\t\t\t\t\t\tuvsCopy.push(uvs2[k].clone());\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[_i8].push(uvsCopy);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmergeMesh: function mergeMesh(mesh) {\n\t\t\tif (!(mesh && mesh.isMesh)) {\n\t\t\t\tconsole.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (mesh.matrixAutoUpdate) mesh.updateMatrix();\n\t\t\tthis.merge(mesh.geometry, mesh.matrix);\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\t\tmergeVertices: function mergeVertices(precisionPoints) {\n\t\t\tif (precisionPoints === void 0) {\n\t\t\t\tprecisionPoints = 4;\n\t\t\t}\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\n\t\t\tvar unique = [],\n\t\t\t\t\tchanges = [];\n\t\t\tvar precision = Math.pow(10, precisionPoints);\n\n\t\t\tfor (var i = 0, il = this.vertices.length; i < il; i++) {\n\t\t\t\tvar v = this.vertices[i];\n\t\t\t\tvar key = Math.round(v.x * precision) + '_' + Math.round(v.y * precision) + '_' + Math.round(v.z * precision);\n\n\t\t\t\tif (verticesMap[key] === undefined) {\n\t\t\t\t\tverticesMap[key] = i;\n\t\t\t\t\tunique.push(this.vertices[i]);\n\t\t\t\t\tchanges[i] = unique.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[i] = changes[verticesMap[key]];\n\t\t\t\t}\n\t\t\t} // if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\n\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor (var _i9 = 0, _il6 = this.faces.length; _i9 < _il6; _i9++) {\n\t\t\t\tvar face = this.faces[_i9];\n\t\t\t\tface.a = changes[face.a];\n\t\t\t\tface.b = changes[face.b];\n\t\t\t\tface.c = changes[face.c];\n\t\t\t\tvar indices = [face.a, face.b, face.c]; // if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\n\t\t\t\tfor (var n = 0; n < 3; n++) {\n\t\t\t\t\tif (indices[n] === indices[(n + 1) % 3]) {\n\t\t\t\t\t\tfaceIndicesToRemove.push(_i9);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _i10 = faceIndicesToRemove.length - 1; _i10 >= 0; _i10--) {\n\t\t\t\tvar idx = faceIndicesToRemove[_i10];\n\t\t\t\tthis.faces.splice(idx, 1);\n\n\t\t\t\tfor (var j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n\t\t\t\t\tthis.faceVertexUvs[j].splice(idx, 1);\n\t\t\t\t}\n\t\t\t} // Use unique set of vertices\n\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\t\t},\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tthis.vertices = [];\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tvar point = points[i];\n\t\t\t\tthis.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsortFacesByMaterialIndex: function sortFacesByMaterialIndex() {\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length; // tag faces\n\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tfaces[i]._id = i;\n\t\t\t} // sort faces\n\n\n\t\t\tfunction materialIndexSort(a, b) {\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\t\t\t}\n\n\t\t\tfaces.sort(materialIndexSort); // sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[0];\n\t\t\tvar uvs2 = this.faceVertexUvs[1];\n\t\t\tvar newUvs1, newUvs2;\n\t\t\tif (uvs1 && uvs1.length === length) newUvs1 = [];\n\t\t\tif (uvs2 && uvs2.length === length) newUvs2 = [];\n\n\t\t\tfor (var _i11 = 0; _i11 < length; _i11++) {\n\t\t\t\tvar id = faces[_i11]._id;\n\t\t\t\tif (newUvs1) newUvs1.push(uvs1[id]);\n\t\t\t\tif (newUvs2) newUvs2.push(uvs2[id]);\n\t\t\t}\n\n\t\t\tif (newUvs1) this.faceVertexUvs[0] = newUvs1;\n\t\t\tif (newUvs2) this.faceVertexUvs[1] = newUvs2;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor (var key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor (var i = 0; i < this.vertices.length; i++) {\n\t\t\t\tvar vertex = this.vertices[i];\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor (var _i12 = 0; _i12 < this.faces.length; _i12++) {\n\t\t\t\tvar face = this.faces[_i12];\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[0][_i12] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\t\t\t\tvar faceType = 0;\n\t\t\t\tfaceType = setBit(faceType, 0, 0); // isQuad\n\n\t\t\t\tfaceType = setBit(faceType, 1, hasMaterial);\n\t\t\t\tfaceType = setBit(faceType, 2, hasFaceUv);\n\t\t\t\tfaceType = setBit(faceType, 3, hasFaceVertexUv);\n\t\t\t\tfaceType = setBit(faceType, 4, hasFaceNormal);\n\t\t\t\tfaceType = setBit(faceType, 5, hasFaceVertexNormal);\n\t\t\t\tfaceType = setBit(faceType, 6, hasFaceColor);\n\t\t\t\tfaceType = setBit(faceType, 7, hasFaceVertexColor);\n\t\t\t\tfaces.push(faceType);\n\t\t\t\tfaces.push(face.a, face.b, face.c);\n\t\t\t\tfaces.push(face.materialIndex);\n\n\t\t\t\tif (hasFaceVertexUv) {\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[0][_i12];\n\t\t\t\t\tfaces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceNormal) {\n\t\t\t\t\tfaces.push(getNormalIndex(face.normal));\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceVertexNormal) {\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\t\t\t\tfaces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceColor) {\n\t\t\t\t\tfaces.push(getColorIndex(face.color));\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceVertexColor) {\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\t\t\t\t\tfaces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction setBit(value, position, enabled) {\n\t\t\t\treturn enabled ? value | 1 << position : value & ~(1 << position);\n\t\t\t}\n\n\t\t\tfunction getNormalIndex(normal) {\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif (normalsHash[hash] !== undefined) {\n\t\t\t\t\treturn normalsHash[hash];\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[hash] = normals.length / 3;\n\t\t\t\tnormals.push(normal.x, normal.y, normal.z);\n\t\t\t\treturn normalsHash[hash];\n\t\t\t}\n\n\t\t\tfunction getColorIndex(color) {\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif (colorsHash[hash] !== undefined) {\n\t\t\t\t\treturn colorsHash[hash];\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[hash] = colors.length;\n\t\t\t\tcolors.push(color.getHex());\n\t\t\t\treturn colorsHash[hash];\n\t\t\t}\n\n\t\t\tfunction getUvIndex(uv) {\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif (uvsHash[hash] !== undefined) {\n\t\t\t\t\treturn uvsHash[hash];\n\t\t\t\t}\n\n\t\t\t\tuvsHash[hash] = uvs.length / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\treturn uvsHash[hash];\n\t\t\t}\n\n\t\t\tdata.data = {};\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif (colors.length > 0) data.data.colors = colors;\n\t\t\tif (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility\n\n\t\t\tdata.data.faces = faces;\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new Geometry().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\t// reset\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // name\n\n\t\t\tthis.name = source.name; // vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor (var i = 0, il = vertices.length; i < il; i++) {\n\t\t\t\tthis.vertices.push(vertices[i].clone());\n\t\t\t} // colors\n\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor (var _i13 = 0, _il7 = colors.length; _i13 < _il7; _i13++) {\n\t\t\t\tthis.colors.push(colors[_i13].clone());\n\t\t\t} // faces\n\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor (var _i14 = 0, _il8 = faces.length; _i14 < _il8; _i14++) {\n\t\t\t\tthis.faces.push(faces[_i14].clone());\n\t\t\t} // face vertex uvs\n\n\n\t\t\tfor (var _i15 = 0, _il9 = source.faceVertexUvs.length; _i15 < _il9; _i15++) {\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[_i15];\n\n\t\t\t\tif (this.faceVertexUvs[_i15] === undefined) {\n\t\t\t\t\tthis.faceVertexUvs[_i15] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n\t\t\t\t\tvar uvs = faceVertexUvs[j],\n\t\t\t\t\t\t\tuvsCopy = [];\n\n\t\t\t\t\tfor (var k = 0, kl = uvs.length; k < kl; k++) {\n\t\t\t\t\t\tvar uv = uvs[k];\n\t\t\t\t\t\tuvsCopy.push(uv.clone());\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[_i15].push(uvsCopy);\n\t\t\t\t}\n\t\t\t} // morph targets\n\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor (var _i16 = 0, _il10 = morphTargets.length; _i16 < _il10; _i16++) {\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[_i16].name; // vertices\n\n\t\t\t\tif (morphTargets[_i16].vertices !== undefined) {\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor (var _j3 = 0, _jl3 = morphTargets[_i16].vertices.length; _j3 < _jl3; _j3++) {\n\t\t\t\t\t\tmorphTarget.vertices.push(morphTargets[_i16].vertices[_j3].clone());\n\t\t\t\t\t}\n\t\t\t\t} // normals\n\n\n\t\t\t\tif (morphTargets[_i16].normals !== undefined) {\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor (var _j4 = 0, _jl4 = morphTargets[_i16].normals.length; _j4 < _jl4; _j4++) {\n\t\t\t\t\t\tmorphTarget.normals.push(morphTargets[_i16].normals[_j4].clone());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push(morphTarget);\n\t\t\t} // morph normals\n\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor (var _i17 = 0, _il11 = morphNormals.length; _i17 < _il11; _i17++) {\n\t\t\t\tvar morphNormal = {}; // vertex normals\n\n\t\t\t\tif (morphNormals[_i17].vertexNormals !== undefined) {\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor (var _j5 = 0, _jl5 = morphNormals[_i17].vertexNormals.length; _j5 < _jl5; _j5++) {\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[_i17].vertexNormals[_j5];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\t\t\t\t\t\tmorphNormal.vertexNormals.push(destVertexNormal);\n\t\t\t\t\t}\n\t\t\t\t} // face normals\n\n\n\t\t\t\tif (morphNormals[_i17].faceNormals !== undefined) {\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor (var _j6 = 0, _jl6 = morphNormals[_i17].faceNormals.length; _j6 < _jl6; _j6++) {\n\t\t\t\t\t\tmorphNormal.faceNormals.push(morphNormals[_i17].faceNormals[_j6].clone());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push(morphNormal);\n\t\t\t} // skin weights\n\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor (var _i18 = 0, _il12 = skinWeights.length; _i18 < _il12; _i18++) {\n\t\t\t\tthis.skinWeights.push(skinWeights[_i18].clone());\n\t\t\t} // skin indices\n\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor (var _i19 = 0, _il13 = skinIndices.length; _i19 < _il13; _i19++) {\n\t\t\t\tthis.skinIndices.push(skinIndices[_i19].clone());\n\t\t\t} // line distances\n\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor (var _i20 = 0, _il14 = lineDistances.length; _i20 < _il14; _i20++) {\n\t\t\t\tthis.lineDistances.push(lineDistances[_i20]);\n\t\t\t} // bounding box\n\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // update flags\n\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\tvar BoxGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(BoxGeometry, _Geometry);\n\n\t\tfunction BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'BoxGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn BoxGeometry;\n\t}(Geometry);\n\n\tvar CircleBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CircleBufferGeometry, _BufferGeometry);\n\n\t\tfunction CircleBufferGeometry(radius, segments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (segments === void 0) {\n\t\t\t\tsegments = 8;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CircleBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (var s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tvar segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tindices.push(_i, _i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CircleBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar CircleGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(CircleGeometry, _Geometry);\n\n\t\tfunction CircleGeometry(radius, segments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'CircleGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CircleGeometry;\n\t}(Geometry);\n\n\tvar CylinderBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CylinderBufferGeometry, _BufferGeometry);\n\n\t\tfunction CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radiusTop === void 0) {\n\t\t\t\tradiusTop = 1;\n\t\t\t}\n\n\t\t\tif (radiusBottom === void 0) {\n\t\t\t\tradiusBottom = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (openEnded === void 0) {\n\t\t\t\topenEnded = false;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CylinderBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar index = 0;\n\t\t\tvar indexArray = [];\n\t\t\tvar halfHeight = height / 2;\n\t\t\tvar groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tvar normal = new Vector3();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tvar slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (var y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tvar indexRow = [];\n\t\t\t\t\tvar v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tvar radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (var x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tvar u = x / radialSegments;\n\t\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tvar sinTheta = Math.sin(theta);\n\t\t\t\t\t\tvar cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x = 0; _x < radialSegments; _x++) {\n\t\t\t\t\tfor (var _y = 0; _y < heightSegments; _y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tvar a = indexArray[_y][_x];\n\t\t\t\t\t\tvar b = indexArray[_y + 1][_x];\n\t\t\t\t\t\tvar c = indexArray[_y + 1][_x + 1];\n\t\t\t\t\t\tvar d = indexArray[_y][_x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tvar centerIndexStart = index;\n\t\t\t\tvar uv = new Vector2();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tvar sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (var x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tvar centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (var _x2 = 0; _x2 <= radialSegments; _x2++) {\n\t\t\t\t\tvar u = _x2 / radialSegments;\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\tvar cosTheta = Math.cos(theta);\n\t\t\t\t\tvar sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x3 = 0; _x3 < radialSegments; _x3++) {\n\t\t\t\t\tvar c = centerIndexStart + _x3;\n\t\t\t\t\tvar i = centerIndexEnd + _x3;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CylinderBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar CylinderGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(CylinderGeometry, _Geometry);\n\n\t\tfunction CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'CylinderGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CylinderGeometry;\n\t}(Geometry);\n\n\tvar ConeGeometry = /*#__PURE__*/function (_CylinderGeometry) {\n\t\t_inheritsLoose(ConeGeometry, _CylinderGeometry);\n\n\t\tfunction ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) || this;\n\t\t\t_this.type = 'ConeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn ConeGeometry;\n\t}(CylinderGeometry);\n\n\tvar ConeBufferGeometry = /*#__PURE__*/function (_CylinderBufferGeomet) {\n\t\t_inheritsLoose(ConeBufferGeometry, _CylinderBufferGeomet);\n\n\t\tfunction ConeBufferGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (openEnded === void 0) {\n\t\t\t\topenEnded = false;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _CylinderBufferGeomet.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) || this;\n\t\t\t_this.type = 'ConeBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn ConeBufferGeometry;\n\t}(CylinderBufferGeometry);\n\n\tvar PolyhedronBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PolyhedronBufferGeometry, _BufferGeometry);\n\n\t\tfunction PolyhedronBufferGeometry(vertices, indices, radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PolyhedronBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tvar vertexBuffer = [];\n\t\t\tvar uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\t_this.computeVertexNormals(); // flat normals\n\n\t\t\t} else {\n\t\t\t\t_this.normalizeNormals(); // smooth normals\n\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (var i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tvar cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tvar v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (var i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tvar aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tvar bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tvar rows = cols - i;\n\n\t\t\t\t\tfor (var j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (var _i = 0; _i < cols; _i++) {\n\t\t\t\t\tfor (var _j = 0; _j < 2 * (cols - _i) - 1; _j++) {\n\t\t\t\t\t\tvar k = Math.floor(_j / 2);\n\n\t\t\t\t\t\tif (_j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[_i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tvar vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tvar vertex = new Vector3();\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvar u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tvar v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (var i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tvar x0 = uvBuffer[i + 0];\n\t\t\t\t\tvar x1 = uvBuffer[i + 2];\n\t\t\t\t\tvar x2 = uvBuffer[i + 4];\n\t\t\t\t\tvar max = Math.max(x0, x1, x2);\n\t\t\t\t\tvar min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tvar stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3();\n\t\t\t\tvar centroid = new Vector3();\n\t\t\t\tvar uvA = new Vector2();\n\t\t\t\tvar uvB = new Vector2();\n\t\t\t\tvar uvC = new Vector2();\n\n\t\t\t\tfor (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tvar azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolyhedronBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar DodecahedronBufferGeometry = /*#__PURE__*/function (_PolyhedronBufferGeom) {\n\t\t_inheritsLoose(DodecahedronBufferGeometry, _PolyhedronBufferGeom);\n\n\t\tfunction DodecahedronBufferGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar r = 1 / t;\n\t\t\tvar vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tvar indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\t_this = _PolyhedronBufferGeom.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'DodecahedronBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DodecahedronBufferGeometry;\n\t}(PolyhedronBufferGeometry);\n\n\tvar DodecahedronGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(DodecahedronGeometry, _Geometry);\n\n\t\tfunction DodecahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'DodecahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new DodecahedronBufferGeometry(radius, detail));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DodecahedronGeometry;\n\t}(Geometry);\n\n\tvar _v0$2 = new Vector3();\n\n\tvar _v1$5 = new Vector3();\n\n\tvar _normal$1 = new Vector3();\n\n\tvar _triangle = new Triangle();\n\n\tvar EdgesGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(EdgesGeometry, _BufferGeometry);\n\n\t\tfunction EdgesGeometry(geometry, thresholdAngle) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'EdgesGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry) {\n\t\t\t\tgeometry = new BufferGeometry().fromGeometry(geometry);\n\t\t\t}\n\n\t\t\tvar precisionPoints = 4;\n\t\t\tvar precision = Math.pow(10, precisionPoints);\n\t\t\tvar thresholdDot = Math.cos(MathUtils.DEG2RAD * thresholdAngle);\n\t\t\tvar indexAttr = geometry.getIndex();\n\t\t\tvar positionAttr = geometry.getAttribute('position');\n\t\t\tvar indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tvar indexArr = [0, 0, 0];\n\t\t\tvar vertKeys = ['a', 'b', 'c'];\n\t\t\tvar hashes = new Array(3);\n\t\t\tvar edgeData = {};\n\t\t\tvar vertices = [];\n\n\t\t\tfor (var i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tvar a = _triangle.a,\n\t\t\t\t\t\tb = _triangle.b,\n\t\t\t\t\t\tc = _triangle.c;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal$1); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = Math.round(a.x * precision) + \",\" + Math.round(a.y * precision) + \",\" + Math.round(a.z * precision);\n\t\t\t\thashes[1] = Math.round(b.x * precision) + \",\" + Math.round(b.y * precision) + \",\" + Math.round(b.z * precision);\n\t\t\t\thashes[2] = Math.round(c.x * precision) + \",\" + Math.round(c.y * precision) + \",\" + Math.round(c.z * precision); // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tvar jNext = (j + 1) % 3;\n\t\t\t\t\tvar vecHash0 = hashes[j];\n\t\t\t\t\tvar vecHash1 = hashes[jNext];\n\t\t\t\t\tvar v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tvar v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tvar hash = vecHash0 + \"_\" + vecHash1;\n\t\t\t\t\tvar reverseHash = vecHash1 + \"_\" + vecHash0;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal$1.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal$1.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (var key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tvar _edgeData$key = edgeData[key],\n\t\t\t\t\t\t\tindex0 = _edgeData$key.index0,\n\t\t\t\t\t\t\tindex1 = _edgeData$key.index1;\n\n\t\t\t\t\t_v0$2.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$5.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0$2.x, _v0$2.y, _v0$2.z);\n\t\t\t\t\tvertices.push(_v1$5.x, _v1$5.y, _v1$5.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn EdgesGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tvar Earcut = {\n\t\ttriangulate: function triangulate(data, holeIndices, dim) {\n\t\t\tdim = dim || 2;\n\t\t\tvar hasHoles = holeIndices && holeIndices.length;\n\t\t\tvar outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tvar outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tvar triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (var i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tvar i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tvar p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tvar stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tvar p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tvar minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tvar minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tvar p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tvar a = p.prev,\n\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\n\t\tdo {\n\t\t\tvar b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tvar queue = [];\n\t\tvar i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tvar b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tvar p = outerNode;\n\t\tvar hx = hole.x;\n\t\tvar hy = hole.y;\n\t\tvar qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tvar x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\t\tmx = m.x,\n\t\t\t\tmy = m.y;\n\t\tvar tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tvar i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tvar p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tvar o1 = sign(area(p1, q1, p2));\n\t\tvar o2 = sign(area(p1, q1, q2));\n\t\tvar o3 = sign(area(p2, q2, p1));\n\t\tvar o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tvar p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tvar p = a,\n\t\t\t\tinside = false;\n\t\tvar px = (a.x + b.x) / 2,\n\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tvar a2 = new Node(a.i, a.x, a.y),\n\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\tan = a.next,\n\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tvar p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tvar sum = 0;\n\n\t\tfor (var i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tvar ShapeUtils = {\n\t\t// calculate area of the contour polygon\n\t\tarea: function area(contour) {\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor (var p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t},\n\t\tisClockWise: function isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t},\n\t\ttriangulateShape: function triangulateShape(contour, holes) {\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tvar holeIndices = []; // array of hole indices\n\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tvar holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (var i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tvar triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (var _i = 0; _i < triangles.length; _i += 3) {\n\t\t\t\tfaces.push(triangles.slice(_i, _i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\t};\n\n\tfunction removeDupEndPts(points) {\n\t\tvar l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (var i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\tvar ExtrudeBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ExtrudeBufferGeometry, _BufferGeometry);\n\n\t\tfunction ExtrudeBufferGeometry(shapes, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ExtrudeBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tvar verticesArray = [];\n\t\t\tvar uvArray = [];\n\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\n\t\t\t_this.computeVertexNormals(); // functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar placeholder = []; // options\n\n\t\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tvar extrudePath = options.extrudePath;\n\t\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tvar extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tvar shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tvar vertices = shapePoints.shape;\n\t\t\t\tvar holes = shapePoints.holes;\n\t\t\t\tvar reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (var h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tvar ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (var _h = 0, _hl = holes.length; _h < _hl; _h++) {\n\t\t\t\t\tvar _ahole = holes[_h];\n\t\t\t\t\tvertices = vertices.concat(_ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tvar vlen = vertices.length,\n\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tvar v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tvar collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tvar v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tvar v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tvar ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tvar ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tvar ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tvar ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tvar sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tvar v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tvar contourMovements = [];\n\n\t\t\t\tfor (var _i = 0, il = contour.length, j = il - 1, k = _i + 1; _i < il; _i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[_i] = getBevelVec(contour[_i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tvar holesMovements = [];\n\t\t\t\tvar oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (var _h2 = 0, _hl2 = holes.length; _h2 < _hl2; _h2++) {\n\t\t\t\t\tvar _ahole2 = holes[_h2];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (var _i2 = 0, _il = _ahole2.length, _j = _il - 1, _k = _i2 + 1; _i2 < _il; _i2++, _j++, _k++) {\n\t\t\t\t\t\tif (_j === _il) _j = 0;\n\t\t\t\t\t\tif (_k === _il) _k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[_i2] = getBevelVec(_ahole2[_i2], _ahole2[_j], _ahole2[_k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (var b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tvar t = b / bevelSegments;\n\t\t\t\t\tvar z = bevelThickness * Math.cos(t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i3 = 0, _il2 = contour.length; _i3 < _il2; _i3++) {\n\t\t\t\t\t\tvar vert = scalePt2(contour[_i3], contourMovements[_i3], _bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h3 = 0, _hl3 = holes.length; _h3 < _hl3; _h3++) {\n\t\t\t\t\t\tvar _ahole3 = holes[_h3];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h3];\n\n\t\t\t\t\t\tfor (var _i4 = 0, _il3 = _ahole3.length; _i4 < _il3; _i4++) {\n\t\t\t\t\t\t\tvar _vert = scalePt2(_ahole3[_i4], oneHoleMovements[_i4], _bs);\n\n\t\t\t\t\t\t\tv(_vert.x, _vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (var _i5 = 0; _i5 < vlen; _i5++) {\n\t\t\t\t\tvar _vert2 = bevelEnabled ? scalePt2(vertices[_i5], verticesMovements[_i5], bs) : vertices[_i5];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(_vert2.x, _vert2.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(_vert2.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(_vert2.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (var s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (var _i6 = 0; _i6 < vlen; _i6++) {\n\t\t\t\t\t\tvar _vert3 = bevelEnabled ? scalePt2(vertices[_i6], verticesMovements[_i6], bs) : vertices[_i6];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(_vert3.x, _vert3.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(_vert3.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(_vert3.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (var _b = bevelSegments - 1; _b >= 0; _b--) {\n\t\t\t\t\tvar _t = _b / bevelSegments;\n\n\t\t\t\t\tvar _z = bevelThickness * Math.cos(_t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs2 = bevelSize * Math.sin(_t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i7 = 0, _il4 = contour.length; _i7 < _il4; _i7++) {\n\t\t\t\t\t\tvar _vert4 = scalePt2(contour[_i7], contourMovements[_i7], _bs2);\n\n\t\t\t\t\t\tv(_vert4.x, _vert4.y, depth + _z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h4 = 0, _hl4 = holes.length; _h4 < _hl4; _h4++) {\n\t\t\t\t\t\tvar _ahole4 = holes[_h4];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h4];\n\n\t\t\t\t\t\tfor (var _i8 = 0, _il5 = _ahole4.length; _i8 < _il5; _i8++) {\n\t\t\t\t\t\t\tvar _vert5 = scalePt2(_ahole4[_i8], oneHoleMovements[_i8], _bs2);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y, depth + _z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + _z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tvar layer = 0; // steps + 1\n\n\t\t\t\t\t\tvar offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (var _i9 = 0; _i9 < flen; _i9++) {\n\t\t\t\t\t\t\tvar face = faces[_i9];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (var _i10 = 0; _i10 < flen; _i10++) {\n\t\t\t\t\t\t\tvar _face = faces[_i10];\n\t\t\t\t\t\t\tf3(_face[0] + offset, _face[1] + offset, _face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (var _i11 = 0; _i11 < flen; _i11++) {\n\t\t\t\t\t\t\tvar _face2 = faces[_i11];\n\t\t\t\t\t\t\tf3(_face2[2], _face2[1], _face2[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (var _i12 = 0; _i12 < flen; _i12++) {\n\t\t\t\t\t\t\tvar _face3 = faces[_i12];\n\t\t\t\t\t\t\tf3(_face3[0] + vlen * steps, _face3[1] + vlen * steps, _face3[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\t\tvar layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (var _h5 = 0, _hl5 = holes.length; _h5 < _hl5; _h5++) {\n\t\t\t\t\t\tvar _ahole5 = holes[_h5];\n\t\t\t\t\t\tsidewalls(_ahole5, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += _ahole5.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tvar i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tvar _j2 = i;\n\n\t\t\t\t\t\tvar _k2 = i - 1;\n\n\t\t\t\t\t\tif (_k2 < 0) _k2 = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (var _s = 0, sl = steps + bevelSegments * 2; _s < sl; _s++) {\n\t\t\t\t\t\t\tvar slen1 = vlen * _s;\n\t\t\t\t\t\t\tvar slen2 = vlen * (_s + 1);\n\n\t\t\t\t\t\t\tvar a = layeroffset + _j2 + slen1,\n\t\t\t\t\t\t\t\t\t_b2 = layeroffset + _k2 + slen1,\n\t\t\t\t\t\t\t\t\tc = layeroffset + _k2 + slen2,\n\t\t\t\t\t\t\t\t\td = layeroffset + _j2 + slen2;\n\n\t\t\t\t\t\t\tf4(a, _b2, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ExtrudeBufferGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\tvar options = this.parameters.options;\n\t\t\treturn _toJSON(shapes, options, data);\n\t\t};\n\n\t\treturn ExtrudeBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar WorldUVGenerator = {\n\t\tgenerateTopUV: function generateTopUV(geometry, vertices, indexA, indexB, indexC) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function generateSideWallUV(geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar a_z = vertices[indexA * 3 + 2];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar b_z = vertices[indexB * 3 + 2];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\tvar c_z = vertices[indexC * 3 + 2];\n\t\t\tvar d_x = vertices[indexD * 3];\n\t\t\tvar d_y = vertices[indexD * 3 + 1];\n\t\t\tvar d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < 0.01) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction _toJSON(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tvar ExtrudeGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(ExtrudeGeometry, _Geometry);\n\n\t\tfunction ExtrudeGeometry(shapes, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'ExtrudeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes, options));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ExtrudeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Geometry.prototype.toJSON.call(this);\n\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\tvar options = this.parameters.options;\n\t\t\treturn _toJSON$1(shapes, options, data);\n\t\t};\n\n\t\treturn ExtrudeGeometry;\n\t}(Geometry);\n\n\tfunction _toJSON$1(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tvar IcosahedronBufferGeometry = /*#__PURE__*/function (_PolyhedronBufferGeom) {\n\t\t_inheritsLoose(IcosahedronBufferGeometry, _PolyhedronBufferGeom);\n\n\t\tfunction IcosahedronBufferGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tvar indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\t_this = _PolyhedronBufferGeom.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'IcosahedronBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn IcosahedronBufferGeometry;\n\t}(PolyhedronBufferGeometry);\n\n\tvar IcosahedronGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(IcosahedronGeometry, _Geometry);\n\n\t\tfunction IcosahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'IcosahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new IcosahedronBufferGeometry(radius, detail));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn IcosahedronGeometry;\n\t}(Geometry);\n\n\tvar LatheBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(LatheBufferGeometry, _BufferGeometry);\n\n\t\tfunction LatheBufferGeometry(points, segments, phiStart, phiLength) {\n\t\t\tvar _this;\n\n\t\t\tif (segments === void 0) {\n\t\t\t\tsegments = 12;\n\t\t\t}\n\n\t\t\tif (phiStart === void 0) {\n\t\t\t\tphiStart = 0;\n\t\t\t}\n\n\t\t\tif (phiLength === void 0) {\n\t\t\t\tphiLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'LatheBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = MathUtils.clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar inverseSegments = 1.0 / segments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tvar sin = Math.sin(phi);\n\t\t\t\tvar cos = Math.cos(phi);\n\n\t\t\t\tfor (var j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 0; _i < segments; _i++) {\n\t\t\t\tfor (var _j = 0; _j < points.length - 1; _j++) {\n\t\t\t\t\tvar base = _j + _i * points.length;\n\t\t\t\t\tvar a = base;\n\t\t\t\t\tvar b = base + points.length;\n\t\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\t\tvar d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\n\t\t\t_this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tvar normals = _this.attributes.normal.array;\n\t\t\t\tvar n1 = new Vector3();\n\t\t\t\tvar n2 = new Vector3();\n\t\t\t\tvar n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tvar _base = segments * points.length * 3;\n\n\t\t\t\tfor (var _i2 = 0, _j2 = 0; _i2 < points.length; _i2++, _j2 += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[_j2 + 0];\n\t\t\t\t\tn1.y = normals[_j2 + 1];\n\t\t\t\t\tn1.z = normals[_j2 + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[_base + _j2 + 0];\n\t\t\t\t\tn2.y = normals[_base + _j2 + 1];\n\t\t\t\t\tn2.z = normals[_base + _j2 + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[_j2 + 0] = normals[_base + _j2 + 0] = n.x;\n\t\t\t\t\tnormals[_j2 + 1] = normals[_base + _j2 + 1] = n.y;\n\t\t\t\t\tnormals[_j2 + 2] = normals[_base + _j2 + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn LatheBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar LatheGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(LatheGeometry, _Geometry);\n\n\t\tfunction LatheGeometry(points, segments, phiStart, phiLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'LatheGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new LatheBufferGeometry(points, segments, phiStart, phiLength));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn LatheGeometry;\n\t}(Geometry);\n\n\tvar OctahedronBufferGeometry = /*#__PURE__*/function (_PolyhedronBufferGeom) {\n\t\t_inheritsLoose(OctahedronBufferGeometry, _PolyhedronBufferGeom);\n\n\t\tfunction OctahedronBufferGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tvar indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\t_this = _PolyhedronBufferGeom.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'OctahedronBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn OctahedronBufferGeometry;\n\t}(PolyhedronBufferGeometry);\n\n\tvar OctahedronGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(OctahedronGeometry, _Geometry);\n\n\t\tfunction OctahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'OctahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new OctahedronBufferGeometry(radius, detail));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn OctahedronGeometry;\n\t}(Geometry);\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tfunction ParametricBufferGeometry(func, slices, stacks) {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'ParametricBufferGeometry';\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t}; // buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar EPS = 0.00001;\n\t\tvar normal = new Vector3();\n\t\tvar p0 = new Vector3(),\n\t\t\t\tp1 = new Vector3();\n\t\tvar pu = new Vector3(),\n\t\t\t\tpv = new Vector3();\n\n\t\tif (func.length < 3) {\n\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t} // generate vertices, normals and uvs\n\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor (var i = 0; i <= stacks; i++) {\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor (var j = 0; j <= slices; j++) {\n\t\t\t\tvar u = j / slices; // vertex\n\n\t\t\t\tfunc(u, v, p0);\n\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t}\n\n\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\tuvs.push(u, v);\n\t\t\t}\n\t\t} // generate indices\n\n\n\t\tfor (var _i = 0; _i < stacks; _i++) {\n\t\t\tfor (var _j = 0; _j < slices; _j++) {\n\t\t\t\tvar a = _i * sliceCount + _j;\n\t\t\t\tvar b = _i * sliceCount + _j + 1;\n\t\t\t\tvar c = (_i + 1) * sliceCount + _j + 1;\n\t\t\t\tvar d = (_i + 1) * sliceCount + _j; // faces one and two\n\n\t\t\t\tindices.push(a, b, d);\n\t\t\t\tindices.push(b, c, d);\n\t\t\t}\n\t\t} // build geometry\n\n\n\t\tthis.setIndex(indices);\n\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tfunction ParametricGeometry(func, slices, stacks) {\n\t\tGeometry.call(this);\n\t\tthis.type = 'ParametricGeometry';\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\t\tthis.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks));\n\t\tthis.mergeVertices();\n\t}\n\n\tParametricGeometry.prototype = Object.create(Geometry.prototype);\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\tvar PlaneGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(PlaneGeometry, _Geometry);\n\n\t\tfunction PlaneGeometry(width, height, widthSegments, heightSegments) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'PlaneGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PlaneGeometry;\n\t}(Geometry);\n\n\tvar PolyhedronGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(PolyhedronGeometry, _Geometry);\n\n\t\tfunction PolyhedronGeometry(vertices, indices, radius, detail) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'PolyhedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices, indices, radius, detail));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolyhedronGeometry;\n\t}(Geometry);\n\n\tvar RingBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(RingBufferGeometry, _BufferGeometry);\n\n\t\tfunction RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (innerRadius === void 0) {\n\t\t\t\tinnerRadius = 0.5;\n\t\t\t}\n\n\t\t\tif (outerRadius === void 0) {\n\t\t\t\touterRadius = 1;\n\t\t\t}\n\n\t\t\tif (thetaSegments === void 0) {\n\t\t\t\tthetaSegments = 8;\n\t\t\t}\n\n\t\t\tif (phiSegments === void 0) {\n\t\t\t\tphiSegments = 1;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'RingBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // some helper variables\n\n\t\t\tvar radius = innerRadius;\n\t\t\tvar radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tvar segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (var _j = 0; _j < phiSegments; _j++) {\n\t\t\t\tvar thetaSegmentLevel = _j * (thetaSegments + 1);\n\n\t\t\t\tfor (var _i = 0; _i < thetaSegments; _i++) {\n\t\t\t\t\tvar _segment = _i + thetaSegmentLevel;\n\n\t\t\t\t\tvar a = _segment;\n\t\t\t\t\tvar b = _segment + thetaSegments + 1;\n\t\t\t\t\tvar c = _segment + thetaSegments + 2;\n\t\t\t\t\tvar d = _segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn RingBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar RingGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(RingGeometry, _Geometry);\n\n\t\tfunction RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'RingGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn RingGeometry;\n\t}(Geometry);\n\n\tvar ShapeBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ShapeBufferGeometry, _BufferGeometry);\n\n\t\tfunction ShapeBufferGeometry(shapes, curveSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (curveSegments === void 0) {\n\t\t\t\tcurveSegments = 12;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ShapeBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar groupStart = 0;\n\t\t\tvar groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\n\t\t\t\t\t_this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\t\tvar points = shape.extractPoints(curveSegments);\n\t\t\t\tvar shapeVertices = points.shape;\n\t\t\t\tvar shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (var _i = 0, l = shapeHoles.length; _i < l; _i++) {\n\t\t\t\t\tvar shapeHole = shapeHoles[_i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[_i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (var _i2 = 0, _l = shapeHoles.length; _i2 < _l; _i2++) {\n\t\t\t\t\tvar _shapeHole = shapeHoles[_i2];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(_shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (var _i3 = 0, _l2 = shapeVertices.length; _i3 < _l2; _i3++) {\n\t\t\t\t\tvar vertex = shapeVertices[_i3];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (var _i4 = 0, _l3 = faces.length; _i4 < _l3; _i4++) {\n\t\t\t\t\tvar face = faces[_i4];\n\t\t\t\t\tvar a = face[0] + indexOffset;\n\t\t\t\t\tvar b = face[1] + indexOffset;\n\t\t\t\t\tvar c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ShapeBufferGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\treturn _toJSON$2(shapes, data);\n\t\t};\n\n\t\treturn ShapeBufferGeometry;\n\t}(BufferGeometry);\n\n\tfunction _toJSON$2(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tvar ShapeGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(ShapeGeometry, _Geometry);\n\n\t\tfunction ShapeGeometry(shapes, curveSegments) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'ShapeGeometry';\n\n\t\t\tif (typeof curveSegments === 'object') {\n\t\t\t\tconsole.warn('THREE.ShapeGeometry: Options parameter has been removed.');\n\t\t\t\tcurveSegments = curveSegments.curveSegments;\n\t\t\t}\n\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ShapeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = Geometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\treturn _toJSON$3(shapes, data);\n\t\t};\n\n\t\treturn ShapeGeometry;\n\t}(Geometry);\n\n\tfunction _toJSON$3(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tvar SphereBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(SphereBufferGeometry, _BufferGeometry);\n\n\t\tfunction SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 6;\n\t\t\t}\n\n\t\t\tif (phiStart === void 0) {\n\t\t\t\tphiStart = 0;\n\t\t\t}\n\n\t\t\tif (phiLength === void 0) {\n\t\t\t\tphiLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'SphereBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tvar thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tvar index = 0;\n\t\t\tvar grid = [];\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (var iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tvar verticesRow = [];\n\t\t\t\tvar v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tvar uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (var ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tvar u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _iy = 0; _iy < heightSegments; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < widthSegments; _ix++) {\n\t\t\t\t\tvar a = grid[_iy][_ix + 1];\n\t\t\t\t\tvar b = grid[_iy][_ix];\n\t\t\t\t\tvar c = grid[_iy + 1][_ix];\n\t\t\t\t\tvar d = grid[_iy + 1][_ix + 1];\n\t\t\t\t\tif (_iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (_iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn SphereBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar SphereGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(SphereGeometry, _Geometry);\n\n\t\tfunction SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'SphereGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn SphereGeometry;\n\t}(Geometry);\n\n\tvar TetrahedronBufferGeometry = /*#__PURE__*/function (_PolyhedronBufferGeom) {\n\t\t_inheritsLoose(TetrahedronBufferGeometry, _PolyhedronBufferGeom);\n\n\t\tfunction TetrahedronBufferGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tvar indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\t_this = _PolyhedronBufferGeom.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'TetrahedronBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TetrahedronBufferGeometry;\n\t}(PolyhedronBufferGeometry);\n\n\tvar TetrahedronGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(TetrahedronGeometry, _Geometry);\n\n\t\tfunction TetrahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'TetrahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new TetrahedronBufferGeometry(radius, detail));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TetrahedronGeometry;\n\t}(Geometry);\n\n\tvar TextBufferGeometry = /*#__PURE__*/function (_ExtrudeBufferGeometr) {\n\t\t_inheritsLoose(TextBufferGeometry, _ExtrudeBufferGeometr);\n\n\t\tfunction TextBufferGeometry(text, parameters) {\n\t\t\tvar _this;\n\n\t\t\tif (parameters === void 0) {\n\t\t\t\tparameters = {};\n\t\t\t}\n\n\t\t\tvar font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry() || _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\tvar shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\t_this = _ExtrudeBufferGeometr.call(this, shapes, parameters) || this;\n\t\t\t_this.type = 'TextBufferGeometry';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TextBufferGeometry;\n\t}(ExtrudeBufferGeometry);\n\n\tvar TextGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(TextGeometry, _Geometry);\n\n\t\tfunction TextGeometry(text, parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'TextGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\ttext: text,\n\t\t\t\tparameters: parameters\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new TextBufferGeometry(text, parameters));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TextGeometry;\n\t}(Geometry);\n\n\tvar TorusBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusBufferGeometry, _BufferGeometry);\n\n\t\tfunction TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (tube === void 0) {\n\t\t\t\ttube = 0.4;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 6;\n\t\t\t}\n\n\t\t\tif (arc === void 0) {\n\t\t\t\tarc = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar center = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= radialSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= tubularSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (tubularSegments + 1) * _j + _i - 1;\n\t\t\t\t\tvar b = (tubularSegments + 1) * (_j - 1) + _i - 1;\n\t\t\t\t\tvar c = (tubularSegments + 1) * (_j - 1) + _i;\n\t\t\t\t\tvar d = (tubularSegments + 1) * _j + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar TorusGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(TorusGeometry, _Geometry);\n\n\t\tfunction TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'TorusGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusGeometry;\n\t}(Geometry);\n\n\tvar TorusKnotBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusKnotBufferGeometry, _BufferGeometry);\n\n\t\tfunction TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (tube === void 0) {\n\t\t\t\ttube = 0.4;\n\t\t\t}\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 64;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (p === void 0) {\n\t\t\t\tp = 2;\n\t\t\t}\n\n\t\t\tif (q === void 0) {\n\t\t\t\tq = 3;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusKnotBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar P1 = new Vector3();\n\t\t\tvar P2 = new Vector3();\n\t\t\tvar B = new Vector3();\n\t\t\tvar T = new Vector3();\n\t\t\tvar N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tvar u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar cx = -tube * Math.cos(v);\n\t\t\t\t\tvar cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= tubularSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= radialSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (radialSegments + 1) * (_j - 1) + (_i - 1);\n\t\t\t\t\tvar b = (radialSegments + 1) * _j + (_i - 1);\n\t\t\t\t\tvar c = (radialSegments + 1) * _j + _i;\n\t\t\t\t\tvar d = (radialSegments + 1) * (_j - 1) + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tvar cu = Math.cos(u);\n\t\t\t\tvar su = Math.sin(u);\n\t\t\t\tvar quOverP = q / p * u;\n\t\t\t\tvar cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusKnotBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar TorusKnotGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(TorusKnotGeometry, _Geometry);\n\n\t\tfunction TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q, heightScale) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'TorusKnotGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\tif (heightScale !== undefined) console.warn('THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.');\n\n\t\t\t_this.fromBufferGeometry(new TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusKnotGeometry;\n\t}(Geometry);\n\n\tvar TubeBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TubeBufferGeometry, _BufferGeometry);\n\n\t\tfunction TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed) {\n\t\t\tvar _this;\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 64;\n\t\t\t}\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (closed === void 0) {\n\t\t\t\tclosed = false;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TubeBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tvar frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\t_this.tangents = frames.tangents;\n\t\t\t_this.normals = frames.normals;\n\t\t\t_this.binormals = frames.binormals; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar uv = new Vector2();\n\t\t\tvar P = new Vector3(); // buffer\n\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\t\tvar indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (var i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tvar N = frames.normals[i];\n\t\t\t\tvar B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar sin = Math.sin(v);\n\t\t\t\t\tvar cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (var j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (var i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tvar a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tvar b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tvar c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tvar d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = TubeBufferGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn TubeBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar TubeGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(TubeGeometry, _Geometry);\n\n\t\tfunction TubeGeometry(path, tubularSegments, radius, radialSegments, closed, taper) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'TubeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tif (taper !== undefined) console.warn('THREE.TubeGeometry: taper has been removed.');\n\t\t\tvar bufferGeometry = new TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed); // expose internals\n\n\t\t\t_this.tangents = bufferGeometry.tangents;\n\t\t\t_this.normals = bufferGeometry.normals;\n\t\t\t_this.binormals = bufferGeometry.binormals; // create geometry\n\n\t\t\t_this.fromBufferGeometry(bufferGeometry);\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TubeGeometry;\n\t}(Geometry);\n\n\tvar WireframeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(WireframeGeometry, _BufferGeometry);\n\n\t\tfunction WireframeGeometry(geometry) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'WireframeGeometry'; // buffer\n\n\t\t\tvar vertices = []; // helper variables\n\n\t\t\tvar edge = [0, 0],\n\t\t\t\t\tedges = {};\n\t\t\tvar keys = ['a', 'b', 'c']; // different logic for Geometry and BufferGeometry\n\n\t\t\tif (geometry && geometry.isGeometry) {\n\t\t\t\t// create a data structure that contains all edges without duplicates\n\t\t\t\tvar faces = geometry.faces;\n\n\t\t\t\tfor (var i = 0, l = faces.length; i < l; i++) {\n\t\t\t\t\tvar face = faces[i];\n\n\t\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t\tvar edge1 = face[keys[j]];\n\t\t\t\t\t\tvar edge2 = face[keys[(j + 1) % 3]];\n\t\t\t\t\t\tedge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\tedge[1] = Math.max(edge1, edge2);\n\t\t\t\t\t\tvar key = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\tif (edges[key] === undefined) {\n\t\t\t\t\t\t\tedges[key] = {\n\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // generate vertices\n\n\n\t\t\t\tfor (var _key in edges) {\n\t\t\t\t\tvar e = edges[_key];\n\t\t\t\t\tvar vertex = geometry.vertices[e.index1];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\tvertex = geometry.vertices[e.index2];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t} else if (geometry && geometry.isBufferGeometry) {\n\t\t\t\tvar _vertex = new Vector3();\n\n\t\t\t\tif (geometry.index !== null) {\n\t\t\t\t\t// indexed BufferGeometry\n\t\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\t\tvar indices = geometry.index;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\t\tgroups = [{\n\t\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t\t}];\n\t\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\t\tfor (var o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\t\tvar group = groups[o];\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\t\tfor (var _i = start, _l = start + count; _i < _l; _i += 3) {\n\t\t\t\t\t\t\tfor (var _j = 0; _j < 3; _j++) {\n\t\t\t\t\t\t\t\tvar _edge = indices.getX(_i + _j);\n\n\t\t\t\t\t\t\t\tvar _edge2 = indices.getX(_i + (_j + 1) % 3);\n\n\t\t\t\t\t\t\t\tedge[0] = Math.min(_edge, _edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\t\t\tedge[1] = Math.max(_edge, _edge2);\n\n\t\t\t\t\t\t\t\tvar _key2 = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\t\t\tif (edges[_key2] === undefined) {\n\t\t\t\t\t\t\t\t\tedges[_key2] = {\n\t\t\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // generate vertices\n\n\n\t\t\t\t\tfor (var _key3 in edges) {\n\t\t\t\t\t\tvar _e = edges[_key3];\n\n\t\t\t\t\t\t_vertex.fromBufferAttribute(position, _e.index1);\n\n\t\t\t\t\t\tvertices.push(_vertex.x, _vertex.y, _vertex.z);\n\n\t\t\t\t\t\t_vertex.fromBufferAttribute(position, _e.index2);\n\n\t\t\t\t\t\tvertices.push(_vertex.x, _vertex.y, _vertex.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\t\tvar _position = geometry.attributes.position;\n\n\t\t\t\t\tfor (var _i2 = 0, _l2 = _position.count / 3; _i2 < _l2; _i2++) {\n\t\t\t\t\t\tfor (var _j2 = 0; _j2 < 3; _j2++) {\n\t\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\t\tvar index1 = 3 * _i2 + _j2;\n\n\t\t\t\t\t\t\t_vertex.fromBufferAttribute(_position, index1);\n\n\t\t\t\t\t\t\tvertices.push(_vertex.x, _vertex.y, _vertex.z);\n\t\t\t\t\t\t\tvar index2 = 3 * _i2 + (_j2 + 1) % 3;\n\n\t\t\t\t\t\t\t_vertex.fromBufferAttribute(_position, index2);\n\n\t\t\t\t\t\t\tvertices.push(_vertex.x, _vertex.y, _vertex.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn WireframeGeometry;\n\t}(BufferGeometry);\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'ShadowMaterial';\n\t\tthis.color = new Color(0x000000);\n\t\tthis.transparent = true;\n\t\tthis.setValues(parameters);\n\t}\n\n\tShadowMaterial.prototype = Object.create(Material.prototype);\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\treturn this;\n\t};\n\n\tfunction RawShaderMaterial(parameters) {\n\t\tShaderMaterial.call(this, parameters);\n\t\tthis.type = 'RawShaderMaterial';\n\t}\n\n\tRawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.type = 'MeshStandardMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.roughnessMap = null;\n\t\tthis.metalnessMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.vertexTangents = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create(Material.prototype);\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.color.copy(source.color);\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.roughnessMap = source.roughnessMap;\n\t\tthis.metalnessMap = source.metalnessMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.vertexTangents = source.vertexTangents;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\treflectivity: <float>,\n\t *\tior: <float>,\n\t *\n\t *\tsheen: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial(parameters) {\n\t\tMeshStandardMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.type = 'MeshPhysicalMaterial';\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\tthis.clearcoatNormalMap = null;\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tObject.defineProperty(this, 'ior', {\n\t\t\tget: function get() {\n\t\t\t\treturn (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n\t\t\t},\n\t\t\tset: function set(ior) {\n\t\t\t\tthis.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n\t\t\t}\n\t\t});\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transmission = 0.0;\n\t\tthis.transmissionMap = null;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function (source) {\n\t\tMeshStandardMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif (source.sheen) {\n\t\t\tthis.sheen = (this.sheen || new Color()).copy(source.sheen);\n\t\t} else {\n\t\t\tthis.sheen = null;\n\t\t}\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshPhongMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.specular = new Color(0x111111);\n\t\tthis.shininess = 30;\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create(Material.prototype);\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.specular.copy(source.specular);\n\t\tthis.shininess = source.shininess;\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'TOON': ''\n\t\t};\n\t\tthis.type = 'MeshToonMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.alphaMap = null;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshToonMaterial.prototype = Object.create(Material.prototype);\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshNormalMaterial';\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create(Material.prototype);\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshLambertMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create(Material.prototype);\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'MATCAP': ''\n\t\t};\n\t\tthis.type = 'MeshMatcapMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.matcap = null;\n\t\tthis.map = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.alphaMap = null;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create(Material.prototype);\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'MATCAP': ''\n\t\t};\n\t\tthis.color.copy(source.color);\n\t\tthis.matcap = source.matcap;\n\t\tthis.map = source.map;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial(parameters) {\n\t\tLineBasicMaterial.call(this);\n\t\tthis.type = 'LineDashedMaterial';\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\t\tthis.setValues(parameters);\n\t}\n\n\tLineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function (source) {\n\t\tLineBasicMaterial.prototype.copy.call(this, source);\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\t\treturn this;\n\t};\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tvar AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function arraySlice(array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function convertArray(array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function isTypedArray(object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function getKeyframeOrder(times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array(n);\n\n\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\tresult[i] = i;\n\t\t\t}\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function sortedArray(values, stride, order) {\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor(nValues);\n\n\t\t\tfor (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tvar srcOffset = order[i] * stride;\n\n\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function flattenJSON(jsonKeys, times, values, valuePropertyName) {\n\t\t\tvar i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tvar value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function subclip(sourceClip, name, startFrame, endFrame, fps) {\n\t\t\tif (fps === void 0) {\n\t\t\t\tfps = 30;\n\t\t\t}\n\n\t\t\tvar clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tvar track = clip.tracks[i];\n\t\t\t\tvar valueSize = track.getValueSize();\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tvar frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (var k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor (var _i = 0; _i < clip.tracks.length; ++_i) {\n\t\t\t\tif (minStartTime > clip.tracks[_i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[_i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (var _i2 = 0; _i2 < clip.tracks.length; ++_i2) {\n\t\t\t\tclip.tracks[_i2].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function makeClipAdditive(targetClip, referenceFrame, referenceClip, fps) {\n\t\t\tif (referenceFrame === void 0) {\n\t\t\t\treferenceFrame = 0;\n\t\t\t}\n\n\t\t\tif (referenceClip === void 0) {\n\t\t\t\treferenceClip = targetClip;\n\t\t\t}\n\n\t\t\tif (fps === void 0) {\n\t\t\t\tfps = 30;\n\t\t\t}\n\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tvar numTracks = referenceClip.tracks.length;\n\t\t\tvar referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tvar _loop = function _loop(i) {\n\t\t\t\tvar referenceTrack = referenceClip.tracks[i];\n\t\t\t\tvar referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') return \"continue\"; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tvar targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) return \"continue\";\n\t\t\t\tvar referenceOffset = 0;\n\t\t\t\tvar referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar targetOffset = 0;\n\t\t\t\tvar targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tvar referenceValue = void 0; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tvar startIndex = referenceOffset;\n\t\t\t\t\tvar endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tvar _startIndex = lastIndex * referenceValueSize + referenceOffset;\n\n\t\t\t\t\tvar _endIndex = _startIndex + referenceValueSize - referenceOffset;\n\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, _startIndex, _endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tvar interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tvar _startIndex2 = referenceOffset;\n\n\t\t\t\t\tvar _endIndex2 = referenceValueSize - referenceOffset;\n\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, _startIndex2, _endIndex2);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tvar referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tvar numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (var j = 0; j < numTimes; ++j) {\n\t\t\t\t\tvar valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (var k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor (var i = 0; i < numTracks; ++i) {\n\t\t\t\tvar _ret = _loop(i);\n\n\t\t\t\tif (_ret === \"continue\") continue;\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tfunction Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\t}\n\n\tObject.assign(Interpolant.prototype, {\n\t\tevaluate: function evaluate(t) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (var giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tvar t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (var _giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === _giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tvar mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t},\n\t\tsettings: null,\n\t\t// optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\t\t// --- Protected interface\n\t\tDefaultSettings_: {},\n\t\tgetSettings_: function getSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t},\n\t\tcopySampleValue_: function copySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// Template methods for derived classes:\n\t\tinterpolate_: function interpolate_()\n\t\t/* i1, t0, t, t1 */\n\t\t{\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t},\n\t\tintervalChanged_: function intervalChanged_()\n\t\t/* i1, t0, t1 */\n\t\t{// empty\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(Interpolant.prototype, {\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_\n\t});\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tfunction CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\t}\n\n\tCubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: CubicInterpolant,\n\t\tDefaultSettings_: {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t},\n\t\tintervalChanged_: function intervalChanged_(i1, t0, t1) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t},\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\tpp = p * p,\n\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tvar sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tvar s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\tfunction LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: LinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tfunction DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: DiscreteInterpolant,\n\t\tinterpolate_: function interpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\t});\n\n\tfunction KeyframeTrack(name, times, values, interpolation) {\n\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\tthis.name = name;\n\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t} // Static methods\n\n\n\tObject.assign(KeyframeTrack, {\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\t\ttoJSON: function toJSON(track) {\n\t\t\tvar trackType = track.constructor;\n\t\t\tvar json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== undefined) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t}\n\t});\n\tObject.assign(KeyframeTrack.prototype, {\n\t\tconstructor: KeyframeTrack,\n\t\tTimeBufferType: Float32Array,\n\t\tValueBufferType: Float32Array,\n\t\tDefaultInterpolation: InterpolateLinear,\n\t\tInterpolantFactoryMethodDiscrete: function InterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodSmooth: function InterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tsetInterpolation: function setInterpolation(interpolation) {\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tvar message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t},\n\t\tgetInterpolation: function getInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t},\n\t\tgetValueSize: function getValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t},\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function shift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function scale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function trim(startTime, endTime) {\n\t\t\tvar times = this.times,\n\t\t\t\t\tnKeys = times.length;\n\t\t\tvar from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function validate() {\n\t\t\tvar valid = true;\n\t\t\tvar valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\t\tvalues = this.values,\n\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor (var i = 0; i !== nKeys; i++) {\n\t\t\t\tvar currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (var _i = 0, n = values.length; _i !== n; ++_i) {\n\t\t\t\t\t\tvar value = values[_i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, _i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t},\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function optimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tvar writeIndex = 1;\n\n\t\t\tfor (var i = 1; i < lastIndex; ++i) {\n\t\t\t\tvar keep = false;\n\t\t\t\tvar time = times[i];\n\t\t\t\tvar timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== time[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvar value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (var _j = 0; _j !== stride; ++_j) {\n\t\t\t\t\t\t\tvalues[writeOffset + _j] = values[readOffset + _j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (var _readOffset = lastIndex * stride, _writeOffset = writeIndex * stride, _j2 = 0; _j2 !== stride; ++_j2) {\n\t\t\t\t\tvalues[_writeOffset + _j2] = values[_readOffset + _j2];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\tvar times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tvar values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t}\n\t});\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tfunction BooleanKeyframeTrack(name, times, values) {\n\t\tKeyframeTrack.call(this, name, times, values);\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: BooleanKeyframeTrack,\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined // Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t});\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tfunction ColorKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: ColorKeyframeTrack,\n\t\tValueTypeName: 'color' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t});\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tfunction NumberKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: NumberKeyframeTrack,\n\t\tValueTypeName: 'number' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\n\t});\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tfunction QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: QuaternionLinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tvar offset = i1 * stride;\n\n\t\t\tfor (var end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tfunction QuaternionKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: QuaternionKeyframeTrack,\n\t\tValueTypeName: 'quaternion',\n\t\t// ValueBufferType is inherited\n\t\tDefaultInterpolation: InterpolateLinear,\n\t\tInterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t});\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tfunction StringKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: StringKeyframeTrack,\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\t});\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tfunction VectorKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: VectorKeyframeTrack,\n\t\tValueTypeName: 'vector' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\n\t});\n\n\tfunction AnimationClip(name, duration, tracks, blendMode) {\n\t\tif (duration === void 0) {\n\t\t\tduration = -1;\n\t\t}\n\n\t\tif (blendMode === void 0) {\n\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration;\n\t\tthis.blendMode = blendMode;\n\t\tthis.uuid = MathUtils.generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\tif (this.duration < 0) {\n\t\t\tthis.resetDuration();\n\t\t}\n\t}\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tvar times = [],\n\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tObject.assign(AnimationClip, {\n\t\tparse: function parse(json) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (var i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t},\n\t\ttoJSON: function toJSON(clip) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tvar json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (var i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t},\n\t\tCreateFromMorphTargetSequence: function CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < numMorphTargets; i++) {\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new AnimationClip(name, -1, tracks);\n\t\t},\n\t\tfindByName: function findByName(objectOrClipArray, name) {\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\tCreateClipsFromMorphTargetSequences: function CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tvar animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (var i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tvar morphTarget = morphTargets[i];\n\t\t\t\tvar parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tvar name = parts[1];\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor (var _name in animationToMorphTargets) {\n\t\t\t\tclips.push(AnimationClip.CreateFromMorphTargetSequence(_name, animationToMorphTargets[_name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t},\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function addNonemptyTrack(trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\tvar fps = animation.fps || 30;\n\t\t\tvar blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tvar duration = animation.length || -1;\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (var h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tvar animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\t\t\t\t\tvar k = void 0;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (var m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (var morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor (var _m = 0; _m !== animationKeys[k].morphTargets.length; ++_m) {\n\t\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tvar boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t}\n\t});\n\tObject.assign(AnimationClip.prototype, {\n\t\tresetDuration: function resetDuration() {\n\t\t\tvar tracks = this.tracks;\n\t\t\tvar duration = 0;\n\n\t\t\tfor (var i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tvar track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t},\n\t\ttrim: function trim() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tvalidate: function validate() {\n\t\t\tvar valid = true;\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t},\n\t\toptimize: function optimize() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new AnimationClip(this.name, this.duration, tracks, this.blendMode);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\treturn AnimationClip.toJSON(this);\n\t\t}\n\t});\n\n\tvar Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function add(key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function get(key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function remove(key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function clear() {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tfunction LoadingManager(onLoad, onProgress, onError) {\n\t\tvar scope = this;\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function (url) {\n\t\t\titemsTotal++;\n\n\t\t\tif (isLoading === false) {\n\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tisLoading = true;\n\t\t};\n\n\t\tthis.itemEnd = function (url) {\n\t\t\titemsLoaded++;\n\n\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t}\n\n\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\tscope.onLoad();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.itemError = function (url) {\n\t\t\tif (scope.onError !== undefined) {\n\t\t\t\tscope.onError(url);\n\t\t\t}\n\t\t};\n\n\t\tthis.resolveURL = function (url) {\n\t\t\tif (urlModifier) {\n\t\t\t\treturn urlModifier(url);\n\t\t\t}\n\n\t\t\treturn url;\n\t\t};\n\n\t\tthis.setURLModifier = function (transform) {\n\t\t\turlModifier = transform;\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.addHandler = function (regex, loader) {\n\t\t\thandlers.push(regex, loader);\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.removeHandler = function (regex) {\n\t\t\tvar index = handlers.indexOf(regex);\n\n\t\t\tif (index !== -1) {\n\t\t\t\thandlers.splice(index, 2);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.getHandler = function (file) {\n\t\t\tfor (var i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\tvar regex = handlers[i];\n\t\t\t\tvar loader = handlers[i + 1];\n\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\treturn loader;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\tfunction Loader(manager) {\n\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\t}\n\n\tObject.assign(Loader.prototype, {\n\t\tload: function load()\n\t\t/* url, onLoad, onProgress, onError */\n\t\t{},\n\t\tloadAsync: function loadAsync(url, onProgress) {\n\t\t\tvar scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t},\n\t\tparse: function parse()\n\t\t/* data */\n\t\t{},\n\t\tsetCrossOrigin: function setCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t},\n\t\tsetWithCredentials: function setWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetPath: function setPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t},\n\t\tsetResourcePath: function setResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t},\n\t\tsetRequestHeader: function setRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar loading = {};\n\n\tfunction FileLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tFileLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: FileLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tvar request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tvar mimeType = dataUriRegexResult[1];\n\t\t\t\tvar isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tvar data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tvar view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tvar response = this.response;\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (var _i = 0, il = callbacks.length; _i < il; _i++) {\n\t\t\t\t\t\t\tvar callback = callbacks[_i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (var _i2 = 0, _il = callbacks.length; _i2 < _il; _i2++) {\n\t\t\t\t\t\t\tvar _callback = callbacks[_i2];\n\t\t\t\t\t\t\tif (_callback.onError) _callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\n\t\t\t\t\tfor (var _i3 = 0, il = callbacks.length; _i3 < il; _i3++) {\n\t\t\t\t\t\tvar callback = callbacks[_i3];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i4 = 0, il = callbacks.length; _i4 < il; _i4++) {\n\t\t\t\t\t\tvar callback = callbacks[_i4];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i5 = 0, il = callbacks.length; _i5 < il; _i5++) {\n\t\t\t\t\t\tvar callback = callbacks[_i5];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (var header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t},\n\t\tsetResponseType: function setResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetMimeType: function setMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction AnimationLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tAnimationLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: AnimationLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar animations = [];\n\n\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\tvar clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\t});\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: CompressedTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar images = [];\n\t\t\tvar texture = new CompressedTexture();\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (var i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (var f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (var _i = 0; _i < texDatas.mipmapCount; _i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + _i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tfunction ImageLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tImageLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: ImageLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t}\n\t});\n\n\tfunction CubeTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: CubeTextureLoader,\n\t\tload: function load(urls, onLoad, onProgress, onError) {\n\t\t\tvar texture = new CubeTexture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tDataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: DataTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar texture = new DataTexture();\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tvar texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tfunction TextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: TextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar texture = new Texture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tvar isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tfunction Curve() {\n\t\tthis.type = 'Curve';\n\t\tthis.arcLengthDivisions = 200;\n\t}\n\n\tObject.assign(Curve.prototype, {\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\t\tgetPoint: function getPoint()\n\t\t/* t, optionalTarget */\n\t\t{\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t},\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\t\tgetPointAt: function getPointAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t},\n\t\t// Get sequence of points using getPoint( t )\n\t\tgetPoints: function getPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 5;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get sequence of points using getPointAt( u )\n\t\tgetSpacedPoints: function getSpacedPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 5;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get total curve arc length\n\t\tgetLength: function getLength() {\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t},\n\t\t// Get list of cumulative segment lengths\n\t\tgetLengths: function getLengths(divisions) {\n\t\t\tif (divisions === undefined) divisions = this.arcLengthDivisions;\n\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tvar cache = [];\n\t\t\tvar current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tvar sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (var p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t},\n\t\tupdateArcLengths: function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t},\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\tgetUtoTmapping: function getUtoTmapping(u, distance) {\n\t\t\tvar arcLengths = this.getLengths();\n\t\t\tvar i = 0;\n\t\t\tvar il = arcLengths.length;\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tvar low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tvar lengthBefore = arcLengths[i];\n\t\t\tvar lengthAfter = arcLengths[i + 1];\n\t\t\tvar segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tvar t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t},\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\t\tgetTangent: function getTangent(t, optionalTarget) {\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tvar pt1 = this.getPoint(t1);\n\t\t\tvar pt2 = this.getPoint(t2);\n\t\t\tvar tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t},\n\t\tgetTangentAt: function getTangentAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t},\n\t\tcomputeFrenetFrames: function computeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tvar normal = new Vector3();\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs(tangents[0].x);\n\t\t\tvar ty = Math.abs(tangents[0].y);\n\t\t\tvar tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tnormals[_i] = normals[_i - 1].clone();\n\t\t\t\tbinormals[_i] = binormals[_i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[_i - 1], tangents[_i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tvar theta = Math.acos(MathUtils.clamp(tangents[_i - 1].dot(tangents[_i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[_i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[_i].crossVectors(tangents[_i], normals[_i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tvar _theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));\n\n\t\t\t\t_theta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\t_theta = -_theta;\n\t\t\t\t}\n\n\t\t\t\tfor (var _i2 = 1; _i2 <= segments; _i2++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[_i2].applyMatrix4(mat.makeRotationAxis(tangents[_i2], _theta * _i2));\n\n\t\t\t\t\tbinormals[_i2].crossVectors(tangents[_i2], normals[_i2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\tCurve.call(this);\n\t\tthis.type = 'EllipseCurve';\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\t\tthis.aClockwise = aClockwise || false;\n\t\tthis.aRotation = aRotation || 0;\n\t}\n\n\tEllipseCurve.prototype = Object.create(Curve.prototype);\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector2();\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\twhile (deltaAngle < 0) {\n\t\t\tdeltaAngle += twoPi;\n\t\t}\n\n\t\twhile (deltaAngle > twoPi) {\n\t\t\tdeltaAngle -= twoPi;\n\t\t}\n\n\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\tif (samePoints) {\n\t\t\t\tdeltaAngle = 0;\n\t\t\t} else {\n\t\t\t\tdeltaAngle = twoPi;\n\t\t\t}\n\t\t}\n\n\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t} else {\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t}\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos(angle);\n\t\tvar y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\tif (this.aRotation !== 0) {\n\t\t\tvar cos = Math.cos(this.aRotation);\n\t\t\tvar sin = Math.sin(this.aRotation);\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t}\n\n\t\treturn point.set(x, y);\n\t};\n\n\tEllipseCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\t\tthis.aClockwise = source.aClockwise;\n\t\tthis.aRotation = source.aRotation;\n\t\treturn this;\n\t};\n\n\tEllipseCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\t\tdata.aClockwise = this.aClockwise;\n\t\tdata.aRotation = this.aRotation;\n\t\treturn data;\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\t\tthis.aClockwise = json.aClockwise;\n\t\tthis.aRotation = json.aRotation;\n\t\treturn this;\n\t};\n\n\tfunction ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\tEllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\tthis.type = 'ArcCurve';\n\t}\n\n\tArcCurve.prototype = Object.create(EllipseCurve.prototype);\n\tArcCurve.prototype.constructor = ArcCurve;\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tvar c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function initCatmullRom(x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function initNonuniformCatmullRom(x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tvar t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function calc(t) {\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(),\n\t\t\tpy = new CubicPoly(),\n\t\t\tpz = new CubicPoly();\n\n\tfunction CatmullRomCurve3(points, closed, curveType, tension) {\n\t\tif (points === void 0) {\n\t\t\tpoints = [];\n\t\t}\n\n\t\tif (closed === void 0) {\n\t\t\tclosed = false;\n\t\t}\n\n\t\tif (curveType === void 0) {\n\t\t\tcurveType = 'centripetal';\n\t\t}\n\n\t\tif (tension === void 0) {\n\t\t\ttension = 0.5;\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'CatmullRomCurve3';\n\t\tthis.points = points;\n\t\tthis.closed = closed;\n\t\tthis.curveType = curveType;\n\t\tthis.tension = tension;\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create(Curve.prototype);\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\t\tvar p = (l - (this.closed ? 0 : 1)) * t;\n\t\tvar intPoint = Math.floor(p);\n\t\tvar weight = p - intPoint;\n\n\t\tif (this.closed) {\n\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\t\t}\n\n\t\tvar p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif (this.closed || intPoint > 0) {\n\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t} else {\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\tp0 = tmp;\n\t\t}\n\n\t\tvar p1 = points[intPoint % l];\n\t\tvar p2 = points[(intPoint + 1) % l];\n\n\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t} else {\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\tp3 = tmp;\n\t\t}\n\n\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\tvar dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\tvar dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t}\n\n\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\treturn point;\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\tvar point = source.points[i];\n\t\t\tthis.points.push(point.clone());\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\t\treturn this;\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.points = [];\n\n\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\tvar point = this.points[i];\n\t\t\tdata.points.push(point.toArray());\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\t\treturn data;\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\tvar point = json.points[i];\n\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tvar v0 = (p2 - p0) * 0.5;\n\t\tvar v1 = (p3 - p1) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tfunction CubicBezierCurve(v0, v1, v2, v3) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector2();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector2();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector2();\n\t\t}\n\n\t\tif (v3 === void 0) {\n\t\t\tv3 = new Vector2();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'CubicBezierCurve';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\t}\n\n\tCubicBezierCurve.prototype = Object.create(Curve.prototype);\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2,\n\t\t\t\tv3 = this.v3;\n\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\treturn point;\n\t};\n\n\tCubicBezierCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\tthis.v3.copy(source.v3);\n\t\treturn this;\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\t\treturn data;\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\tthis.v3.fromArray(json.v3);\n\t\treturn this;\n\t};\n\n\tfunction CubicBezierCurve3(v0, v1, v2, v3) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector3();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector3();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector3();\n\t\t}\n\n\t\tif (v3 === void 0) {\n\t\t\tv3 = new Vector3();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'CubicBezierCurve3';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create(Curve.prototype);\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2,\n\t\t\t\tv3 = this.v3;\n\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\treturn point;\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\tthis.v3.copy(source.v3);\n\t\treturn this;\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\t\treturn data;\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\tthis.v3.fromArray(json.v3);\n\t\treturn this;\n\t};\n\n\tfunction LineCurve(v1, v2) {\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector2();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector2();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'LineCurve';\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tLineCurve.prototype = Object.create(Curve.prototype);\n\tLineCurve.prototype.constructor = LineCurve;\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\n\t\tif (t === 1) {\n\t\t\tpoint.copy(this.v2);\n\t\t} else {\n\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t}\n\n\t\treturn point;\n\t}; // Line curve is linear, so we can overwrite default getPointAt\n\n\n\tLineCurve.prototype.getPointAt = function (u, optionalTarget) {\n\t\treturn this.getPoint(u, optionalTarget);\n\t};\n\n\tLineCurve.prototype.getTangent = function (t, optionalTarget) {\n\t\tvar tangent = optionalTarget || new Vector2();\n\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\treturn tangent;\n\t};\n\n\tLineCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tLineCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction LineCurve3(v1, v2) {\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector3();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector3();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'LineCurve3';\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tLineCurve3.prototype = Object.create(Curve.prototype);\n\tLineCurve3.prototype.constructor = LineCurve3;\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\n\t\tif (t === 1) {\n\t\t\tpoint.copy(this.v2);\n\t\t} else {\n\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t}\n\n\t\treturn point;\n\t}; // Line curve is linear, so we can overwrite default getPointAt\n\n\n\tLineCurve3.prototype.getPointAt = function (u, optionalTarget) {\n\t\treturn this.getPoint(u, optionalTarget);\n\t};\n\n\tLineCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tLineCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction QuadraticBezierCurve(v0, v1, v2) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector2();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector2();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector2();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'QuadraticBezierCurve';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create(Curve.prototype);\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2;\n\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\treturn point;\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction QuadraticBezierCurve3(v0, v1, v2) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector3();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector3();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector3();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'QuadraticBezierCurve3';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create(Curve.prototype);\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2;\n\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\treturn point;\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction SplineCurve(points) {\n\t\tif (points === void 0) {\n\t\t\tpoints = [];\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'SplineCurve';\n\t\tthis.points = points;\n\t}\n\n\tSplineCurve.prototype = Object.create(Curve.prototype);\n\tSplineCurve.prototype.constructor = SplineCurve;\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar points = this.points;\n\t\tvar p = (points.length - 1) * t;\n\t\tvar intPoint = Math.floor(p);\n\t\tvar weight = p - intPoint;\n\t\tvar p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\tvar p1 = points[intPoint];\n\t\tvar p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\tvar p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\treturn point;\n\t};\n\n\tSplineCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\tvar point = source.points[i];\n\t\t\tthis.points.push(point.clone());\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.points = [];\n\n\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\tvar point = this.points[i];\n\t\t\tdata.points.push(point.toArray());\n\t\t}\n\n\t\treturn data;\n\t};\n\n\tSplineCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\tvar point = json.points[i];\n\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\t\tCurve.call(this);\n\t\tthis.type = 'CurvePath';\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\t}\n\n\tCurvePath.prototype = Object.assign(Object.create(Curve.prototype), {\n\t\tconstructor: CurvePath,\n\t\tadd: function add(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t},\n\t\tclosePath: function closePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[0].getPoint(0);\n\t\t\tvar endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t},\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\t\tgetPoint: function getPoint(t) {\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tvar diff = curveLengths[i] - d;\n\t\t\t\t\tvar curve = this.curves[i];\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t},\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\t\tgetLength: function getLength() {\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t},\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t},\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\tgetCurveLengths: function getCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tvar lengths = [];\n\t\t\tvar sums = 0;\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t},\n\t\tgetSpacedPoints: function getSpacedPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 40;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\tgetPoints: function getPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 12;\n\t\t\t}\n\n\t\t\tvar points = [];\n\t\t\tvar last;\n\n\t\t\tfor (var i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tvar curve = curves[i];\n\t\t\t\tvar resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tvar pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (var j = 0; j < pts.length; j++) {\n\t\t\t\t\tvar point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tCurve.prototype.copy.call(this, source);\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tvar curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tvar curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tCurve.prototype.fromJSON.call(this, json);\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tvar curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Path(points) {\n\t\tCurvePath.call(this);\n\t\tthis.type = 'Path';\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif (points) {\n\t\t\tthis.setFromPoints(points);\n\t\t}\n\t}\n\n\tPath.prototype = Object.assign(Object.create(CurvePath.prototype), {\n\t\tconstructor: Path,\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (var i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tmoveTo: function moveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t},\n\t\tlineTo: function lineTo(x, y) {\n\t\t\tvar curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tquadraticCurveTo: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tvar curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tbezierCurveTo: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tvar curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tsplineThru: function splineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tvar npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tvar curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t},\n\t\tarc: function arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t},\n\t\tabsarc: function absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t},\n\t\tellipse: function ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t},\n\t\tabsellipse: function absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tvar lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tCurvePath.prototype.copy.call(this, source);\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = CurvePath.prototype.toJSON.call(this);\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tCurvePath.prototype.fromJSON.call(this, json);\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Shape(points) {\n\t\tPath.call(this, points);\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.type = 'Shape';\n\t\tthis.holes = [];\n\t}\n\n\tShape.prototype = Object.assign(Object.create(Path.prototype), {\n\t\tconstructor: Shape,\n\t\tgetPointsHoles: function getPointsHoles(divisions) {\n\t\t\tvar holesPts = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t},\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\t\textractPoints: function extractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tPath.prototype.copy.call(this, source);\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tvar hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = Path.prototype.toJSON.call(this);\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tvar hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tPath.prototype.fromJSON.call(this, json);\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tvar hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Light(color, intensity) {\n\t\tif (intensity === void 0) {\n\t\t\tintensity = 1;\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Light';\n\t\tthis.color = new Color(color);\n\t\tthis.intensity = intensity;\n\t}\n\n\tLight.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Light,\n\t\tisLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction HemisphereLight(skyColor, groundColor, intensity) {\n\t\tLight.call(this, skyColor, intensity);\n\t\tthis.type = 'HemisphereLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.groundColor = new Color(groundColor);\n\t}\n\n\tHemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: HemisphereLight,\n\t\tisHemisphereLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction LightShadow(camera) {\n\t\tthis.camera = camera;\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.mapSize = new Vector2(512, 512);\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2(1, 1);\n\t\tthis._viewportCount = 1;\n\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t}\n\n\tObject.assign(LightShadow.prototype, {\n\t\t_projScreenMatrix: new Matrix4(),\n\t\t_lightPositionWorld: new Vector3(),\n\t\t_lookTarget: new Vector3(),\n\t\tgetViewportCount: function getViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t},\n\t\tgetFrustum: function getFrustum() {\n\t\t\treturn this._frustum;\n\t\t},\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\t\t\tlightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\t\t\tshadowCamera.position.copy(lightPositionWorld);\n\t\t\tlookTarget.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\tshadowCamera.lookAt(lookTarget);\n\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\tprojScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(projScreenMatrix);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t},\n\t\tgetViewport: function getViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t},\n\t\tgetFrameExtents: function getFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t}\n\t});\n\n\tfunction SpotLightShadow() {\n\t\tLightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));\n\t\tthis.focus = 1;\n\t}\n\n\tSpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: SpotLightShadow,\n\t\tisSpotLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tvar camera = this.camera;\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call(this, light);\n\t\t}\n\t});\n\n\tfunction SpotLight(color, intensity, distance, angle, penumbra, decay) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'SpotLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.target = new Object3D();\n\t\tObject.defineProperty(this, 'power', {\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t}\n\t\t});\n\t\tthis.distance = distance !== undefined ? distance : 0;\n\t\tthis.angle = angle !== undefined ? angle : Math.PI / 3;\n\t\tthis.penumbra = penumbra !== undefined ? penumbra : 0;\n\t\tthis.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\t}\n\n\tSpotLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: SpotLight,\n\t\tisSpotLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction PointLightShadow() {\n\t\tLightShadow.call(this, new PerspectiveCamera(90, 1, 0.5, 500));\n\t\tthis._frameExtents = new Vector2(4, 2);\n\t\tthis._viewportCount = 6;\n\t\tthis._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t// following orientation:\n\t\t//\n\t\t//\txzXZ\n\t\t//\t y Y\n\t\t//\n\t\t// X - Positive x direction\n\t\t// x - Negative x direction\n\t\t// Y - Positive y direction\n\t\t// y - Negative y direction\n\t\t// Z - Positive z direction\n\t\t// z - Negative z direction\n\t\t// positive X\n\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\tnew Vector4(1, 0, 1, 1)];\n\t\tthis._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\tthis._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t}\n\n\tPointLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: PointLightShadow,\n\t\tisPointLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light, viewportIndex) {\n\t\t\tif (viewportIndex === void 0) {\n\t\t\t\tviewportIndex = 0;\n\t\t\t}\n\n\t\t\tvar camera = this.camera,\n\t\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\t\t\tlightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\t\t\tcamera.position.copy(lightPositionWorld);\n\t\t\tlookTarget.copy(camera.position);\n\t\t\tlookTarget.add(this._cubeDirections[viewportIndex]);\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(lookTarget);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-lightPositionWorld.x, -lightPositionWorld.y, -lightPositionWorld.z);\n\t\t\tprojScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(projScreenMatrix);\n\t\t}\n\t});\n\n\tfunction PointLight(color, intensity, distance, decay) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'PointLight';\n\t\tObject.defineProperty(this, 'power', {\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t\t}\n\t\t});\n\t\tthis.distance = distance !== undefined ? distance : 0;\n\t\tthis.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\t}\n\n\tPointLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: PointLight,\n\t\tisPointLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction OrthographicCamera(left, right, top, bottom, near, far) {\n\t\tif (left === void 0) {\n\t\t\tleft = -1;\n\t\t}\n\n\t\tif (right === void 0) {\n\t\t\tright = 1;\n\t\t}\n\n\t\tif (top === void 0) {\n\t\t\ttop = 1;\n\t\t}\n\n\t\tif (bottom === void 0) {\n\t\t\tbottom = -1;\n\t\t}\n\n\t\tif (near === void 0) {\n\t\t\tnear = 0.1;\n\t\t}\n\n\t\tif (far === void 0) {\n\t\t\tfar = 2000;\n\t\t}\n\n\t\tCamera.call(this);\n\t\tthis.type = 'OrthographicCamera';\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.updateProjectionMatrix();\n\t}\n\n\tOrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n\t\tconstructor: OrthographicCamera,\n\t\tisOrthographicCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tCamera.prototype.copy.call(this, source, recursive);\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t},\n\t\tsetViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tclearViewOffset: function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tupdateProjectionMatrix: function updateProjectionMatrix() {\n\t\t\tvar dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tvar dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tvar cx = (this.right + this.left) / 2;\n\t\t\tvar cy = (this.top + this.bottom) / 2;\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction DirectionalLightShadow() {\n\t\tLightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: DirectionalLightShadow,\n\t\tisDirectionalLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tLightShadow.prototype.updateMatrices.call(this, light);\n\t\t}\n\t});\n\n\tfunction DirectionalLight(color, intensity) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'DirectionalLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.target = new Object3D();\n\t\tthis.shadow = new DirectionalLightShadow();\n\t}\n\n\tDirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: DirectionalLight,\n\t\tisDirectionalLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction AmbientLight(color, intensity) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'AmbientLight';\n\t}\n\n\tAmbientLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: AmbientLight,\n\t\tisAmbientLight: true\n\t});\n\n\tfunction RectAreaLight(color, intensity, width, height) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'RectAreaLight';\n\t\tthis.width = width !== undefined ? width : 10;\n\t\tthis.height = height !== undefined ? height : 10;\n\t}\n\n\tRectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: RectAreaLight,\n\t\tisRectAreaLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Light.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tvar SphericalHarmonics3 = /*#__PURE__*/function () {\n\t\tfunction SphericalHarmonics3() {\n\t\t\tObject.defineProperty(this, 'isSphericalHarmonics3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = SphericalHarmonics3.prototype;\n\n\t\t_proto.set = function set(coefficients) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.zero = function zero() {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\t;\n\n\t\t_proto.getAt = function getAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\t;\n\n\t\t_proto.getIrradianceAt = function getIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.add = function add(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledSH = function addScaledSH(sh, s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(sh, alpha) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.copy = function copy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\t;\n\n\t\tSphericalHarmonics3.getBasisAt = function getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t};\n\n\t\treturn SphericalHarmonics3;\n\t}();\n\n\tfunction LightProbe(sh, intensity) {\n\t\tLight.call(this, undefined, intensity);\n\t\tthis.type = 'LightProbe';\n\t\tthis.sh = sh !== undefined ? sh : new SphericalHarmonics3();\n\t}\n\n\tLightProbe.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: LightProbe,\n\t\tisLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Light.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction MaterialLoader(manager) {\n\t\tLoader.call(this, manager);\n\t\tthis.textures = {};\n\t}\n\n\tMaterialLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: MaterialLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tvar material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.skinning !== undefined) material.skinning = json.skinning;\n\t\t\tif (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n\t\t\tif (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (var name in json.uniforms) {\n\t\t\t\t\tvar uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (var key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\treturn material;\n\t\t},\n\t\tsetTextures: function setTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar LoaderUtils = {\n\t\tdecodeText: function decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tvar s = '';\n\n\t\t\tfor (var i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t},\n\t\textractUrlBase: function extractUrlBase(url) {\n\t\t\tvar index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\t};\n\n\tfunction InstancedBufferGeometry() {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {\n\t\tconstructor: InstancedBufferGeometry,\n\t\tisInstancedBufferGeometry: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferGeometry.prototype.copy.call(this, source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {\n\t\tif (typeof normalized === 'number') {\n\t\t\tmeshPerAttribute = normalized;\n\t\t\tnormalized = false;\n\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t}\n\n\t\tBufferAttribute.call(this, array, itemSize, normalized);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {\n\t\tconstructor: InstancedBufferAttribute,\n\t\tisInstancedBufferAttribute: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferAttribute.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call(this);\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction BufferGeometryLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: BufferGeometryLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar interleavedBufferMap = {};\n\t\t\tvar arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tvar interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tvar interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tvar buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tvar array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tvar ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tvar arrayBuffers = json.arrayBuffers;\n\t\t\t\tvar arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tvar ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tvar index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar bufferAttribute = void 0;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tvar interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tvar _typedArray = getTypedArray(attribute.type, attribute.array);\n\n\t\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(_typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (var _key in morphAttributes) {\n\t\t\t\t\tvar attributeArray = morphAttributes[_key];\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tvar _attribute = attributeArray[i];\n\n\t\t\t\t\t\tvar _bufferAttribute = void 0;\n\n\t\t\t\t\t\tif (_attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar _interleavedBuffer = getInterleavedBuffer(json.data, _attribute.data);\n\n\t\t\t\t\t\t\t_bufferAttribute = new InterleavedBufferAttribute(_interleavedBuffer, _attribute.itemSize, _attribute.offset, _attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _typedArray2 = getTypedArray(_attribute.type, _attribute.array);\n\n\t\t\t\t\t\t\t_bufferAttribute = new BufferAttribute(_typedArray2, _attribute.itemSize, _attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (_attribute.name !== undefined) _bufferAttribute.name = _attribute.name;\n\t\t\t\t\t\tarray.push(_bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[_key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (var _i = 0, n = groups.length; _i !== n; ++_i) {\n\t\t\t\t\tvar group = groups[_i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t}\n\t});\n\n\tvar ObjectLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(ObjectLoader, _Loader);\n\n\t\tfunction ObjectLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = ObjectLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json, onLoad) {\n\t\t\tvar animations = this.parseAnimations(json.animations);\n\t\t\tvar shapes = this.parseShapes(json.shapes);\n\t\t\tvar geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tvar images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tvar textures = this.parseTextures(json.textures, images);\n\t\t\tvar materials = this.parseMaterials(json.materials, textures);\n\t\t\tvar object = this.parseObject(json.object, geometries, materials, animations);\n\t\t\tvar skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tvar hasImages = false;\n\n\t\t\t\tfor (var uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t};\n\n\t\t_proto.parseShapes = function parseShapes(json) {\n\t\t\tvar shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\t_proto.parseSkeletons = function parseSkeletons(json, object) {\n\t\t\tvar skeletons = {};\n\t\t\tvar bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t};\n\n\t\t_proto.parseGeometries = function parseGeometries(json, shapes) {\n\t\t\tvar geometries = {};\n\t\t\tvar geometryShapes;\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar geometry = void 0;\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry':\n\t\t\t\t\t\t\t// backwards compatible\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.detail);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tvar shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var _j = 0, _jl = data.shapes.length; _j < _jl; _j++) {\n\t\t\t\t\t\t\t\tvar _shape = shapes[data.shapes[_j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(_shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif (extrudePath !== undefined) {\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.options);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t};\n\n\t\t_proto.parseMaterials = function parseMaterials(json, textures) {\n\t\t\tvar cache = {}; // MultiMaterial\n\n\t\t\tvar materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tvar material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t};\n\n\t\t_proto.parseAnimations = function parseAnimations(json) {\n\t\t\tvar animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\t\tvar data = json[i];\n\t\t\t\t\tvar clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t};\n\n\t\t_proto.parseImages = function parseImages(json, onLoad) {\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\t\t\tvar loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tvar url = image;\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tvar manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (var i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tvar image = json[i];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (var j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tvar currentUrl = url[j];\n\t\t\t\t\t\t\tvar deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tvar _deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (_deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = _deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t};\n\n\t\t_proto.parseTextures = function parseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = void 0;\n\t\t\t\t\tvar image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t};\n\n\t\t_proto.parseObject = function parseObject(data, geometries, materials, animations) {\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tvar uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tvar geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tvar objectAnimations = data.animations;\n\n\t\t\t\tfor (var _i = 0; _i < objectAnimations.length; _i++) {\n\t\t\t\t\tvar uuid = objectAnimations[_i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor (var l = 0; l < levels.length; l++) {\n\t\t\t\t\tvar level = levels[l];\n\t\t\t\t\tvar child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t};\n\n\t\t_proto.bindSkeletons = function bindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tvar skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\t\t;\n\n\t\t_proto.setTexturePath = function setTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t};\n\n\t\treturn ObjectLoader;\n\t}(Loader);\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tfunction ImageBitmapLoader(manager) {\n\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t}\n\n\t\tif (typeof fetch === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t}\n\n\t\tLoader.call(this, manager);\n\t\tthis.options = {\n\t\t\tpremultiplyAlpha: 'none'\n\t\t};\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: ImageBitmapLoader,\n\t\tisImageBitmapLoader: true,\n\t\tsetOptions: function setOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t},\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, scope.options);\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\t});\n\n\tfunction ShapePath() {\n\t\tthis.type = 'ShapePath';\n\t\tthis.color = new Color();\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\t}\n\n\tObject.assign(ShapePath.prototype, {\n\t\tmoveTo: function moveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tlineTo: function lineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tquadraticCurveTo: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tbezierCurveTo: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tsplineThru: function splineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t},\n\t\ttoShapes: function toShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor (var i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tvar _tmpPath = inSubpaths[i];\n\n\t\t\t\t\tvar _tmpShape = new Shape();\n\n\t\t\t\t\t_tmpShape.curves = _tmpPath.curves;\n\t\t\t\t\tshapes.push(_tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tvar polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tvar inside = false;\n\n\t\t\t\tfor (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tvar edgeLowPt = inPolygon[p];\n\t\t\t\t\tvar edgeHighPt = inPolygon[q];\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tvar solid, tmpPath, tmpShape;\n\t\t\tvar shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tvar holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (var i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var _sIdx = 0, _sLen = newShapes.length; _sIdx < _sLen; _sIdx++) {\n\t\t\t\t\tvar sho = newShapeHoles[_sIdx];\n\n\t\t\t\t\tfor (var hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tvar ho = sho[hIdx];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (_sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: _sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[_sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor (var _i = 0, il = newShapes.length; _i < il; _i++) {\n\t\t\t\ttmpShape = newShapes[_i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[_i];\n\n\t\t\t\tfor (var j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t}\n\t});\n\n\tfunction Font(data) {\n\t\tthis.type = 'Font';\n\t\tthis.data = data;\n\t}\n\n\tObject.assign(Font.prototype, {\n\t\tisFont: true,\n\t\tgenerateShapes: function generateShapes(text, size) {\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 100;\n\t\t\t}\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths(text, size, this.data);\n\n\t\t\tfor (var p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\t});\n\n\tfunction createPaths(text, size, data) {\n\t\tvar chars = Array.from ? Array.from(text) : String(text).split(''); // workaround for IE11, see #13988\n\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tvar paths = [];\n\t\tvar offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (var i = 0; i < chars.length; i++) {\n\t\t\tvar char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tvar ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tvar glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tvar path = new ShapePath();\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tvar outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (var i = 0, l = outline.length; i < l;) {\n\t\t\t\tvar action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tfunction FontLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tFontLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: FontLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\treturn new Font(json);\n\t\t}\n\t});\n\n\tvar _context;\n\n\tvar AudioContext = {\n\t\tgetContext: function getContext() {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function setContext(value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tfunction AudioLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tAudioLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: AudioLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tvar bufferCopy = buffer.slice(0);\n\t\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\t});\n\n\tfunction HemisphereLightProbe(skyColor, groundColor, intensity) {\n\t\tLightProbe.call(this, undefined, intensity);\n\t\tvar color1 = new Color().set(skyColor);\n\t\tvar color2 = new Color().set(groundColor);\n\t\tvar sky = new Vector3(color1.r, color1.g, color1.b);\n\t\tvar ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\tvar c0 = Math.sqrt(Math.PI);\n\t\tvar c1 = c0 * Math.sqrt(0.75);\n\t\tthis.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\t\tthis.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {\n\t\tconstructor: HemisphereLightProbe,\n\t\tisHemisphereLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\t// modifying colors not currently supported\n\t\t\tLightProbe.prototype.copy.call(this, source);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = LightProbe.prototype.toJSON.call(this, meta); // data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction AmbientLightProbe(color, intensity) {\n\t\tLightProbe.call(this, undefined, intensity);\n\t\tvar color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\tthis.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {\n\t\tconstructor: AmbientLightProbe,\n\t\tisAmbientLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\t// modifying color not currently supported\n\t\t\tLightProbe.prototype.copy.call(this, source);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = LightProbe.prototype.toJSON.call(this, meta); // data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar _eyeRight = new Matrix4();\n\n\tvar _eyeLeft = new Matrix4();\n\n\tfunction StereoCamera() {\n\t\tthis.type = 'StereoCamera';\n\t\tthis.aspect = 1;\n\t\tthis.eyeSep = 0.064;\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable(1);\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable(2);\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\t}\n\n\tObject.assign(StereoCamera.prototype, {\n\t\tupdate: function update(camera) {\n\t\t\tvar cache = this._cache;\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tvar xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t}\n\t});\n\n\tvar Clock = /*#__PURE__*/function () {\n\t\tfunction Clock(autoStart) {\n\t\t\tthis.autoStart = autoStart !== undefined ? autoStart : true;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tvar _proto = Clock.prototype;\n\n\t\t_proto.start = function start() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t};\n\n\t\t_proto.getElapsedTime = function getElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t};\n\n\t\t_proto.getDelta = function getDelta() {\n\t\t\tvar diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tvar newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t};\n\n\t\treturn Clock;\n\t}();\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tvar _position$2 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$1 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation = /*@__PURE__*/new Vector3();\n\n\tvar AudioListener = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(AudioListener, _Object3D);\n\n\t\tfunction AudioListener() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'AudioListener';\n\t\t\t_this.context = AudioContext.getContext();\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(_this.context.destination);\n\n\t\t\t_this.filter = null;\n\t\t\t_this.timeDelta = 0; // private\n\n\t\t\t_this._clock = new Clock();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = AudioListener.prototype;\n\n\t\t_proto.getInput = function getInput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.removeFilter = function removeFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.filter;\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMasterVolume = function getMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setMasterVolume = function setMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Object3D.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$2, _quaternion$3, _scale$1);\n\n\t\t\t_orientation.set(0, 0, -1).applyQuaternion(_quaternion$3);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$2.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$2.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$2.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$2.x, _position$2.y, _position$2.z);\n\t\t\t\tlistener.setOrientation(_orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t};\n\n\t\treturn AudioListener;\n\t}(Object3D);\n\n\tvar Audio = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Audio, _Object3D);\n\n\t\tfunction Audio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Audio';\n\t\t\t_this.listener = listener;\n\t\t\t_this.context = listener.context;\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(listener.getInput());\n\n\t\t\t_this.autoplay = false;\n\t\t\t_this.buffer = null;\n\t\t\t_this.detune = 0;\n\t\t\t_this.loop = false;\n\t\t\t_this.loopStart = 0;\n\t\t\t_this.loopEnd = 0;\n\t\t\t_this.offset = 0;\n\t\t\t_this.duration = undefined;\n\t\t\t_this.playbackRate = 1;\n\t\t\t_this.isPlaying = false;\n\t\t\t_this.hasPlaybackControl = true;\n\t\t\t_this.source = null;\n\t\t\t_this.sourceType = 'empty';\n\t\t\t_this._startedAt = 0;\n\t\t\t_this._progress = 0;\n\t\t\t_this._connected = false;\n\t\t\t_this.filters = [];\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Audio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.setNodeSource = function setNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaElementSource = function setMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaStreamSource = function setMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setBuffer = function setBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.play = function play(delay) {\n\t\t\tif (delay === void 0) {\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t};\n\n\t\t_proto.pause = function pause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.connect = function connect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.disconnect = function disconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilters = function getFilters() {\n\t\t\treturn this.filters;\n\t\t};\n\n\t\t_proto.setFilters = function setFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDetune = function setDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDetune = function getDetune() {\n\t\t\treturn this.detune;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t};\n\n\t\t_proto.setPlaybackRate = function setPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getPlaybackRate = function getPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t};\n\n\t\t_proto.onEnded = function onEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t};\n\n\t\t_proto.getLoop = function getLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopStart = function setLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopEnd = function setLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getVolume = function getVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setVolume = function setVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Audio;\n\t}(Object3D);\n\n\tvar _position$3 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$2 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tvar PositionalAudio = /*#__PURE__*/function (_Audio) {\n\t\t_inheritsLoose(PositionalAudio, _Audio);\n\n\t\tfunction PositionalAudio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Audio.call(this, listener) || this;\n\t\t\t_this.panner = _this.context.createPanner();\n\t\t\t_this.panner.panningModel = 'HRTF';\n\n\t\t\t_this.panner.connect(_this.gain);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PositionalAudio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.panner;\n\t\t};\n\n\t\t_proto.getRefDistance = function getRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t};\n\n\t\t_proto.setRefDistance = function setRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getRolloffFactor = function getRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t};\n\n\t\t_proto.setRolloffFactor = function setRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDistanceModel = function getDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t};\n\n\t\t_proto.setDistanceModel = function setDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxDistance = function getMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t};\n\n\t\t_proto.setMaxDistance = function setMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDirectionalCone = function setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Audio.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$4, _scale$2);\n\n\t\t\t_orientation$1.set(0, 0, 1).applyQuaternion(_quaternion$4);\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position$3.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position$3.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position$3.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position$3.x, _position$3.y, _position$3.z);\n\t\t\t\tpanner.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z);\n\t\t\t}\n\t\t};\n\n\t\treturn PositionalAudio;\n\t}(Audio);\n\n\tvar AudioAnalyser = /*#__PURE__*/function () {\n\t\tfunction AudioAnalyser(audio, fftSize) {\n\t\t\tif (fftSize === void 0) {\n\t\t\t\tfftSize = 2048;\n\t\t\t}\n\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tvar _proto = AudioAnalyser.prototype;\n\n\t\t_proto.getFrequencyData = function getFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t};\n\n\t\t_proto.getAverageFrequency = function getAverageFrequency() {\n\t\t\tvar value = 0;\n\t\t\tvar data = this.getFrequencyData();\n\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t};\n\n\t\treturn AudioAnalyser;\n\t}();\n\n\tfunction PropertyMixer(binding, typeName, valueSize) {\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\t\tvar mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch (typeName) {\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\t}\n\n\tObject.assign(PropertyMixer.prototype, {\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function accumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tvar currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t},\n\t\t// accumulate data in the 'incoming' region into 'add'\n\t\taccumulateAdditive: function accumulateAdditive(weight) {\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t},\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function apply(accuIndex) {\n\t\t\tvar stride = this.valueSize,\n\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tvar originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (var i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function saveOriginalState() {\n\t\t\tvar binding = this.binding;\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (var i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t},\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function restoreOriginalState() {\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t},\n\t\t_setAdditiveIdentityNumeric: function _setAdditiveIdentityNumeric() {\n\t\t\tvar startIndex = this._addIndex * this.valueSize;\n\t\t\tvar endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (var i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t},\n\t\t_setAdditiveIdentityQuaternion: function _setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t},\n\t\t_setAdditiveIdentityOther: function _setAdditiveIdentityOther() {\n\t\t\tvar startIndex = this._origIndex * this.valueSize;\n\t\t\tvar targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (var i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t},\n\t\t// mix functions\n\t\t_select: function _select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t_slerp: function _slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t},\n\t\t_slerpAdditive: function _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t},\n\t\t_lerp: function _lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t},\n\t\t_lerpAdditive: function _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tvar _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tvar _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tvar _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tvar _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tfunction Composite(targetGroup, path, optionalParsedPath) {\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t}\n\n\tObject.assign(Composite.prototype, {\n\t\tgetValue: function getValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t},\n\t\tsetValue: function setValue(array, offset) {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t},\n\t\tbind: function bind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction PropertyBinding(rootNode, path, parsedPath) {\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\tthis.rootNode = rootNode;\n\t}\n\n\tObject.assign(PropertyBinding, {\n\t\tComposite: Composite,\n\t\tcreate: function create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t},\n\t\tparseTrackName: function parseTrackName(trackName) {\n\t\t\tvar matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tvar objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t},\n\t\tfindNode: function findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tvar bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tvar searchNodeSubtree = function searchNodeSubtree(children) {\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\tvar childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t});\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// prototype, continued\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function _getValue_unavailable() {},\n\t\t_setValue_unavailable: function _setValue_unavailable() {},\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\t\tGetterByBindingType: [function getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.node[this.propertyName];\n\t\t}, function getValue_array(buffer, offset) {\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}, function getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}, function getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t}],\n\t\tSetterByBindingTypeAndVersioning: [[// Direct\n\t\tfunction setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}, function setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// EntireArray\n\t\tfunction setValue_array(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}, function setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// ArrayElement\n\t\tfunction setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}, function setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// HasToFromArray\n\t\tfunction setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}, function setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}]],\n\t\tgetValue: function getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset); // Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\t\t},\n\t\tsetValue: function getValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t},\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function bind() {\n\t\t\tvar targetObject = this.node;\n\t\t\tvar parsedPath = this.parsedPath;\n\t\t\tvar objectName = parsedPath.objectName;\n\t\t\tvar propertyName = parsedPath.propertyName;\n\t\t\tvar propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tvar objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (var i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tvar nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tvar versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue\n\t});\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tfunction AnimationObjectGroup() {\n\t\tthis.uuid = MathUtils.generateUUID(); // cached objects followed by the active ones\n\n\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\tindices[arguments[i].uuid] = i;\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\t\tthis.stats = {\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t},\n\n\t\t\t\tget inUse() {\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tget bindingsPerObject() {\n\t\t\t\treturn scope._bindings.length;\n\t\t\t}\n\n\t\t};\n\t}\n\n\tObject.assign(AnimationObjectGroup.prototype, {\n\t\tisAnimationObjectGroup: true,\n\t\tadd: function add() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tvar index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var _j = 0, _m = nBindings; _j !== _m; ++_j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[_j],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tvar binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[_j], parsedPaths[_j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\tremove: function remove() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\t// remove & forget\n\t\tuncache: function uncache() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tvar _lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t_lastObject = objects[_lastIndex];\n\n\t\t\t\t\t\tif (_lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[_lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = _lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var _j2 = 0, _m2 = nBindings; _j2 !== _m2; ++_j2) {\n\t\t\t\t\t\t\tvar _bindingsForPath = bindings[_j2];\n\t\t\t\t\t\t\t_bindingsForPath[index] = _bindingsForPath[_lastIndex];\n\n\t\t\t\t\t\t\t_bindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\t\tsubscribe_: function subscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath;\n\t\t\tvar index = indicesByPath[path];\n\t\t\tvar bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (var i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tvar object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t},\n\t\tunsubscribe_: function unsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t}\n\t});\n\n\tvar AnimationAction = /*#__PURE__*/function () {\n\t\tfunction AnimationAction(mixer, clip, localRoot, blendMode) {\n\t\t\tif (localRoot === void 0) {\n\t\t\t\tlocalRoot = null;\n\t\t\t}\n\n\t\t\tif (blendMode === void 0) {\n\t\t\t\tblendMode = clip.blendMode;\n\t\t\t}\n\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tvar tracks = clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tvar interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tvar _proto = AnimationAction.prototype;\n\n\t\t_proto.play = function play() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t};\n\n\t\t_proto.reset = function reset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t};\n\n\t\t_proto.isRunning = function isRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\t\t;\n\n\t\t_proto.isScheduled = function isScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t};\n\n\t\t_proto.startAt = function startAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveWeight = function setEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\t\t;\n\n\t\t_proto.getEffectiveWeight = function getEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t};\n\n\t\t_proto.fadeIn = function fadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t};\n\n\t\t_proto.fadeOut = function fadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t};\n\n\t\t_proto.crossFadeFrom = function crossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.crossFadeTo = function crossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t};\n\n\t\t_proto.stopFading = function stopFading() {\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveTimeScale = function setEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\t\t;\n\n\t\t_proto.getEffectiveTimeScale = function getEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t};\n\n\t\t_proto.setDuration = function setDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.syncWith = function syncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.halt = function halt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t};\n\n\t\t_proto.warp = function warp(startTimeScale, endTimeScale, duration) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stopWarping = function stopWarping() {\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\t\t;\n\n\t\t_proto.getMixer = function getMixer() {\n\t\t\treturn this._mixer;\n\t\t};\n\n\t\t_proto.getClip = function getClip() {\n\t\t\treturn this._clip;\n\t\t};\n\n\t\t_proto.getRoot = function getRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\t\t;\n\n\t\t_proto._update = function _update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tvar timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tvar clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tvar weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tvar _interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (var j = 0, m = _interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\t_interpolants[j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (var _j = 0, _m = _interpolants.length; _j !== _m; ++_j) {\n\t\t\t\t\t\t\t_interpolants[_j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[_j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._updateWeight = function _updateWeight(time) {\n\t\t\tvar weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t};\n\n\t\t_proto._updateTimeScale = function _updateTimeScale(time) {\n\t\t\tvar timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t};\n\n\t\t_proto._updateTime = function _updateTime(deltaTime) {\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar loopCount = this._loopCount;\n\t\t\tvar pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tvar loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t};\n\n\t\t_proto._setEndings = function _setEndings(atStart, atEnd, pingPong) {\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._scheduleFading = function _scheduleFading(duration, weightNow, weightThen) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn AnimationAction;\n\t}();\n\n\tfunction AnimationMixer(root) {\n\t\tthis._root = root;\n\n\t\tthis._initMemoryManager();\n\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\t}\n\n\tAnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: AnimationMixer,\n\t\t_bindAction: function _bindAction(action, prototypeAction) {\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tvar bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar track = tracks[i],\n\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tvar binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t},\n\t\t_activateAction: function _activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tvar rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t},\n\t\t_deactivateAction: function _deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tvar bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t},\n\t\t// Memory manager\n\t\t_initMemoryManager: function _initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tvar scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t// Memory management for AnimationAction objects\n\t\t_isActiveAction: function _isActiveAction(action) {\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t},\n\t\t_addInactiveAction: function _addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tvar actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t},\n\t\t_removeInactiveAction: function _removeInactiveAction(action) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t},\n\t\t_removeInactiveBindingsForAction: function _removeInactiveBindingsForAction(action) {\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t_lendAction: function _lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t},\n\t\t_takeBackAction: function _takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t},\n\t\t// Memory management for PropertyMixer objects\n\t\t_addInactiveBinding: function _addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindings = this._bindings;\n\t\t\tvar bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t},\n\t\t_removeInactiveBinding: function _removeInactiveBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t},\n\t\t_lendBinding: function _lendBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t},\n\t\t_takeBackBinding: function _takeBackBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t},\n\t\t// Memory management of Interpolants for weight and time scale\n\t\t_lendControlInterpolant: function _lendControlInterpolant() {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tvar interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t},\n\t\t_takeBackControlInterpolant: function _takeBackControlInterpolant(interpolant) {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t},\n\t\t_controlInterpolantsResultBuffer: new Float32Array(1),\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function clipAction(clip, optionalRoot, blendMode) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid;\n\t\t\tvar clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tvar clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tvar actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tvar prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tvar existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tvar newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t},\n\t\t// get an existing action\n\t\texistingAction: function existingAction(clip, optionalRoot) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function stopAllAction() {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (var i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// advance the time and update apply the animation\n\t\tupdate: function update(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (var i = 0; i !== nActions; ++i) {\n\t\t\t\tvar action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (var _i = 0; _i !== nBindings; ++_i) {\n\t\t\t\tbindings[_i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function setTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (var i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t},\n\t\t// return this mixer's root target object\n\t\tgetRoot: function getRoot() {\n\t\t\treturn this._root;\n\t\t},\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function uncacheClip(clip) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (var i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tvar action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t},\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function uncacheRoot(root) {\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (var clipUuid in actionsByClip) {\n\t\t\t\tvar actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (var trackName in bindingByName) {\n\t\t\t\t\tvar binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function uncacheAction(clip, optionalRoot) {\n\t\t\tvar action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t}\n\t});\n\n\tvar Uniform = /*#__PURE__*/function () {\n\t\tfunction Uniform(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tvar _proto = Uniform.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t};\n\n\t\treturn Uniform;\n\t}();\n\n\tfunction InstancedInterleavedBuffer(array, stride, meshPerAttribute) {\n\t\tInterleavedBuffer.call(this, array, stride);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {\n\t\tconstructor: InstancedInterleavedBuffer,\n\t\tisInstancedInterleavedBuffer: true,\n\t\tcopy: function copy(source) {\n\t\t\tInterleavedBuffer.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tvar ib = InterleavedBuffer.prototype.clone.call(this, data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tvar json = InterleavedBuffer.prototype.toJSON.call(this, data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\t});\n\n\tfunction GLBufferAttribute(buffer, type, itemSize, elementSize, count) {\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(GLBufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(GLBufferAttribute.prototype, {\n\t\tisGLBufferAttribute: true,\n\t\tsetBuffer: function setBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t},\n\t\tsetType: function setType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetItemSize: function setItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetCount: function setCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Raycaster(origin, direction, near, far) {\n\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tLOD: {},\n\t\t\tPoints: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tSprite: {}\n\t\t};\n\t\tObject.defineProperties(this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function get() {\n\t\t\t\t\tconsole.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction _intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t_intersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tObject.assign(Raycaster.prototype, {\n\t\tset: function set(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t},\n\t\tsetFromCamera: function setFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t},\n\t\tintersectObject: function intersectObject(object, recursive, optionalTarget) {\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\t_intersectObject(object, this, intersects, recursive);\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t},\n\t\tintersectObjects: function intersectObjects(objects, recursive, optionalTarget) {\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif (Array.isArray(objects) === false) {\n\t\t\t\tconsole.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');\n\t\t\t\treturn intersects;\n\t\t\t}\n\n\t\t\tfor (var i = 0, l = objects.length; i < l; i++) {\n\t\t\t\t_intersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\t});\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tvar Spherical = /*#__PURE__*/function () {\n\t\tfunction Spherical(radius, phi, theta) {\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (phi === void 0) {\n\t\t\t\tphi = 0;\n\t\t\t}\n\n\t\t\tif (theta === void 0) {\n\t\t\t\ttheta = 0;\n\t\t\t}\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Spherical.prototype;\n\n\t\t_proto.set = function set(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\t\t;\n\n\t\t_proto.makeSafe = function makeSafe() {\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Spherical;\n\t}();\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tvar Cylindrical = /*#__PURE__*/function () {\n\t\tfunction Cylindrical(radius, theta, y) {\n\t\t\tthis.radius = radius !== undefined ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta !== undefined ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y !== undefined ? y : 0; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Cylindrical.prototype;\n\n\t\t_proto.set = function set(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Cylindrical;\n\t}();\n\n\tvar _vector$8 = /*@__PURE__*/new Vector2();\n\n\tvar Box2 = /*#__PURE__*/function () {\n\t\tfunction Box2(min, max) {\n\t\t\tObject.defineProperty(this, 'isBox2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.min = min !== undefined ? min : new Vector2(+Infinity, +Infinity);\n\t\t\tthis.max = max !== undefined ? max : new Vector2(-Infinity, -Infinity);\n\t\t}\n\n\t\tvar _proto = Box2.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$8.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getSize() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$8.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box2;\n\t}();\n\n\tvar _startP = /*@__PURE__*/new Vector3();\n\n\tvar _startEnd = /*@__PURE__*/new Vector3();\n\n\tvar Line3 = /*#__PURE__*/function () {\n\t\tfunction Line3(start, end) {\n\t\t\tthis.start = start !== undefined ? start : new Vector3();\n\t\t\tthis.end = end !== undefined ? end : new Vector3();\n\t\t}\n\n\t\tvar _proto = Line3.prototype;\n\n\t\t_proto.set = function set(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.delta = function delta(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .delta() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t};\n\n\t\t_proto.distanceSq = function distanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t};\n\n\t\t_proto.distance = function distance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.closestPointToPointParameter = function closestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tvar startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tvar startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = MathUtils.clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, clampToLine, target) {\n\t\t\tvar t = this.closestPointToPointParameter(point, clampToLine);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t};\n\n\t\treturn Line3;\n\t}();\n\n\tfunction ImmediateRenderObject(material) {\n\t\tObject3D.call(this);\n\t\tthis.material = material;\n\n\t\tthis.render = function ()\n\t\t/* renderCallback */\n\t\t{};\n\n\t\tthis.hasPositions = false;\n\t\tthis.hasNormals = false;\n\t\tthis.hasColors = false;\n\t\tthis.hasUvs = false;\n\t\tthis.positionArray = null;\n\t\tthis.normalArray = null;\n\t\tthis.colorArray = null;\n\t\tthis.uvArray = null;\n\t\tthis.count = 0;\n\t}\n\n\tImmediateRenderObject.prototype = Object.create(Object3D.prototype);\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tvar _vector$9 = /*@__PURE__*/new Vector3();\n\n\tvar SpotLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(SpotLightHelper, _Object3D);\n\n\t\tfunction SpotLightHelper(light, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tvar p1 = i / l * Math.PI * 2;\n\t\t\t\tvar p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.cone = new LineSegments(geometry, material);\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpotLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$9.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$9);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t};\n\n\t\treturn SpotLightHelper;\n\t}(Object3D);\n\n\tvar _vector$a = /*@__PURE__*/new Vector3();\n\n\tvar _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tvar SkeletonHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(SkeletonHelper, _LineSegments);\n\n\t\tfunction SkeletonHelper(object) {\n\t\t\tvar _this;\n\n\t\t\tvar bones = getBoneList(object);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar color1 = new Color(0, 0, 1);\n\t\t\tvar color2 = new Color(0, 1, 0);\n\n\t\t\tfor (var i = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'SkeletonHelper';\n\t\t\t_this.isSkeletonHelper = true;\n\t\t\t_this.root = object;\n\t\t\t_this.bones = bones;\n\t\t\t_this.matrix = object.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SkeletonHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar bones = this.bones;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (var i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$a.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$a.x, _vector$a.y, _vector$a.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$a.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$a.x, _vector$a.y, _vector$a.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn SkeletonHelper;\n\t}(LineSegments);\n\n\tfunction getBoneList(object) {\n\t\tvar boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (var i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tvar PointLightHelper = /*#__PURE__*/function (_Mesh) {\n\t\t_inheritsLoose(PointLightHelper, _Mesh);\n\n\t\tfunction PointLightHelper(light, sphereSize, color) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new SphereBufferGeometry(sphereSize, 4, 2);\n\t\t\tvar material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _Mesh.call(this, geometry, material) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.color = color;\n\t\t\t_this.type = 'PointLightHelper';\n\t\t\t_this.matrix = _this.light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t};\n\n\t\treturn PointLightHelper;\n\t}(Mesh);\n\n\tvar _vector$b = /*@__PURE__*/new Vector3();\n\n\tvar _color1 = /*@__PURE__*/new Color();\n\n\tvar _color2 = /*@__PURE__*/new Color();\n\n\tvar HemisphereLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(HemisphereLightHelper, _Object3D);\n\n\t\tfunction HemisphereLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new OctahedronBufferGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\t_this.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (_this.color === undefined) _this.material.vertexColors = true;\n\t\t\tvar position = geometry.getAttribute('position');\n\t\t\tvar colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\n\t\t\t_this.add(new Mesh(geometry, _this.material));\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = HemisphereLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tvar mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tvar colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (var i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tvar color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$b.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t};\n\n\t\treturn HemisphereLightHelper;\n\t}(Object3D);\n\n\tvar GridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(GridHelper, _LineSegments);\n\n\t\tfunction GridHelper(size, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 10;\n\t\t\t}\n\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 10;\n\t\t\t}\n\n\t\t\tif (color1 === void 0) {\n\t\t\t\tcolor1 = 0x444444;\n\t\t\t}\n\n\t\t\tif (color2 === void 0) {\n\t\t\t\tcolor2 = 0x888888;\n\t\t\t}\n\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tvar center = divisions / 2;\n\t\t\tvar step = size / divisions;\n\t\t\tvar halfSize = size / 2;\n\t\t\tvar vertices = [],\n\t\t\t\t\tcolors = [];\n\n\t\t\tfor (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tvar color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'GridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn GridHelper;\n\t}(LineSegments);\n\n\tvar PolarGridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(PolarGridHelper, _LineSegments);\n\n\t\tfunction PolarGridHelper(radius, radials, circles, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 10;\n\t\t\t}\n\n\t\t\tif (radials === void 0) {\n\t\t\t\tradials = 16;\n\t\t\t}\n\n\t\t\tif (circles === void 0) {\n\t\t\t\tcircles = 8;\n\t\t\t}\n\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 64;\n\t\t\t}\n\n\t\t\tif (color1 === void 0) {\n\t\t\t\tcolor1 = 0x444444;\n\t\t\t}\n\n\t\t\tif (color2 === void 0) {\n\t\t\t\tcolor2 = 0x888888;\n\t\t\t}\n\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tvar vertices = [];\n\t\t\tvar colors = []; // create the radials\n\n\t\t\tfor (var i = 0; i <= radials; i++) {\n\t\t\t\tvar v = i / radials * (Math.PI * 2);\n\t\t\t\tvar x = Math.sin(v) * radius;\n\t\t\t\tvar z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tvar color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (var _i = 0; _i <= circles; _i++) {\n\t\t\t\tvar _color = _i & 1 ? color1 : color2;\n\n\t\t\t\tvar r = radius - radius / circles * _i;\n\n\t\t\t\tfor (var j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tvar _v = j / divisions * (Math.PI * 2);\n\n\t\t\t\t\tvar _x = Math.sin(_v) * r;\n\n\t\t\t\t\tvar _z = Math.cos(_v) * r;\n\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b); // second vertex\n\n\t\t\t\t\t_v = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\t_x = Math.sin(_v) * r;\n\t\t\t\t\t_z = Math.cos(_v) * r;\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'PolarGridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolarGridHelper;\n\t}(LineSegments);\n\n\tvar _v1$6 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v3$1 = /*@__PURE__*/new Vector3();\n\n\tvar DirectionalLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(DirectionalLightHelper, _Object3D);\n\n\t\tfunction DirectionalLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.lightPlane = new Line(geometry, material);\n\n\t\t\t_this.add(_this.lightPlane);\n\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\t_this.targetLine = new Line(geometry, material);\n\n\t\t\t_this.add(_this.targetLine);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = DirectionalLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\t_v1$6.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3$1.subVectors(_v2$3, _v1$6);\n\n\t\t\tthis.lightPlane.lookAt(_v2$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2$3);\n\t\t\tthis.targetLine.scale.z = _v3$1.length();\n\t\t};\n\n\t\treturn DirectionalLightHelper;\n\t}(Object3D);\n\n\tvar _vector$c = /*@__PURE__*/new Vector3();\n\n\tvar _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tvar CameraHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(CameraHelper, _LineSegments);\n\n\t\tfunction CameraHelper(camera) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar pointMap = {}; // colors\n\n\t\t\tvar colorFrustum = new Color(0xffaa00);\n\t\t\tvar colorCone = new Color(0xff0000);\n\t\t\tvar colorUp = new Color(0x00aaff);\n\t\t\tvar colorTarget = new Color(0xffffff);\n\t\t\tvar colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'CameraHelper';\n\t\t\t_this.camera = camera;\n\t\t\tif (_this.camera.updateProjectionMatrix) _this.camera.updateProjectionMatrix();\n\t\t\t_this.matrix = camera.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.pointMap = pointMap;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CameraHelper.prototype;\n\n\t\t_proto.update = function update() {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar pointMap = this.pointMap;\n\t\t\tvar w = 1,\n\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t};\n\n\t\treturn CameraHelper;\n\t}(LineSegments);\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector$c.set(x, y, z).unproject(camera);\n\n\t\tvar points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector$c.x, _vector$c.y, _vector$c.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar _box$3 = /*@__PURE__*/new Box3();\n\n\tvar BoxHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(BoxHelper, _LineSegments);\n\n\t\tfunction BoxHelper(object, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = new Float32Array(8 * 3);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.object = object;\n\t\t\t_this.type = 'BoxHelper';\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = BoxHelper.prototype;\n\n\t\t_proto.update = function update(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box$3.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box$3.isEmpty()) return;\n\t\t\tvar min = _box$3.min;\n\t\t\tvar max = _box$3.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn BoxHelper;\n\t}(LineSegments);\n\n\tvar Box3Helper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(Box3Helper, _LineSegments);\n\n\t\tfunction Box3Helper(box, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.box = box;\n\t\t\t_this.type = 'Box3Helper';\n\n\t\t\t_this.geometry.computeBoundingSphere();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Box3Helper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn Box3Helper;\n\t}(LineSegments);\n\n\tvar PlaneHelper = /*#__PURE__*/function (_Line) {\n\t\t_inheritsLoose(PlaneHelper, _Line);\n\n\t\tfunction PlaneHelper(plane, size, hex) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 1;\n\t\t\t}\n\n\t\t\tif (hex === void 0) {\n\t\t\t\thex = 0xffff00;\n\t\t\t}\n\n\t\t\tvar color = hex;\n\t\t\tvar positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\t_this = _Line.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.type = 'PlaneHelper';\n\t\t\t_this.plane = plane;\n\t\t\t_this.size = size;\n\t\t\tvar positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\n\t\t\t_this.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PlaneHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\n\t\t\t_Line.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn PlaneHelper;\n\t}(Line);\n\n\tvar _axis = /*@__PURE__*/new Vector3();\n\n\tvar _lineGeometry, _coneGeometry;\n\n\tvar ArrowHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(ArrowHelper, _Object3D);\n\n\t\tfunction ArrowHelper(dir, origin, length, color, headLength, headWidth) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this; // dir is assumed to be normalized\n\n\t\t\t_this.type = 'ArrowHelper';\n\t\t\tif (dir === undefined) dir = new Vector3(0, 0, 1);\n\t\t\tif (origin === undefined) origin = new Vector3(0, 0, 0);\n\t\t\tif (length === undefined) length = 1;\n\t\t\tif (color === undefined) color = 0xffff00;\n\t\t\tif (headLength === undefined) headLength = 0.2 * length;\n\t\t\tif (headWidth === undefined) headWidth = 0.2 * headLength;\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderBufferGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\t_this.position.copy(origin);\n\n\t\t\t_this.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.line.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.line);\n\n\t\t\t_this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.cone.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.setDirection(dir);\n\n\t\t\t_this.setLength(length, headLength, headWidth);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ArrowHelper.prototype;\n\n\t\t_proto.setDirection = function setDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tvar radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t};\n\n\t\t_proto.setLength = function setLength(length, headLength, headWidth) {\n\t\t\tif (headLength === undefined) headLength = 0.2 * length;\n\t\t\tif (headWidth === undefined) headWidth = 0.2 * headLength;\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t};\n\n\t\t_proto.setColor = function setColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source, false);\n\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn ArrowHelper;\n\t}(Object3D);\n\n\tvar AxesHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(AxesHelper, _LineSegments);\n\n\t\tfunction AxesHelper(size) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 1;\n\t\t\t}\n\n\t\t\tvar vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tvar colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'AxesHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn AxesHelper;\n\t}(LineSegments);\n\n\tvar _floatView = new Float32Array(1);\n\n\tvar _int32View = new Int32Array(_floatView.buffer);\n\n\tvar DataUtils = {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\ttoHalfFloat: function toHalfFloat(val) {\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\t\t\t_floatView[0] = val;\n\t\t\tvar x = _int32View[0];\n\t\t\tvar bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tvar m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tvar e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\t};\n\n\tvar _ENCODINGS;\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tvar EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tvar MAX_SAMPLES = 20;\n\tvar ENCODINGS = (_ENCODINGS = {}, _ENCODINGS[LinearEncoding] = 0, _ENCODINGS[sRGBEncoding] = 1, _ENCODINGS[RGBEEncoding] = 2, _ENCODINGS[RGBM7Encoding] = 3, _ENCODINGS[RGBM16Encoding] = 4, _ENCODINGS[RGBDEncoding] = 5, _ENCODINGS[GammaEncoding] = 6, _ENCODINGS);\n\n\tvar _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tvar _createPlanes2 = /*@__PURE__*/_createPlanes(),\n\t\t\t_lodPlanes = _createPlanes2._lodPlanes,\n\t\t\t_sizeLods = _createPlanes2._sizeLods,\n\t\t\t_sigmas = _createPlanes2._sigmas;\n\n\tvar _clearColor = /*@__PURE__*/new Color();\n\n\tvar _oldTarget = null; // Golden Ratio\n\n\tvar PHI = (1 + Math.sqrt(5)) / 2;\n\tvar INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tvar _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tvar PMREMGenerator = /*#__PURE__*/function () {\n\t\tfunction PMREMGenerator(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tvar _proto = PMREMGenerator.prototype;\n\n\t\t_proto.fromScene = function fromScene(scene, sigma, near, far) {\n\t\t\tif (sigma === void 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\tif (near === void 0) {\n\t\t\t\tnear = 0.1;\n\t\t\t}\n\n\t\t\tif (far === void 0) {\n\t\t\t\tfar = 100;\n\t\t\t}\n\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromEquirectangular = function fromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromCubemap = function fromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileCubemapShader = function compileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileEquirectangularShader = function compileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\t;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (var i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\t\t;\n\n\t\t_proto._cleanup = function _cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t};\n\n\t\t_proto._fromTexture = function _fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._allocateTargets = function _allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tvar params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tvar cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._compileMaterial = function _compileMaterial(material) {\n\t\t\tvar tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t};\n\n\t\t_proto._sceneToCubeUV = function _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tvar fov = 90;\n\t\t\tvar aspect = 1;\n\t\t\tvar cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tvar upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tvar forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar outputEncoding = renderer.outputEncoding;\n\t\t\tvar toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\tvar clearAlpha = renderer.getClearAlpha();\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\tvar background = scene.background;\n\n\t\t\tif (background && background.isColor) {\n\t\t\t\tbackground.convertSRGBToLinear(); // Convert linear to RGBE\n\n\t\t\t\tvar maxComponent = Math.max(background.r, background.g, background.b);\n\t\t\t\tvar fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\n\t\t\t\tbackground = background.multiplyScalar(Math.pow(2.0, -fExp));\n\t\t\t\tvar alpha = (fExp + 128.0) / 255.0;\n\t\t\t\trenderer.setClearColor(background, alpha);\n\t\t\t\tscene.background = null;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.setClearColor(_clearColor, clearAlpha);\n\t\t};\n\n\t\t_proto._textureToCubeUV = function _textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tvar mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tvar uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t};\n\n\t\t_proto._applyPMREM = function _applyPMREM(cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (var i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tvar sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tvar poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\t\t;\n\n\t\t_proto._blur = function _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tvar pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t};\n\n\t\t_proto._halfBlur = function _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tvar STANDARD_DEVIATIONS = 3;\n\t\t\tvar blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tvar blurUniforms = blurMaterial.uniforms;\n\t\t\tvar pixels = _sizeLods[lodIn] - 1;\n\t\t\tvar radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tvar samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES);\n\t\t\t}\n\n\t\t\tvar weights = [];\n\t\t\tvar sum = 0;\n\n\t\t\tfor (var i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tvar _x = i / sigmaPixels;\n\n\t\t\t\tvar weight = Math.exp(-_x * _x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _i = 0; _i < weights.length; _i++) {\n\t\t\t\tweights[_i] = weights[_i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tvar outputSize = _sizeLods[lodOut];\n\t\t\tvar x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tvar y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t};\n\n\t\treturn PMREMGenerator;\n\t}();\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\t\tvar lod = LOD_MAX;\n\n\t\tfor (var i = 0; i < TOTAL_LODS; i++) {\n\t\t\tvar sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tvar sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tvar texelSize = 1.0 / (sizeLod - 1);\n\t\t\tvar min = -texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\t\t\tvar position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tvar uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tvar faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (var face = 0; face < cubeFaces; face++) {\n\t\t\t\tvar x = face % 3 * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : -1;\n\t\t\t\tvar coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tvar fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes: _lodPlanes,\n\t\t\t_sizeLods: _sizeLods,\n\t\t\t_sigmas: _sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tvar weights = new Float32Array(maxSamples);\n\t\tvar poleAxis = new Vector3(0, 1, 0);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform int samples;\\n\\t\\t\\tuniform float weights[ n ];\\n\\t\\t\\tuniform bool latitudinal;\\n\\t\\t\\tuniform float dTheta;\\n\\t\\t\\tuniform float mipInt;\\n\\t\\t\\tuniform vec3 poleAxis;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tvec3 getSample( float theta, vec3 axis ) {\\n\\n\\t\\t\\t\\tfloat cosTheta = cos( theta );\\n\\t\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross( axis, vOutputDirection ) * sin( theta )\\n\\t\\t\\t\\t\\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\\n\\n\\t\\t\\t\\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\\n\\n\\t\\t\\t\\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\\n\\n\\t\\t\\t\\t\\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taxis = normalize( axis );\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\\n\\n\\t\\t\\t\\tfor ( int i = 1; i < n; i++ ) {\\n\\n\\t\\t\\t\\t\\tif ( i >= samples ) {\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat theta = dTheta * float( i );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tvar texelSize = new Vector2(1, 1);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\t\\t\\t\\tvec3 outputDirection = normalize( vOutputDirection );\\n\\t\\t\\t\\tvec2 uv = equirectUv( outputDirection );\\n\\n\\t\\t\\t\\tvec2 f = fract( uv / texelSize - 0.5 );\\n\\t\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\t\\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x += texelSize.x;\\n\\t\\t\\t\\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.y += texelSize.y;\\n\\t\\t\\t\\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x -= texelSize.x;\\n\\t\\t\\t\\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\n\\t\\t\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\t\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\t\\t\\tgl_FragColor.rgb = mix( tm, bm, f.y );\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform samplerCube envMap;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tfunction Face4(a, b, c, d, normal, color, materialIndex) {\n\t\tconsole.warn('THREE.Face4 has been removed. A THREE.Face3 will be created instead.');\n\t\treturn new Face3(a, b, c, normal, color, materialIndex);\n\t}\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials) {\n\t\tif (materials === void 0) {\n\t\t\tmaterials = [];\n\t\t}\n\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tObject.assign(CurvePath.prototype, {\n\t\tcreatePointsGeometry: function createPointsGeometry(divisions) {\n\t\t\tconsole.warn('THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.'); // generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints(divisions);\n\t\t\treturn this.createGeometry(pts);\n\t\t},\n\t\tcreateSpacedPointsGeometry: function createSpacedPointsGeometry(divisions) {\n\t\t\tconsole.warn('THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.'); // generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints(divisions);\n\t\t\treturn this.createGeometry(pts);\n\t\t},\n\t\tcreateGeometry: function createGeometry(points) {\n\t\t\tconsole.warn('THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tvar point = points[i];\n\t\t\t\tgeometry.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n\t\t\t}\n\n\t\t\treturn geometry;\n\t\t}\n\t}); //\n\n\tObject.assign(Path.prototype, {\n\t\tfromPoints: function fromPoints(points) {\n\t\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\t\treturn this.setFromPoints(points);\n\t\t}\n\t}); //\n\n\tfunction ClosedSplineCurve3(points) {\n\t\tconsole.warn('THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\t}\n\tClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype); //\n\n\tfunction SplineCurve3(points) {\n\t\tconsole.warn('THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t}\n\tSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype); //\n\n\tfunction Spline(points) {\n\t\tconsole.warn('THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t}\n\tSpline.prototype = Object.create(CatmullRomCurve3.prototype);\n\tObject.assign(Spline.prototype, {\n\t\tinitFromArray: function initFromArray()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .initFromArray() has been removed.');\n\t\t},\n\t\tgetControlPointsArray: function getControlPointsArray()\n\t\t/* optionalTarget */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .getControlPointsArray() has been removed.');\n\t\t},\n\t\treparametrizeByArcLength: function reparametrizeByArcLength()\n\t\t/* samplingCoef */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .reparametrizeByArcLength() has been removed.');\n\t\t}\n\t}); //\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tObject.assign(Loader.prototype, {\n\t\textractUrlBase: function extractUrlBase(url) {\n\t\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\t\treturn LoaderUtils.extractUrlBase(url);\n\t\t}\n\t});\n\tLoader.Handlers = {\n\t\tadd: function add()\n\t\t/* regex, loader */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function get()\n\t\t/* file */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tObject.assign(Box2.prototype, {\n\t\tcenter: function center(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\t\treturn this.getCenter(optionalTarget);\n\t\t},\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tsize: function size(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\t\treturn this.getSize(optionalTarget);\n\t\t}\n\t});\n\tObject.assign(Box3.prototype, {\n\t\tcenter: function center(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\t\treturn this.getCenter(optionalTarget);\n\t\t},\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tisIntersectionSphere: function isIntersectionSphere(sphere) {\n\t\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\t\treturn this.intersectsSphere(sphere);\n\t\t},\n\t\tsize: function size(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\t\treturn this.getSize(optionalTarget);\n\t\t}\n\t});\n\tObject.assign(Sphere.prototype, {\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t}\n\t});\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t};\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tObject.assign(MathUtils, {\n\t\trandom16: function random16() {\n\t\t\tconsole.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');\n\t\t\treturn Math.random();\n\t\t},\n\t\tnearestPowerOfTwo: function nearestPowerOfTwo(value) {\n\t\t\tconsole.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');\n\t\t\treturn MathUtils.floorPowerOfTwo(value);\n\t\t},\n\t\tnextPowerOfTwo: function nextPowerOfTwo(value) {\n\t\t\tconsole.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');\n\t\t\treturn MathUtils.ceilPowerOfTwo(value);\n\t\t}\n\t});\n\tObject.assign(Matrix3.prototype, {\n\t\tflattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n\t\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\t\treturn this.toArray(array, offset);\n\t\t},\n\t\tmultiplyVector3: function multiplyVector3(vector) {\n\t\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\t\treturn vector.applyMatrix3(this);\n\t\t},\n\t\tmultiplyVector3Array: function multiplyVector3Array()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t\t},\n\t\tapplyToBufferAttribute: function applyToBufferAttribute(attribute) {\n\t\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\t\treturn attribute.applyMatrix3(this);\n\t\t},\n\t\tapplyToVector3Array: function applyToVector3Array()\n\t\t/* array, offset, length */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t\t},\n\t\tgetInverse: function getInverse(matrix) {\n\t\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\t\treturn this.copy(matrix).invert();\n\t\t}\n\t});\n\tObject.assign(Matrix4.prototype, {\n\t\textractPosition: function extractPosition(m) {\n\t\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\t\treturn this.copyPosition(m);\n\t\t},\n\t\tflattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n\t\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\t\treturn this.toArray(array, offset);\n\t\t},\n\t\tgetPosition: function getPosition() {\n\t\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t\t},\n\t\tsetRotationFromQuaternion: function setRotationFromQuaternion(q) {\n\t\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\t\treturn this.makeRotationFromQuaternion(q);\n\t\t},\n\t\tmultiplyToArray: function multiplyToArray() {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t\t},\n\t\tmultiplyVector3: function multiplyVector3(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\tmultiplyVector4: function multiplyVector4(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\tmultiplyVector3Array: function multiplyVector3Array()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t\t},\n\t\trotateAxis: function rotateAxis(v) {\n\t\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\t\tv.transformDirection(this);\n\t\t},\n\t\tcrossVector: function crossVector(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\ttranslate: function translate() {\n\t\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t\t},\n\t\trotateX: function rotateX() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t\t},\n\t\trotateY: function rotateY() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t\t},\n\t\trotateZ: function rotateZ() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t\t},\n\t\trotateByAxis: function rotateByAxis() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t\t},\n\t\tapplyToBufferAttribute: function applyToBufferAttribute(attribute) {\n\t\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\t\treturn attribute.applyMatrix4(this);\n\t\t},\n\t\tapplyToVector3Array: function applyToVector3Array()\n\t\t/* array, offset, length */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t\t},\n\t\tmakeFrustum: function makeFrustum(left, right, bottom, top, near, far) {\n\t\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t\t},\n\t\tgetInverse: function getInverse(matrix) {\n\t\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\t\treturn this.copy(matrix).invert();\n\t\t}\n\t});\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t};\n\n\tObject.assign(Quaternion.prototype, {\n\t\tmultiplyVector3: function multiplyVector3(vector) {\n\t\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\t\treturn vector.applyQuaternion(this);\n\t\t},\n\t\tinverse: function inverse() {\n\t\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\t\treturn this.invert();\n\t\t}\n\t});\n\tObject.assign(Ray.prototype, {\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tisIntersectionPlane: function isIntersectionPlane(plane) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\t\treturn this.intersectsPlane(plane);\n\t\t},\n\t\tisIntersectionSphere: function isIntersectionSphere(sphere) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\t\treturn this.intersectsSphere(sphere);\n\t\t}\n\t});\n\tObject.assign(Triangle.prototype, {\n\t\tarea: function area() {\n\t\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\t\treturn this.getArea();\n\t\t},\n\t\tbarycoordFromPoint: function barycoordFromPoint(point, target) {\n\t\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\t\treturn this.getBarycoord(point, target);\n\t\t},\n\t\tmidpoint: function midpoint(target) {\n\t\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\t\treturn this.getMidpoint(target);\n\t\t},\n\t\tnormal: function normal(target) {\n\t\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\t\treturn this.getNormal(target);\n\t\t},\n\t\tplane: function plane(target) {\n\t\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\t\treturn this.getPlane(target);\n\t\t}\n\t});\n\tObject.assign(Triangle, {\n\t\tbarycoordFromPoint: function barycoordFromPoint(point, a, b, c, target) {\n\t\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t\t},\n\t\tnormal: function normal(a, b, c, target) {\n\t\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\t\treturn Triangle.getNormal(a, b, c, target);\n\t\t}\n\t});\n\tObject.assign(Shape.prototype, {\n\t\textractAllPoints: function extractAllPoints(divisions) {\n\t\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\t\treturn this.extractPoints(divisions);\n\t\t},\n\t\textrude: function extrude(options) {\n\t\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\t\treturn new ExtrudeGeometry(this, options);\n\t\t},\n\t\tmakeGeometry: function makeGeometry(options) {\n\t\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\t\treturn new ShapeGeometry(this, options);\n\t\t}\n\t});\n\tObject.assign(Vector2.prototype, {\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tdistanceToManhattan: function distanceToManhattan(v) {\n\t\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\t\treturn this.manhattanDistanceTo(v);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t});\n\tObject.assign(Vector3.prototype, {\n\t\tsetEulerFromRotationMatrix: function setEulerFromRotationMatrix() {\n\t\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t\t},\n\t\tsetEulerFromQuaternion: function setEulerFromQuaternion() {\n\t\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t\t},\n\t\tgetPositionFromMatrix: function getPositionFromMatrix(m) {\n\t\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\t\treturn this.setFromMatrixPosition(m);\n\t\t},\n\t\tgetScaleFromMatrix: function getScaleFromMatrix(m) {\n\t\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\t\treturn this.setFromMatrixScale(m);\n\t\t},\n\t\tgetColumnFromMatrix: function getColumnFromMatrix(index, matrix) {\n\t\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\t\treturn this.setFromMatrixColumn(matrix, index);\n\t\t},\n\t\tapplyProjection: function applyProjection(m) {\n\t\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\t\treturn this.applyMatrix4(m);\n\t\t},\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tdistanceToManhattan: function distanceToManhattan(v) {\n\t\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\t\treturn this.manhattanDistanceTo(v);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t});\n\tObject.assign(Vector4.prototype, {\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t}); //\n\n\tObject.assign(Geometry.prototype, {\n\t\tcomputeTangents: function computeTangents() {\n\t\t\tconsole.error('THREE.Geometry: .computeTangents() has been removed.');\n\t\t},\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tconsole.error('THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.');\n\t\t},\n\t\tapplyMatrix: function applyMatrix(matrix) {\n\t\t\tconsole.warn('THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\t\treturn this.applyMatrix4(matrix);\n\t\t}\n\t});\n\tObject.assign(Object3D.prototype, {\n\t\tgetChildByName: function getChildByName(name) {\n\t\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\t\treturn this.getObjectByName(name);\n\t\t},\n\t\trenderDepth: function renderDepth() {\n\t\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t\t},\n\t\ttranslate: function translate(distance, axis) {\n\t\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\t\treturn this.translateOnAxis(axis, distance);\n\t\t},\n\t\tgetWorldRotation: function getWorldRotation() {\n\t\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t\t},\n\t\tapplyMatrix: function applyMatrix(matrix) {\n\t\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\t\treturn this.applyMatrix4(matrix);\n\t\t}\n\t});\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(Mesh.prototype, {\n\t\tsetDrawMode: function setDrawMode() {\n\t\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t}\n\t});\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(LOD.prototype, {\n\t\tobjects: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.LOD: .objects has been renamed to .levels.');\n\t\t\t\treturn this.levels;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperty(Skeleton.prototype, 'useVertexTexture', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t},\n\t\tset: function set() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t};\n\n\tObject.defineProperty(Curve.prototype, '__arcLengthDivisions', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\treturn this.arcLengthDivisions;\n\t\t},\n\t\tset: function set(value) {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\tthis.arcLengthDivisions = value;\n\t\t}\n\t}); //\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(BufferAttribute.prototype, {\n\t\tsetDynamic: function setDynamic(value) {\n\t\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\t\treturn this;\n\t\t},\n\t\tcopyIndicesArray: function copyIndicesArray()\n\t\t/* indices */\n\t\t{\n\t\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t\t},\n\t\tsetArray: function setArray()\n\t\t/* array */\n\t\t{\n\t\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t\t}\n\t});\n\tObject.assign(BufferGeometry.prototype, {\n\t\taddIndex: function addIndex(index) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\t\tthis.setIndex(index);\n\t\t},\n\t\taddAttribute: function addAttribute(name, attribute) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t\t}\n\n\t\t\tif (name === 'index') {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\t\tthis.setIndex(attribute);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\treturn this.setAttribute(name, attribute);\n\t\t},\n\t\taddDrawCall: function addDrawCall(start, count, indexOffset) {\n\t\t\tif (indexOffset !== undefined) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t\t}\n\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\t\tthis.addGroup(start, count);\n\t\t},\n\t\tclearDrawCalls: function clearDrawCalls() {\n\t\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\t\tthis.clearGroups();\n\t\t},\n\t\tcomputeTangents: function computeTangents() {\n\t\t\tconsole.warn('THREE.BufferGeometry: .computeTangents() has been removed.');\n\t\t},\n\t\tcomputeOffsets: function computeOffsets() {\n\t\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t\t},\n\t\tremoveAttribute: function removeAttribute(name) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\t\treturn this.deleteAttribute(name);\n\t\t},\n\t\tapplyMatrix: function applyMatrix(matrix) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\t\treturn this.applyMatrix4(matrix);\n\t\t}\n\t});\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InstancedBufferGeometry.prototype, {\n\t\tmaxInstancedCount: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\treturn this.instanceCount;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\tthis.instanceCount = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(Raycaster.prototype, {\n\t\tlinePrecision: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\treturn this.params.Line.threshold;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\tthis.params.Line.threshold = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InterleavedBuffer.prototype, {\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(value);\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(InterleavedBuffer.prototype, {\n\t\tsetDynamic: function setDynamic(value) {\n\t\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\t\treturn this;\n\t\t},\n\t\tsetArray: function setArray()\n\t\t/* array */\n\t\t{\n\t\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t\t}\n\t}); //\n\n\tObject.assign(ExtrudeBufferGeometry.prototype, {\n\t\tgetArrays: function getArrays() {\n\t\t\tconsole.error('THREE.ExtrudeBufferGeometry: .getArrays() has been removed.');\n\t\t},\n\t\taddShapeList: function addShapeList() {\n\t\t\tconsole.error('THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.');\n\t\t},\n\t\taddShape: function addShape() {\n\t\t\tconsole.error('THREE.ExtrudeBufferGeometry: .addShape() has been removed.');\n\t\t}\n\t}); //\n\n\tObject.assign(Scene.prototype, {\n\t\tdispose: function dispose() {\n\t\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Uniform.prototype, {\n\t\tdynamic: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function value() {\n\t\t\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhongMaterial.prototype, {\n\t\tmetal: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhysicalMaterial.prototype, {\n\t\ttransparency: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\treturn this.transmission;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\tthis.transmission = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.assign(WebGLRenderer.prototype, {\n\t\tclearTarget: function clearTarget(renderTarget, color, depth, stencil) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\t\tthis.setRenderTarget(renderTarget);\n\t\t\tthis.clear(color, depth, stencil);\n\t\t},\n\t\tanimate: function animate(callback) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\t\tthis.setAnimationLoop(callback);\n\t\t},\n\t\tgetCurrentRenderTarget: function getCurrentRenderTarget() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\t\treturn this.getRenderTarget();\n\t\t},\n\t\tgetMaxAnisotropy: function getMaxAnisotropy() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\t\t},\n\t\tgetPrecision: function getPrecision() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\t\treturn this.capabilities.precision;\n\t\t},\n\t\tresetGLState: function resetGLState() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\t\treturn this.state.reset();\n\t\t},\n\t\tsupportsFloatTextures: function supportsFloatTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\t\treturn this.extensions.get('OES_texture_float');\n\t\t},\n\t\tsupportsHalfFloatTextures: function supportsHalfFloatTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\t\treturn this.extensions.get('OES_texture_half_float');\n\t\t},\n\t\tsupportsStandardDerivatives: function supportsStandardDerivatives() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\t\treturn this.extensions.get('OES_standard_derivatives');\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function supportsCompressedTextureS3TC() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function supportsCompressedTexturePVRTC() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t\t},\n\t\tsupportsBlendMinMax: function supportsBlendMinMax() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\t\treturn this.extensions.get('EXT_blend_minmax');\n\t\t},\n\t\tsupportsVertexTextures: function supportsVertexTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\t\treturn this.capabilities.vertexTextures;\n\t\t},\n\t\tsupportsInstancedArrays: function supportsInstancedArrays() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t\t},\n\t\tenableScissorTest: function enableScissorTest(boolean) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\t\tthis.setScissorTest(boolean);\n\t\t},\n\t\tinitMaterial: function initMaterial() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t\t},\n\t\taddPrePlugin: function addPrePlugin() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t\t},\n\t\taddPostPlugin: function addPostPlugin() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t\t},\n\t\tupdateShadowMap: function updateShadowMap() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t\t},\n\t\tsetFaceCulling: function setFaceCulling() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t\t},\n\t\tallocTextureUnit: function allocTextureUnit() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t\t},\n\t\tsetTexture: function setTexture() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t\t},\n\t\tsetTexture2D: function setTexture2D() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t\t},\n\t\tsetTextureCube: function setTextureCube() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t\t},\n\t\tgetActiveMipMapLevel: function getActiveMipMapLevel() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\t\treturn this.getActiveMipmapLevel();\n\t\t}\n\t});\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* cullFace */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Audio.prototype, {\n\t\tload: {\n\t\t\tvalue: function value(file) {\n\t\t\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load(file, function (buffer) {\n\t\t\t\t\tscope.setBuffer(buffer);\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Audio: .startTime is now .play( delay ).');\n\t\t\t}\n\t\t}\n\t});\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t}; //\n\n\n\tvar GeometryUtils = {\n\t\tmerge: function merge(geometry1, geometry2, materialIndexOffset) {\n\t\t\tconsole.warn('THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.');\n\t\t\tvar matrix;\n\n\t\t\tif (geometry2.isMesh) {\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\t\t\t}\n\n\t\t\tgeometry1.merge(geometry2, matrix, materialIndexOffset);\n\t\t},\n\t\tcenter: function center(geometry) {\n\t\t\tconsole.warn('THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.');\n\t\t\treturn geometry.center();\n\t\t}\n\t};\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tvar SceneUtils = {\n\t\tcreateMultiMaterialObject: function createMultiMaterialObject()\n\t\t/* geometry, materials */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function detach()\n\t\t/* child, parent, scene */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function attach()\n\t\t/* child, scene, parent */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: THREE.TOUCH.ROTATE, TWO: THREE.TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().invert();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\tvar twoPI = 2 * Math.PI;\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\n\t\t\tvar min = scope.minAzimuthAngle;\n\t\t\tvar max = scope.maxAzimuthAngle;\n\n\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\tif ( min <= max ) {\n\n\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\n\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove, false );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp, false );\n\n\t\tscope.domElement.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onPointerDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseDown( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseMove( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerUp( event ) {\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseUp( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase THREE.MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointermove', onPointerMove, false );\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointerup', onPointerUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove, false );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp, false );\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase THREE.TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'pointerdown', onPointerDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\tscope.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nTHREE.MapControls = function ( object, domElement ) {\n\n\tTHREE.OrbitControls.call( this, object, domElement );\n\n\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\tthis.mouseButtons.LEFT = THREE.MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n\n\tthis.touches.ONE = THREE.TOUCH.PAN;\n\tthis.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n\n};\n\nTHREE.MapControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.MapControls.prototype.constructor = THREE.MapControls;\n","module.exports = \"#define GLSLIFY 1\\nuniform float time;\\n\\n//\\tClassic Perlin 3D Noise \\n//\\tby Stefan Gustavson\\n//\\nvarying float vProgress;\\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\\nvec4 fade(vec4 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\\n\\nfloat cnoise(vec4 P){\\n  vec4 Pi0 = floor(P); // Integer part for indexing\\n  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\\n  Pi0 = mod(Pi0, 289.0);\\n  Pi1 = mod(Pi1, 289.0);\\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = vec4(Pi0.zzzz);\\n  vec4 iz1 = vec4(Pi1.zzzz);\\n  vec4 iw0 = vec4(Pi0.wwww);\\n  vec4 iw1 = vec4(Pi1.wwww);\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n  vec4 ixy00 = permute(ixy0 + iw0);\\n  vec4 ixy01 = permute(ixy0 + iw1);\\n  vec4 ixy10 = permute(ixy1 + iw0);\\n  vec4 ixy11 = permute(ixy1 + iw1);\\n\\n  vec4 gx00 = ixy00 / 7.0;\\n  vec4 gy00 = floor(gx00) / 7.0;\\n  vec4 gz00 = floor(gy00) / 6.0;\\n  gx00 = fract(gx00) - 0.5;\\n  gy00 = fract(gy00) - 0.5;\\n  gz00 = fract(gz00) - 0.5;\\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\\n  vec4 sw00 = step(gw00, vec4(0.0));\\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\\n\\n  vec4 gx01 = ixy01 / 7.0;\\n  vec4 gy01 = floor(gx01) / 7.0;\\n  vec4 gz01 = floor(gy01) / 6.0;\\n  gx01 = fract(gx01) - 0.5;\\n  gy01 = fract(gy01) - 0.5;\\n  gz01 = fract(gz01) - 0.5;\\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\\n  vec4 sw01 = step(gw01, vec4(0.0));\\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\\n\\n  vec4 gx10 = ixy10 / 7.0;\\n  vec4 gy10 = floor(gx10) / 7.0;\\n  vec4 gz10 = floor(gy10) / 6.0;\\n  gx10 = fract(gx10) - 0.5;\\n  gy10 = fract(gy10) - 0.5;\\n  gz10 = fract(gz10) - 0.5;\\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\\n  vec4 sw10 = step(gw10, vec4(0.0));\\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\\n\\n  vec4 gx11 = ixy11 / 7.0;\\n  vec4 gy11 = floor(gx11) / 7.0;\\n  vec4 gz11 = floor(gy11) / 6.0;\\n  gx11 = fract(gx11) - 0.5;\\n  gy11 = fract(gy11) - 0.5;\\n  gz11 = fract(gz11) - 0.5;\\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\\n  vec4 sw11 = step(gw11, vec4(0.0));\\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\\n\\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\\n\\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\\n  g0000 *= norm00.x;\\n  g0100 *= norm00.y;\\n  g1000 *= norm00.z;\\n  g1100 *= norm00.w;\\n\\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\\n  g0001 *= norm01.x;\\n  g0101 *= norm01.y;\\n  g1001 *= norm01.z;\\n  g1101 *= norm01.w;\\n\\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\\n  g0010 *= norm10.x;\\n  g0110 *= norm10.y;\\n  g1010 *= norm10.z;\\n  g1110 *= norm10.w;\\n\\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\\n  g0011 *= norm11.x;\\n  g0111 *= norm11.y;\\n  g1011 *= norm11.z;\\n  g1111 *= norm11.w;\\n\\n  float n0000 = dot(g0000, Pf0);\\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\\n  float n1111 = dot(g1111, Pf1);\\n\\n  vec4 fade_xyzw = fade(Pf0);\\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\\n  return 2.2 * n_xyzw;\\n}\\n\\nvoid main() {\\n\\n    vec3 newpos = position;\\n    newpos.y += mod(time/30.,3.);\\n\\n    // newpos.z += cnoise(vec4(position, time/2.));\\n\\n    float progress = smoothstep(-1.,4.,newpos.y);\\n    float progress1 = smoothstep(-1.,8.,newpos.y);\\n    vProgress = progress;\\n\\n    vec3 noise2 = 0.4*(position + time*vec3(0.,0.1,0.))*vec3(3.,1.,1.);\\n\\n    newpos.yz += 1.5*progress1*(cnoise(vec4(noise2, time/3.))+0.2);\\n\\n    vec4 mvPosition = modelViewMatrix * vec4(newpos, 1.);\\n    gl_PointSize = 7. * (1. / - mvPosition.z);\\n    gl_Position = projectionMatrix * mvPosition;\\n}\";","\nglobal.CANVAS_SKETCH_DEFAULT_STORAGE_KEY = window.location.href;\n"]}